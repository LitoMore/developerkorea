[[[{"기":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"술":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"블":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"애":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"저":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"를":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"이":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"용":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"해":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"파":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"펑":["0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"션":["0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"과":["0f190449-82f8-427e-9e86-776d3223c31f"],"공":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"정":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"한":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"편":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"에":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3"],"서":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"통":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"확":["93b2d263-3996-4e97-93ce-87676213d1f3"],"장":["93b2d263-3996-4e97-93ce-87676213d1f3"],"듀":["a036df16-34ae-4612-adff-3c706f37d0e3"],"어":["a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"벤":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"트":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"키":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"프":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"명":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"령":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"퓨":["9378481a-17fc-4821-8285-392425ef2f16"],"전":["9378481a-17fc-4821-8285-392425ef2f16"],"개":["9378481a-17fc-4821-8285-392425ef2f16"],"워":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"앱":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"의":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"]},{"로":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"그":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"를":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"시":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"벤":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"트":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"리":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"드":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"구":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"독":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"및":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"직":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"프":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"라":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"인":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"을":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"팩":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"토":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"이":["0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"간":["0f190449-82f8-427e-9e86-776d3223c31f","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"형":["0f190449-82f8-427e-9e86-776d3223c31f"],"향":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"없":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"는":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"위":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"전":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"환":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"하":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"고":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"기":["93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"능":["93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"용":["93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"해":["93b2d263-3996-4e97-93ce-87676213d1f3"],"파":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"워":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"플":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"랫":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"폼":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"러":["a036df16-34ae-4612-adff-3c706f37d0e3"],"블":["a036df16-34ae-4612-adff-3c706f37d0e3"],"펑":["a036df16-34ae-4612-adff-3c706f37d0e3"],"션":["a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"으":["a036df16-34ae-4612-adff-3c706f37d0e3"],"웹":["a036df16-34ae-4612-adff-3c706f37d0e3"],"반":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"애":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"저":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"키":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"장":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"소":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"크":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"릿":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"에":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"활":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"성":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"록":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"한":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"확":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"줄":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"되":["5730d419-1acc-464c-b412-25340497860b"],"짚":["5730d419-1acc-464c-b412-25340497860b"],"발":["9378481a-17fc-4821-8285-392425ef2f16"],"팀":["9378481a-17fc-4821-8285-392425ef2f16"],"의":["9378481a-17fc-4821-8285-392425ef2f16"],"종":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"단":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"데":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"터":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"]},{"작":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"합":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"니":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"다":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"앱":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","9378481a-17fc-4821-8285-392425ef2f16"],"핸":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"들":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","a036df16-34ae-4612-adff-3c706f37d0e3"],"러":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"프":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"비":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"닝":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"링":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"하":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"는":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"가":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"지":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"방":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"식":["0f190449-82f8-427e-9e86-776d3223c31f"],"데":["0f190449-82f8-427e-9e86-776d3223c31f"],"터":["0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3"],"주":["0f190449-82f8-427e-9e86-776d3223c31f"],"고":["0f190449-82f8-427e-9e86-776d3223c31f"],"받":["0f190449-82f8-427e-9e86-776d3223c31f"],"및":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"애":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"저":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"도":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3"],"구":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3"],"활":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"양":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"한":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"소":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"셜":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"미":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"디":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"어":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","5730d419-1acc-464c-b412-25340497860b"],"알":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"커":["93b2d263-3996-4e97-93ce-87676213d1f3"],"스":["93b2d263-3996-4e97-93ce-87676213d1f3"],"텀":["93b2d263-3996-4e97-93ce-87676213d1f3"],"넥":["93b2d263-3996-4e97-93ce-87676213d1f3"],"곧":["93b2d263-3996-4e97-93ce-87676213d1f3"],"바":["93b2d263-3996-4e97-93ce-87676213d1f3"],"로":["93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"생":["93b2d263-3996-4e97-93ce-87676213d1f3"],"성":["93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"훅":["a036df16-34ae-4612-adff-3c706f37d0e3"],"검":["a036df16-34ae-4612-adff-3c706f37d0e3"],"사":["a036df16-34ae-4612-adff-3c706f37d0e3","9378481a-17fc-4821-8285-392425ef2f16"],"만":["a036df16-34ae-4612-adff-3c706f37d0e3"],"크":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"릿":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"테":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"션":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"관":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"이":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"리":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"화":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"시":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"키":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"기":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b"],"위":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"호":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"환":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"유":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"실":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"습":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"경":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"설":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"정":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"보":["5730d419-1acc-464c-b412-25340497860b"],"례":["9378481a-17fc-4821-8285-392425ef2f16"],"흐":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"름":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"추":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"]},{"하":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"기":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"법":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"용":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"리":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"적":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"]},{},{},{},{},{}],{},["@4c701917-b8f6-4ab4-a7b6-a8e053c80180","@8fc7e832-a65d-43ce-a49a-24f14b09fa47","@569d2d86-c23e-4bcb-b38c-6483cdf25d71","@0f190449-82f8-427e-9e86-776d3223c31f","@19b5d15b-9d44-4815-8fc9-2f692eff02d4","@4b93263d-63e1-47a7-bfbd-04ea135bf25e","@93b2d263-3996-4e97-93ce-87676213d1f3","@a036df16-34ae-4612-adff-3c706f37d0e3","@ef6e4d52-1148-4e48-8a7f-1e763e39621a","@d864d9d2-5001-4d65-a0d5-78127b45c424","@82d566ad-fa1e-4a41-b3aa-d156b35665a0","@7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","@32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","@5730d419-1acc-464c-b412-25340497860b","@9378481a-17fc-4821-8285-392425ef2f16","@d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"]],[[{"안":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"녕":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"하":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"세":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"요":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"년":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"한":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"국":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"마":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"이":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"크":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"로":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"소":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"프":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"트":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"에":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"서":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"새":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"롭":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"애":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"저":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"벤":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"그":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"리":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"드":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"라":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"는":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"비":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"스":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"를":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"용":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"면":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"다":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"양":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"형":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"태":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"의":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"기":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"반":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"아":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"키":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"텍":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"처":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"구":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"성":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"할":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"수":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"있":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"습":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"니":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"특":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"히":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"존":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"재":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"플":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"케":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"션":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"간":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","ef6e4d52-1148-4e48-8a7f-1e763e39621a","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"메":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"시":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"지":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"전":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"송":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"데":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"어":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"꽤":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"유":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"게":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"쓰":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"때":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"중":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"역":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","93b2d263-3996-4e97-93ce-87676213d1f3"],"을":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"가":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"래":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"와":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"같":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"생":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"자":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"퍼":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"블":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","a036df16-34ae-4612-adff-3c706f37d0e3","5730d419-1acc-464c-b412-25340497860b"],"셔":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"발":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"근":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","d864d9d2-5001-4d65-a0d5-78127b45c424"],"원":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"입":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"만":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"킬":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"무":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"엇":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"든":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"될":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"죠":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"림":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3"],"은":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"난":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"오":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"픈":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"인":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"즈":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"표":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"했":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"던":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b"],"클":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"우":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"내":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"일":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"부":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"캡":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"쳐":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"것":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"베":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"파":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"장":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"치":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16"],"대":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"해":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"묘":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"사":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"합":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"독":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e","5730d419-1acc-464c-b412-25340497860b"],"섭":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"버":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"핸":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"들":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"러":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"보":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"통":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"복":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"적":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"작":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"업":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"많":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"준":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"도":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"고":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"테":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"코":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"딩":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f"],"분":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"팩":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"토":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"링":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f"],"없":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"까":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"물":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"론":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"포":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"최":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"여":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"섯":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"군":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"정":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"식":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16"],"템":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"릿":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"으":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"나":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"타":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"방":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"법":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"알":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"겠":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"예":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3","5730d419-1acc-464c-b412-25340497860b"],"제":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"확":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"빌":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","5730d419-1acc-464c-b412-25340497860b"],"선":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"번":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"냥":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"변":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"값":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"출":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"력":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"실":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"행":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"결":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"과":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"옵":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"차":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16"],"례":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"곳":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"능":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"른":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"막":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"경":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"순":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"런":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"임":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"설":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"패":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"티":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"항":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"목":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"외":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"거":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"진":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"되":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"렇":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"펑":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"체":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"바":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"공":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"터":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"주":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"손":["0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"쉽":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3"],"받":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"현":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16"],"직":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"않":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"문":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"점":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"상":["0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"따":["0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"위":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"별":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","5730d419-1acc-464c-b412-25340497860b"],"줘":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424"],"야":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"단":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"록":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"술":["0f190449-82f8-427e-9e86-776d3223c31f","9378481a-17fc-4821-8285-392425ef2f16"],"언":["0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424"],"개":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"삶":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"영":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","9378481a-17fc-4821-8285-392425ef2f16"],"향":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"미":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"활":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"루":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"윤":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"책":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","9378481a-17fc-4821-8285-392425ef2f16"],"감":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"두":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"즘":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","d864d9d2-5001-4d65-a0d5-78127b45c424"],"더":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"화":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"민":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"족":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","9378481a-17fc-4821-8285-392425ef2f16"],"편":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"머":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","d864d9d2-5001-4d65-a0d5-78127b45c424"],"신":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"닝":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"람":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"뢰":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"회":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"롯":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"룹":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"노":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"계":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"속":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"참":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b"],"떻":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"었":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"학":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","9378481a-17fc-4821-8285-392425ef2f16"],"및":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"께":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"모":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"델":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"잘":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"호":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3"],"며":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"축":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"월":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"솔":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"박":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"님":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"운":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"말":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"씀":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"셨":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"동":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"피":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"품":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16"],"질":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3"],"떤":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","9378481a-17fc-4821-8285-392425ef2f16"],"음":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"남":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","82d566ad-fa1e-4a41-b3aa-d156b35665a0","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"못":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"째":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"당":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"심":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"채":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"관":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"련":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"징":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"려":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"판":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"접":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"짐":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"함":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"올":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3"],"규":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","5730d419-1acc-464c-b412-25340497860b"],"석":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"초":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"또":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"견":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3"],"썬":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"브":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"튜":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"널":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"디":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16"],"셜":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"싶":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","5730d419-1acc-464c-b412-25340497860b"],"좋":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"료":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16"],"팅":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","5730d419-1acc-464c-b412-25340497860b"],"갖":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3"],"약":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b"],"떨":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"르":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16"],"럴":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"워":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"앱":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"등":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3"],"깃":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"헙":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"웹":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3"],"훅":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3"],"름":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"온":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"후":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"됐":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"글":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"허":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"므":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"청":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"됩":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3"],"넣":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"튼":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"릭":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"끝":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"납":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"효":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424"],"검":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"증":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"절":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3"],"완":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424"],"왔":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3"],"높":["93b2d263-3996-4e97-93ce-87676213d1f3"],"굉":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"연":["93b2d263-3996-4e97-93ce-87676213d1f3","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"랫":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"폼":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"커":["93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3"],"텀":["93b2d263-3996-4e97-93ce-87676213d1f3"],"넥":["93b2d263-3996-4e97-93ce-87676213d1f3"],"봅":["93b2d263-3996-4e97-93ce-87676213d1f3"],"샘":["93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"본":["93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"뼈":["93b2d263-3996-4e97-93ce-87676213d1f3"],"춘":["93b2d263-3996-4e97-93ce-87676213d1f3"],"엔":["93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"냅":["93b2d263-3996-4e97-93ce-87676213d1f3"],"레":["93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"딱":["93b2d263-3996-4e97-93ce-87676213d1f3"],"켜":["93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"볼":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"추":["93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"텐":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"페":["93b2d263-3996-4e97-93ce-87676213d1f3"],"았":["93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"각":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"컴":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"혹":["a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"억":["a036df16-34ae-4612-adff-3c706f37d0e3"],"첫":["a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"컨":["a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"너":["a036df16-34ae-4612-adff-3c706f37d0e3","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"딘":["a036df16-34ae-4612-adff-3c706f37d0e3"],"턴":["a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"캐":["a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424"],"끔":["a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"된":["a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b"],"침":["a036df16-34ae-4612-adff-3c706f37d0e3"],"듀":["a036df16-34ae-4612-adff-3c706f37d0e3"],"싱":["a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424"],"놓":["a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"뤄":["a036df16-34ae-4612-adff-3c706f37d0e3"],"꺼":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"돌":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"매":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"긴":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"벌":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"찌":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"느":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"낌":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"졌":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"필":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"큼":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","5730d419-1acc-464c-b412-25340497860b"],"컬":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"킵":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"굳":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"얼":["d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"조":["d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"명":["d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b"],"급":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"덜":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"율":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"져":["d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"줍":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"카":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"뷰":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"백":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"슈":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"겨":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"먼":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"젝":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"집":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"령":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b"],"걸":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"닐":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"강":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"츠":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"환":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"괄":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"략":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"넌":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"닌":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"권":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"겪":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"농":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"꼼":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"달":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"퓨":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"쉬":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"울":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"낭":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"찍":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"겁":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"랩":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"립":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"셸":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"극":["5730d419-1acc-464c-b412-25340497860b"],"랬":["5730d419-1acc-464c-b412-25340497860b"],"금":["5730d419-1acc-464c-b412-25340497860b"],"덕":["5730d419-1acc-464c-b412-25340497860b"],"불":["5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"뀌":["5730d419-1acc-464c-b412-25340497860b"],"팀":["9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"듈":["9378481a-17fc-4821-8285-392425ef2f16"],"살":["9378481a-17fc-4821-8285-392425ef2f16"],"펴":["9378481a-17fc-4821-8285-392425ef2f16"],"교":["9378481a-17fc-4821-8285-392425ef2f16"],"잦":["9378481a-17fc-4821-8285-392425ef2f16"],"네":["9378481a-17fc-4821-8285-392425ef2f16"],"즉":["9378481a-17fc-4821-8285-392425ef2f16"],"흔":["9378481a-17fc-4821-8285-392425ef2f16"],"좀":["9378481a-17fc-4821-8285-392425ef2f16"],"넓":["9378481a-17fc-4821-8285-392425ef2f16"],"충":["9378481a-17fc-4821-8285-392425ef2f16"],"셈":["9378481a-17fc-4821-8285-392425ef2f16"],"배":["9378481a-17fc-4821-8285-392425ef2f16"],"헬":["9378481a-17fc-4821-8285-392425ef2f16"],"센":["9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"종":["9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"흐":["9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"잡":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"잃":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"린":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"곤":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"듬":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"건":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"슨":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"흘":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"측":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"텔":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"념":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"논":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"류":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"쌤":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"빈":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"]},{"게":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"기":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"술":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"블":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","0f190449-82f8-427e-9e86-776d3223c31f","ef6e4d52-1148-4e48-8a7f-1e763e39621a","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"그":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","d864d9d2-5001-4d65-a0d5-78127b45c424"],"를":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","d864d9d2-5001-4d65-a0d5-78127b45c424"],"선":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"보":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"입":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"니":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"다":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"의":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"클":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"라":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"우":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b"],"드":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"비":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","5730d419-1acc-464c-b412-25340497860b"],"스":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"삼":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"대":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","a036df16-34ae-4612-adff-3c706f37d0e3"],"축":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","9378481a-17fc-4821-8285-392425ef2f16"],"을":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"루":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"는":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"리":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"고":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"엄":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"밀":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"말":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","93b2d263-3996-4e97-93ce-87676213d1f3"],"른":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"긴":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"통":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"동":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","5730d419-1acc-464c-b412-25340497860b"],"당":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"문":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b"],"봐":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"도":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"큰":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"없":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16"],"낸":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"받":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"각":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"화":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"여":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"줍":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"개":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"브":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"커":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","9378481a-17fc-4821-8285-392425ef2f16"],"적":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"으":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"직":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","5730d419-1acc-464c-b412-25340497860b"],"접":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16"],"연":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"결":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"않":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"식":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"진":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"행":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"필":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"바":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"떤":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"좀":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","5730d419-1acc-464c-b412-25340497860b"],"더":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"알":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"싶":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"영":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"상":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"과":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","5730d419-1acc-464c-b412-25340497860b"],"료":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"확":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16"],"환":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"경":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b"],"토":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"픽":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"템":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"릿":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","5730d419-1acc-464c-b412-25340497860b"],"쉽":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"정":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"안":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16"],"타":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"깝":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"신":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","a036df16-34ae-4612-adff-3c706f37d0e3","9378481a-17fc-4821-8285-392425ef2f16"],"됩":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"추":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"방":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"법":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"실":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"두":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"코":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b"],"권":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"위":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"언":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"급":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"속":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"값":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"주":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16"],"현":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"샘":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"략":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","9378481a-17fc-4821-8285-392425ef2f16"],"허":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"되":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"또":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","d864d9d2-5001-4d65-a0d5-78127b45c424","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"떄":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"름":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"길":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"흐":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"묶":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"빼":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"놓":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"럴":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424"],"약":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"후":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"돌":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424"],"난":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16"],"므":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"별":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"합":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"뀔":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"달":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"했":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"모":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"사":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"교":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"려":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"넘":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"겨":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"미":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"터":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"잘":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"표":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"앞":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"봤":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3"],"던":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"공":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"였":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","9378481a-17fc-4821-8285-392425ef2f16"],"덩":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"룹":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","5730d419-1acc-464c-b412-25340497860b"],"종":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"류":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"져":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"갈":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"조":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"건":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"양":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3"],"오":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"활":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"떻":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"살":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"펴":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"켜":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"버":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"납":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16"],"러":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"릴":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"낼":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"핵":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"심":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d864d9d2-5001-4d65-a0d5-78127b45c424"],"곧":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"냅":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"온":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"본":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"따":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16"],"었":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"글":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f"],"벌":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"재":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"았":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"림":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"볼":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"단":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"계":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"걸":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"릭":["0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"세":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"프":["0f190449-82f8-427e-9e86-776d3223c31f","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"뷰":["0f190449-82f8-427e-9e86-776d3223c31f"],"설":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16"],"치":["0f190449-82f8-427e-9e86-776d3223c31f","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"쓰":["0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"태":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"할":["0f190449-82f8-427e-9e86-776d3223c31f","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"죠":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"먼":["0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"명":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"령":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"격":["0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"내":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"와":["0f190449-82f8-427e-9e86-776d3223c31f"],"같":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16"],"나":["0f190449-82f8-427e-9e86-776d3223c31f","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"텀":["0f190449-82f8-427e-9e86-776d3223c31f"],"엔":["0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"키":["0f190449-82f8-427e-9e86-776d3223c31f","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"퍼":["0f190449-82f8-427e-9e86-776d3223c31f","9378481a-17fc-4821-8285-392425ef2f16"],"셔":["0f190449-82f8-427e-9e86-776d3223c31f","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"턴":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"듭":["0f190449-82f8-427e-9e86-776d3223c31f"],"뿐":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"몇":["0f190449-82f8-427e-9e86-776d3223c31f","9378481a-17fc-4821-8285-392425ef2f16"],"메":["0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"발":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"생":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","9378481a-17fc-4821-8285-392425ef2f16"],"성":["0f190449-82f8-427e-9e86-776d3223c31f"],"구":["0f190449-82f8-427e-9e86-776d3223c31f","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"분":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16"],"슷":["0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3"],"항":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"외":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"머":["0f190449-82f8-427e-9e86-776d3223c31f","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"처":["0f190449-82f8-427e-9e86-776d3223c31f","9378481a-17fc-4821-8285-392425ef2f16"],"관":["0f190449-82f8-427e-9e86-776d3223c31f","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"읽":["0f190449-82f8-427e-9e86-776d3223c31f"],"평":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"완":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"툴":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"킷":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"된":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"깃":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","d864d9d2-5001-4d65-a0d5-78127b45c424"],"컬":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424"],"일":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"레":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"측":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"거":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"귀":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"링":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"유":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"형":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"율":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","9378481a-17fc-4821-8285-392425ef2f16"],"등":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"택":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"차":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"북":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"든":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"뒤":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"렇":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"셋":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3"],"숫":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"불":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424"],"간":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"득":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"좋":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"테":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"배":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"덱":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"짧":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"끝":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"났":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"체":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"튜":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3"],"집":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"얼":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"험":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"쳐":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"최":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","9378481a-17fc-4821-8285-392425ef2f16"],"객":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3"],"천":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"례":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"복":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","5730d419-1acc-464c-b412-25340497860b"],"잡":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"변":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"빠":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"르":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"산":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"플":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"랫":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","9378481a-17fc-4821-8285-392425ef2f16"],"폼":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","9378481a-17fc-4821-8285-392425ef2f16"],"담":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"쿼":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"파":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"송":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","82d566ad-fa1e-4a41-b3aa-d156b35665a0","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"열":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"임":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"폐":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"응":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"답":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"반":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"쪽":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16"],"피":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3"],"역":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"패":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"울":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"석":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"강":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"황":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3"],"람":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"중":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"혹":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"캐":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"꿔":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424"],"눴":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"씩":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"➡":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"️":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"첫":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"째":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"목":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"끊":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"겼":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"순":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"헤":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"딩":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"원":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"음":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"편":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"맞":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"멈":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"함":["93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"익":["93b2d263-3996-4e97-93ce-87676213d1f3"],"붙":["93b2d263-3996-4e97-93ce-87676213d1f3"],"록":["93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"번":["93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"디":["93b2d263-3996-4e97-93ce-87676213d1f3","5730d419-1acc-464c-b412-25340497860b"],"런":["93b2d263-3996-4e97-93ce-87676213d1f3","5730d419-1acc-464c-b412-25340497860b"],"끔":["93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"될":["93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16"],"괜":["93b2d263-3996-4e97-93ce-87676213d1f3"],"찮":["93b2d263-3996-4e97-93ce-87676213d1f3"],"땐":["93b2d263-3996-4e97-93ce-87676213d1f3"],"업":["93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"냥":["93b2d263-3996-4e97-93ce-87676213d1f3"],"초":["93b2d263-3996-4e97-93ce-87676213d1f3"],"염":["93b2d263-3996-4e97-93ce-87676213d1f3"],"✅":["93b2d263-3996-4e97-93ce-87676213d1f3"],"튼":["93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"눌":["93b2d263-3996-4e97-93ce-87676213d1f3","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"마":["93b2d263-3996-4e97-93ce-87676213d1f3"],"무":["93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424"],"작":["93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"탭":["93b2d263-3996-4e97-93ce-87676213d1f3"],"력":["93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16"],"창":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"청":["93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16"],"갑":["93b2d263-3996-4e97-93ce-87676213d1f3"],"너":["93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424"],"➕":["93b2d263-3996-4e97-93ce-87676213d1f3"],"검":["93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16"],"색":["93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16"],"금":["93b2d263-3996-4e97-93ce-87676213d1f3"],"액":["93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"소":["93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"셜":["93b2d263-3996-4e97-93ce-87676213d1f3"],"팅":["93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"갖":["a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"독":["a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"훨":["a036df16-34ae-4612-adff-3c706f37d0e3","5730d419-1acc-464c-b412-25340497860b"],"씬":["a036df16-34ae-4612-adff-3c706f37d0e3","5730d419-1acc-464c-b412-25340497860b"],"포":["a036df16-34ae-4612-adff-3c706f37d0e3"],"겠":["a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"티":["a036df16-34ae-4612-adff-3c706f37d0e3"],"암":["a036df16-34ae-4612-adff-3c706f37d0e3"],"출":["a036df16-34ae-4612-adff-3c706f37d0e3"],"텐":["a036df16-34ae-4612-adff-3c706f37d0e3"],"근":["a036df16-34ae-4612-adff-3c706f37d0e3","9378481a-17fc-4821-8285-392425ef2f16"],"것":["a036df16-34ae-4612-adff-3c706f37d0e3","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"탕":["a036df16-34ae-4612-adff-3c706f37d0e3"],"뭐":["a036df16-34ae-4612-adff-3c706f37d0e3"],"삭":["a036df16-34ae-4612-adff-3c706f37d0e3"],"델":["a036df16-34ae-4612-adff-3c706f37d0e3"],"릅":["a036df16-34ae-4612-adff-3c706f37d0e3"],"킬":["a036df16-34ae-4612-adff-3c706f37d0e3","5730d419-1acc-464c-b412-25340497860b"],"페":["a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"렬":["a036df16-34ae-4612-adff-3c706f37d0e3"],"옵":["a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"막":["a036df16-34ae-4612-adff-3c706f37d0e3","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"줄":["a036df16-34ae-4612-adff-3c706f37d0e3"],"까":["a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"졌":["a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"래":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"증":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"부":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"손":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"데":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"참":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"넥":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","9378481a-17fc-4821-8285-392425ef2f16"],"웹":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"훅":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"존":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"립":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"앤":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"호":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"련":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"섹":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"준":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"펙":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"향":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"캡":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"남":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"예":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"짝":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"꿉":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"럼":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"갯":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"딱":["d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"한":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"용":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"굉":["d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"많":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"찾":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"엇":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"요":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"괄":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"헙":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"운":["d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"어":["d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"젝":["d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"넌":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"점":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"맨":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"야":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"때":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"자":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b"],"즈":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"케":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"왕":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"인":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"은":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"렵":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"들":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"감":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"싸":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"벽":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"써":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"앱":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"시":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"네":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"뜯":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"짜":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"판":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"총":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"센":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"콘":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"솔":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"잊":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"닝":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"듈":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"애":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"베":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"깁":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"션":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"벗":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"효":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"킵":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"켰":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"며":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"꿀":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"및":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"큼":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"왔":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"셸":["5730d419-1acc-464c-b412-25340497860b"],"크":["5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"장":["5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"히":["5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"못":["5730d419-1acc-464c-b412-25340497860b"],"질":["5730d419-1acc-464c-b412-25340497860b"],"카":["5730d419-1acc-464c-b412-25340497860b"],"높":["5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"국":["5730d419-1acc-464c-b412-25340497860b"],"널":["9378481a-17fc-4821-8285-392425ef2f16"],"민":["9378481a-17fc-4821-8285-392425ef2f16"],"쌤":["9378481a-17fc-4821-8285-392425ef2f16"],"줬":["9378481a-17fc-4821-8285-392425ef2f16"],"만":["9378481a-17fc-4821-8285-392425ef2f16"],"굳":["9378481a-17fc-4821-8285-392425ef2f16"],"획":["9378481a-17fc-4821-8285-392425ef2f16"],"웠":["9378481a-17fc-4821-8285-392425ef2f16"],"저":["9378481a-17fc-4821-8285-392425ef2f16"],"펑":["9378481a-17fc-4821-8285-392425ef2f16"],"쌓":["9378481a-17fc-4821-8285-392425ef2f16"],"섭":["9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"빈":["9378481a-17fc-4821-8285-392425ef2f16"],"틴":["9378481a-17fc-4821-8285-392425ef2f16"],"렌":["9378481a-17fc-4821-8285-392425ef2f16"],"춰":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"뉘":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"팬":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"즉":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"쪼":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"갤":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"께":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"컨":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"줘":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"누":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"닙":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"벤":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"싱":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"깅":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"새":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"롭":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"됨":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"매":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"눈":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"]},{"중":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"심":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","5730d419-1acc-464c-b412-25340497860b"],"으":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"현":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"업":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"개":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"발":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"자":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"들":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","0f190449-82f8-427e-9e86-776d3223c31f"],"필":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"적":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","5730d419-1acc-464c-b412-25340497860b"],"인":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"내":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"용":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"룰":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"예":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"정":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"많":["4c701917-b8f6-4ab4-a7b6-a8e053c80180","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"은":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"성":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"원":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"줘":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"야":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"번":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","9378481a-17fc-4821-8285-392425ef2f16"],"거":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"움":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"따":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"닝":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"포":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"초":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"점":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"맞":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"록":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"겠":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","9378481a-17fc-4821-8285-392425ef2f16"],"준":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","a036df16-34ae-4612-adff-3c706f37d0e3"],"항":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"능":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"먼":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","d864d9d2-5001-4d65-a0d5-78127b45c424"],"설":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"앱":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"글":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","5730d419-1acc-464c-b412-25340497860b"],"뷰":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"며":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"제":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"뀔":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"잊":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"마":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"명":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"령":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"엔":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"뒤":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","a036df16-34ae-4612-adff-3c706f37d0e3"],"붙":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"함":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"께":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"찾":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"냅":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"음":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"끝":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"났":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"순":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"모":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b"],"큐":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"팅":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","19b5d15b-9d44-4815-8fc9-2f692eff02d4","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"젝":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"곧":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16"],"줄":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"금":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"까":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"았":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"조":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3"],"활":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"깃":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"쳐":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"당":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d864d9d2-5001-4d65-a0d5-78127b45c424"],"히":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"맥":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"택":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","9378481a-17fc-4821-8285-392425ef2f16"],"또":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"호":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16"],"둔":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"즈":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"르":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","5730d419-1acc-464c-b412-25340497860b"],"신":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"뿐":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"둘":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"얘":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"범":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"벗":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"킨":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"각":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b"],"낸":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"눈":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"봐":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","a036df16-34ae-4612-adff-3c706f37d0e3"],"처":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d864d9d2-5001-4d65-a0d5-78127b45c424"],"즉":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"상":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","93b2d263-3996-4e97-93ce-87676213d1f3"],"\ud83d":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"\ude09":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"역":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"및":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"간":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d864d9d2-5001-4d65-a0d5-78127b45c424"],"깁":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"느":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"써":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","19b5d15b-9d44-4815-8fc9-2f692eff02d4","9378481a-17fc-4821-8285-392425ef2f16"],"황":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"끔":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"좋":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"굉":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"장":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"낼":["0f190449-82f8-427e-9e86-776d3223c31f"],"됐":["0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"앞":["0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424"],"약":["0f190449-82f8-427e-9e86-776d3223c31f","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"했":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"두":["0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3"],"청":["0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"핸":["0f190449-82f8-427e-9e86-776d3223c31f"],"러":["0f190449-82f8-427e-9e86-776d3223c31f"],"검":["0f190449-82f8-427e-9e86-776d3223c31f","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"증":["0f190449-82f8-427e-9e86-776d3223c31f","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"웹":["0f190449-82f8-427e-9e86-776d3223c31f","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"훅":["0f190449-82f8-427e-9e86-776d3223c31f"],"펙":["0f190449-82f8-427e-9e86-776d3223c31f"],"소":["0f190449-82f8-427e-9e86-776d3223c31f","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"헤":["0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"반":["0f190449-82f8-427e-9e86-776d3223c31f","9378481a-17fc-4821-8285-392425ef2f16"],"응":["0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"답":["0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"실":["0f190449-82f8-427e-9e86-776d3223c31f"],"계":["0f190449-82f8-427e-9e86-776d3223c31f","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b"],"일":["0f190449-82f8-427e-9e86-776d3223c31f","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"코":["0f190449-82f8-427e-9e86-776d3223c31f"],"부":["0f190449-82f8-427e-9e86-776d3223c31f","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"려":["0f190449-82f8-427e-9e86-776d3223c31f","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"렬":["0f190449-82f8-427e-9e86-776d3223c31f","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"화":["0f190449-82f8-427e-9e86-776d3223c31f"],"알":["0f190449-82f8-427e-9e86-776d3223c31f","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"급":["0f190449-82f8-427e-9e86-776d3223c31f","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"피":["0f190449-82f8-427e-9e86-776d3223c31f"],"종":["0f190449-82f8-427e-9e86-776d3223c31f","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"임":["0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"편":["0f190449-82f8-427e-9e86-776d3223c31f"],"꿔":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"꾸":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"볼":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"봄":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"무":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"엇":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"쉬":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"염":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"털":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"존":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"받":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"셔":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"디":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"탭":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"컴":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"퓨":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"턴":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"므":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"패":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"찰":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"률":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"술":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"쓰":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","5730d419-1acc-464c-b412-25340497860b"],"작":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"램":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"머":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"방":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"법":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"연":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424"],"결":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424"],"던":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"측":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"뿌":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"앨":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"복":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3"],"잡":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"말":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"액":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"막":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"교":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"관":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","5730d419-1acc-464c-b412-25340497860b"],"련":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"셈":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","5730d419-1acc-464c-b412-25340497860b"],"냈":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"넥":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"페":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"북":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"픈":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"풀":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"린":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16"],"텀":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"밖":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"침":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"켜":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"놓":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","d864d9d2-5001-4d65-a0d5-78127b45c424","9378481a-17fc-4821-8285-392425ef2f16"],"겨":["93b2d263-3996-4e97-93ce-87676213d1f3"],"전":["93b2d263-3996-4e97-93ce-87676213d1f3"],"넣":["93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"되":["93b2d263-3996-4e97-93ce-87676213d1f3"],"었":["93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16"],"크":["93b2d263-3996-4e97-93ce-87676213d1f3"],"떻":["93b2d263-3996-4e97-93ce-87676213d1f3"],"좀":["93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"더":["93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"놨":["93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"새":["93b2d263-3996-4e97-93ce-87676213d1f3","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"캔":["93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16"],"콘":["93b2d263-3996-4e97-93ce-87676213d1f3"],"롤":["93b2d263-3996-4e97-93ce-87676213d1f3"],"벨":["93b2d263-3996-4e97-93ce-87676213d1f3"],"렀":["93b2d263-3996-4e97-93ce-87676213d1f3"],"뉴":["93b2d263-3996-4e97-93ce-87676213d1f3","9378481a-17fc-4821-8285-392425ef2f16"],"떤":["93b2d263-3996-4e97-93ce-87676213d1f3"],"물":["93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","5730d419-1acc-464c-b412-25340497860b"],"름":["93b2d263-3996-4e97-93ce-87676213d1f3"],"른":["93b2d263-3996-4e97-93ce-87676213d1f3"],"블":["93b2d263-3996-4e97-93ce-87676213d1f3"],"루":["93b2d263-3996-4e97-93ce-87676213d1f3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"불":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"배":["a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"열":["a036df16-34ae-4612-adff-3c706f37d0e3","5730d419-1acc-464c-b412-25340497860b"],"씩":["a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424"],"슷":["a036df16-34ae-4612-adff-3c706f37d0e3","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"타":["a036df16-34ae-4612-adff-3c706f37d0e3","d864d9d2-5001-4d65-a0d5-78127b45c424"],"탬":["a036df16-34ae-4612-adff-3c706f37d0e3"],"프":["a036df16-34ae-4612-adff-3c706f37d0e3"],"쿼":["a036df16-34ae-4612-adff-3c706f37d0e3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"링":["a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"캡":["a036df16-34ae-4612-adff-3c706f37d0e3"],"후":["a036df16-34ae-4612-adff-3c706f37d0e3","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"날":["a036df16-34ae-4612-adff-3c706f37d0e3"],"회":["a036df16-34ae-4612-adff-3c706f37d0e3"],"우":["a036df16-34ae-4612-adff-3c706f37d0e3"],"퍼":["a036df16-34ae-4612-adff-3c706f37d0e3"],"져":["a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"안":["a036df16-34ae-4612-adff-3c706f37d0e3"],"진":["a036df16-34ae-4612-adff-3c706f37d0e3"],"완":["a036df16-34ae-4612-adff-3c706f37d0e3"],"봤":["a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"큼":["a036df16-34ae-4612-adff-3c706f37d0e3"],"큰":["a036df16-34ae-4612-adff-3c706f37d0e3"],"높":["a036df16-34ae-4612-adff-3c706f37d0e3"],"세":["a036df16-34ae-4612-adff-3c706f37d0e3","5730d419-1acc-464c-b412-25340497860b"],"홀":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"미":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"치":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"환":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","9378481a-17fc-4821-8285-392425ef2f16"],"킬":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"옵":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"근":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"넌":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"공":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"갖":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"출":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","9378481a-17fc-4821-8285-392425ef2f16"],"단":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"된":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","9378481a-17fc-4821-8285-392425ef2f16"],"최":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","5730d419-1acc-464c-b412-25340497860b"],"맨":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"위":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"주":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"재":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","9378481a-17fc-4821-8285-392425ef2f16"],"카":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"찬":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"건":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"너":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"뛰":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"쪽":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"겁":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"워":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"됩":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"확":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424"],"셨":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"태":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"뀐":["ef6e4d52-1148-4e48-8a7f-1e763e39621a","5730d419-1acc-464c-b412-25340497860b"],"든":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"넘":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"갑":["d864d9d2-5001-4d65-a0d5-78127b45c424","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"대":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"체":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"행":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"외":["d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"케":["d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b"],"걸":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"걱":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"추":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"담":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"될":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"것":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"죠":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"림":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"\udd13":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"튼":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"쇠":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"클":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"릭":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"팝":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"창":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"력":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"컬":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"경":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"양":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"잠":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"긴":["82d566ad-fa1e-4a41-b3aa-d156b35665a0","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"닫":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"힘":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"바":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"파":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"폴":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"듭":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"뀌":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"낄":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"달":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"줍":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"나":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"속":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"통":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"비":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"분":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"텍":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"색":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"올":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"키":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"품":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"군":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"협":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"절":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"값":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"길":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"런":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"탕":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"언":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"독":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"커":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"뤄":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"탈":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"직":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"접":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"눌":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"험":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"류":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16"],"등":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"룹":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"덱":["5730d419-1acc-464c-b412-25340497860b"],"네":["5730d419-1acc-464c-b412-25340497860b"],"없":["5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"돌":["5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"생":["5730d419-1acc-464c-b412-25340497860b"],"깥":["5730d419-1acc-464c-b412-25340497860b"],"표":["5730d419-1acc-464c-b412-25340497860b"],"듈":["5730d419-1acc-464c-b412-25340497860b"],"펑":["5730d419-1acc-464c-b412-25340497860b"],"컨":["5730d419-1acc-464c-b412-25340497860b"],"섬":["5730d419-1acc-464c-b412-25340497860b"],"랜":["5730d419-1acc-464c-b412-25340497860b"],"론":["5730d419-1acc-464c-b412-25340497860b"],"빠":["5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"튜":["9378481a-17fc-4821-8285-392425ef2f16"],"좌":["9378481a-17fc-4821-8285-392425ef2f16"],"➕":["9378481a-17fc-4821-8285-392425ef2f16"],"메":["9378481a-17fc-4821-8285-392425ef2f16"],"참":["9378481a-17fc-4821-8285-392425ef2f16"],"형":["9378481a-17fc-4821-8285-392425ef2f16"],"졌":["9378481a-17fc-4821-8285-392425ef2f16"],"본":["9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"샷":["9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"손":["9378481a-17fc-4821-8285-392425ef2f16"],"쉽":["9378481a-17fc-4821-8285-392425ef2f16"],"풍":["9378481a-17fc-4821-8285-392425ef2f16"],"객":["9378481a-17fc-4821-8285-392425ef2f16"],"별":["9378481a-17fc-4821-8285-392425ef2f16"],"뒀":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"식":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"봉":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"투":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"딕":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"둡":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"살":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"펴":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"겼":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"략":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"켰":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"변":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"닌":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"빌":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"]},{"부":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"탁":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"립":["4c701917-b8f6-4ab4-a7b6-a8e053c80180"],"헙":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"액":["8fc7e832-a65d-43ce-a49a-24f14b09fa47"],"손":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"궁":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"관":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"심":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"➡":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"️":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"계":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"온":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"강":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"튜":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"채":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b","9378481a-17fc-4821-8285-392425ef2f16"],"널":["8fc7e832-a65d-43ce-a49a-24f14b09fa47","569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"긴":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"듬":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"무":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","ef6e4d52-1148-4e48-8a7f-1e763e39621a","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b"],"쪼":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"브":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"중":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"닉":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"함":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"낄":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"랍":["569d2d86-c23e-4bcb-b38c-6483cdf25d71"],"클":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","d864d9d2-5001-4d65-a0d5-78127b45c424","5730d419-1acc-464c-b412-25340497860b"],"료":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","0f190449-82f8-427e-9e86-776d3223c31f","19b5d15b-9d44-4815-8fc9-2f692eff02d4","93b2d263-3996-4e97-93ce-87676213d1f3","a036df16-34ae-4612-adff-3c706f37d0e3","ef6e4d52-1148-4e48-8a7f-1e763e39621a","d864d9d2-5001-4d65-a0d5-78127b45c424","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","5730d419-1acc-464c-b412-25340497860b","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"발":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","5730d419-1acc-464c-b412-25340497860b"],"유":["569d2d86-c23e-4bcb-b38c-6483cdf25d71","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"릴":["0f190449-82f8-427e-9e86-776d3223c31f"],"즈":["0f190449-82f8-427e-9e86-776d3223c31f"],"우":["0f190449-82f8-427e-9e86-776d3223c31f"],"신":["0f190449-82f8-427e-9e86-776d3223c31f","93b2d263-3996-4e97-93ce-87676213d1f3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"개":["0f190449-82f8-427e-9e86-776d3223c31f"],"낼":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"희":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"망":["19b5d15b-9d44-4815-8fc9-2f692eff02d4"],"금":["19b5d15b-9d44-4815-8fc9-2f692eff02d4","82d566ad-fa1e-4a41-b3aa-d156b35665a0","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"뿐":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"향":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"획":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"조":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"컨":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"텐":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"츠":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"될":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"또":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"템":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"텍":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"민":["4b93263d-63e1-47a7-bfbd-04ea135bf25e"],"프":["4b93263d-63e1-47a7-bfbd-04ea135bf25e","93b2d263-3996-4e97-93ce-87676213d1f3"],"간":["93b2d263-3996-4e97-93ce-87676213d1f3","32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"엄":["93b2d263-3996-4e97-93ce-87676213d1f3"],"워":["a036df16-34ae-4612-adff-3c706f37d0e3"],"크":["a036df16-34ae-4612-adff-3c706f37d0e3","82d566ad-fa1e-4a41-b3aa-d156b35665a0","7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"분":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"슷":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"꽤":["ef6e4d52-1148-4e48-8a7f-1e763e39621a"],"특":["d864d9d2-5001-4d65-a0d5-78127b45c424"],"마":["82d566ad-fa1e-4a41-b3aa-d156b35665a0"],"세":["7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b"],"봤":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"잡":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"힐":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"짧":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"\ud83d":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"\ude09":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"코":["32ba3114-a9af-404a-b6d7-4ef5cc1f07d5"],"꾸":["5730d419-1acc-464c-b412-25340497860b"],"준":["5730d419-1acc-464c-b412-25340497860b"],"좋":["5730d419-1acc-464c-b412-25340497860b"],"소":["9378481a-17fc-4821-8285-392425ef2f16"],"거":["9378481a-17fc-4821-8285-392425ef2f16"],"쳐":["9378481a-17fc-4821-8285-392425ef2f16"],"닷":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"넷":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"벽":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"큰":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"],"루":["d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"]},{},{},{},{},{}],{},["@4c701917-b8f6-4ab4-a7b6-a8e053c80180","@8fc7e832-a65d-43ce-a49a-24f14b09fa47","@569d2d86-c23e-4bcb-b38c-6483cdf25d71","@0f190449-82f8-427e-9e86-776d3223c31f","@19b5d15b-9d44-4815-8fc9-2f692eff02d4","@4b93263d-63e1-47a7-bfbd-04ea135bf25e","@93b2d263-3996-4e97-93ce-87676213d1f3","@a036df16-34ae-4612-adff-3c706f37d0e3","@ef6e4d52-1148-4e48-8a7f-1e763e39621a","@d864d9d2-5001-4d65-a0d5-78127b45c424","@82d566ad-fa1e-4a41-b3aa-d156b35665a0","@7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","@32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","@5730d419-1acc-464c-b412-25340497860b","@9378481a-17fc-4821-8285-392425ef2f16","@d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed"]],{"4c701917-b8f6-4ab4-a7b6-a8e053c80180":{"id":"4c701917-b8f6-4ab4-a7b6-a8e053c80180","index":"Blog","path":"/posts/2021/01/01/tech-blog-opening/","node":{"title":"Microsoft Korea 기술 블로그를 시작합니다","category":"Announcement","description":"2021년을 맞이해서 Microsoft Korea에서 새롭게 기술 블로그를 선보입니다","content":"\n안녕하세요!\n\n2021년 한국 마이크로소프트에서 새롭게 기술 블로그를 선보입니다. 마이크로소프트의 클라우드 서비스 삼대 축을 이루는 [Microsoft Azure][ms azure], [Microsoft 365][ms 365] 그리고 [Microsoft Power Platform][ms pwpf]을 중심으로 현업 개발자들이 필요로 하는 기술적인 내용들을 다룰 예정입니다.\n\n많은 성원 부탁드립니다!\n\n![Developer Advocate Bit][image-01]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/01/2021-01-01-tech-blog-opening-01.png\n\n[ms azure]: https://azure.microsoft.com/ko-kr/\n[ms 365]: https://www.microsoft.com/ko-kr/microsoft-365\n[ms pwpf]: https://powerplatform.microsoft.com/ko-kr/\n"},"title":"Microsoft Korea 기술 블로그를 시작합니다","content":"\n안녕하세요!\n\n2021년 한국 마이크로소프트에서 새롭게 기술 블로그를 선보입니다. 마이크로소프트의 클라우드 서비스 삼대 축을 이루는 [Microsoft Azure][ms azure], [Microsoft 365][ms 365] 그리고 [Microsoft Power Platform][ms pwpf]을 중심으로 현업 개발자들이 필요로 하는 기술적인 내용들을 다룰 예정입니다.\n\n많은 성원 부탁드립니다!\n\n![Developer Advocate Bit][image-01]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/01/2021-01-01-tech-blog-opening-01.png\n\n[ms azure]: https://azure.microsoft.com/ko-kr/\n[ms 365]: https://www.microsoft.com/ko-kr/microsoft-365\n[ms pwpf]: https://powerplatform.microsoft.com/ko-kr/\n"},"8fc7e832-a65d-43ce-a49a-24f14b09fa47":{"id":"8fc7e832-a65d-43ce-a49a-24f14b09fa47","index":"Blog","path":"/posts/2021/01/06/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli/","node":{"title":"애저 CLI를 이용해 애저 이벤트그리드 구독 및 로직앱 이벤트 핸들러 프로비저닝하기","category":"Azure","description":"애저 이벤트그리드 커스텀 토픽에 대한 애저 이벤트그리드 구독 리소스는 ARM 템플릿을 통해 프로비저닝 할 수 없습니다. 이 포스트는 애저 CLI를 이용해서 이 애저 이벤트그리드 구독과 로직앱 이벤트 핸들러를 별다른 외부 입력값 없이 자동으로 프로비저닝하는 방법에 대해 알아봅니다.","content":"\n[애저 이벤트그리드][az evtgrd]라는 서비스를 이용하면 다양한 형태의 이벤트 기반 아키텍처를 구성할 수 있습니다. 특히 다양한 형태로 기존에 존재하는 애플리케이션간 이벤트 메시지를 전송하는데 있어서 꽤 유용하게 쓰이지요.\n\n![애저 이벤트그리드][image-01]\n\n\n## 이벤트 기반 아키텍처의 세 요소 ##\n\n이벤트 기반 아키텍처를 구성할 때 중요한 역할을 하는 세 가지 요소는 아래와 같습니다.\n\n\n### 이벤트 생성자/퍼블리셔 ###\n\n이벤트 생성자/퍼블리셔는 이벤트가 발생하는 근원입니다. 이벤트만 발생시킬 수 있다면 무엇이든 이벤트 생성자가 될 수 있죠. 아래 그림은 지난 2018년 [오픈 인프라 데이즈][oid]에서 발표했던 [클라우드이벤트 CloudEvents][oid ce] 발표 내용의 일부를 캡쳐한 것인데요, 아래 그림에서는 라즈베리파이 장치에서 이벤트를 생성하는 것에 대해 묘사합니다.\n\n![이벤트 생성자 Event Publisher][image-02]\n\n\n### 이벤트 구독자/섭스크라이버/처리자/핸들러 ###\n\n이벤트 구독자와 처리자는 엄밀히 말하면 다른 것이긴 하지만, 보통은 구독하면서 동시에 해당 이벤트를 처리하기 때문에 같은 것드로 봐도 큰 무리는 없습니다. 아래 그림에서는 이벤트 생성자가 보낸 이벤트를 받아 시각화 처리를 하는 형태를 보여줍니다.\n\n![이벤트 구독자 Event Subscriber][image-03]\n\n\n### 이벤트 중개자/브로커 ###\n\n일반적으로 이 이벤트 생성자와 구독자 사이에서는 직접적인 연결을 하지 않고 비동기식으로 진행하는데, 이 때 필요한 것이 바로 [애저 이벤트그리드][az evtgrd]와 같은 이벤트 중개자입니다. 아래 그림은 바로 [애저 이벤트그리드][az evtgrd]가 이벤트 생성자와 구독자 사이에서 어떤 역할을 하는지 보여줍니다.\n\n![이벤트 중개자 Event Broker][image-04]\n\n> [클라우드이벤트][ce]에 대해 좀 더 알고 싶다면, [발표 영상][oid yt]과 [발표 자료][oid ss]를 확인해 보세요!\n\n\n## 애저 이벤트그리드 구독자 생성하기 ##\n\n일반적인 CI/CD 환경에서 애저 이벤트그리드 토픽을 생성할 때에는 [ARM 템플릿][az evtgrd arm topic]을 이용하면 쉽습니다. 하지만, 이벤트그리드 구독을 생성하는 [ARM 템플릿][az evtgrd arm sub]은 내가 생성한 이벤트그리드 토픽을 지정할 수 없기 때문에 여기서는 안타깝지만 사용할 수 없습니다. 대신, [애저 CLI][az cli]를 사용해서 내가 지정한 토픽에 대해 구독을 생성하면 됩니다.\n\n---\n\n***추가:***\n\n정확하게는 이벤트그리드 구독 리소스를 생성하면서 토픽을 지정할 수 있는 방법이 사실 두 가지가 있습니다.\n\n### 스코프 지정하기 (권장하는 방법) ###\n\n위에 언급한 이벤트그리드 구독용 [ARM 템플릿][az evtgrd arm sub]을 사용하기 위해서는 `scope` 속성값을 지정해 주면 됩니다 (line #7). ARM 템플릿을 [bicep][az bicep]으로 구현한 샘플 코드는 대략 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=06-az-eventgrid-event-subscription-create-1.bicep&highlights=7\n\n\n### 하위 리소스 타입 지정하기 (권장하지는 않지만 허용되는 방법) ###\n\n또는 아래와 같이 하위 리소스 타입으로 구현을 할 수도 있습니다. 이 떄는 `scope` 속성값이 필요하진 않지만, 리소스 타입과 이름을 좀 더 길게 정해줘야 하는 번거로움이 있습니다 (line #6-7).\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=07-az-eventgrid-event-subscription-create-2.bicep&highlights=6-7\n\n따라서, 위와 같은 방식으로 애저 이벤트그리드 구독 리소스를 프로비저닝해도 됩니다. 다만, 이 포스트는 애저 CLI에 초점을 맞추도록 하겠습니다.\n\n---\n\n\n## 애저 CLI 사전 준비사항 ##\n\n[애저 CLI][az cli]로 이벤트그리드 구독 리소스를 프로비저닝하기 위해서는 아래 [확장기능][az cli extensions]을 먼저 설치해야 합니다. 여기서 [Logic][az cli extensions logic]은 [애저 로직앱][az logapp]을 위한 것인데, 이 포스트에서는 이벤트 처리자로서 로직앱을 사용하기 때문입니다.\n\n* [EventGrid][az cli extensions eventgrid]\n* [Logic][az cli extensions logic]\n\n> 이 두 확장기능은 이 글을 쓰는 현재 프리뷰 기능이며 언제든 구현이 바뀔 수 있다는 점 잊지 마세요!\n\n\n## 애저 CLI 명령어 ##\n\n먼저 [애저 로직앱][az logapp]을 이벤트 처리자로 사용하기 위해서는 로직앱의 엔드포인트 URL을 알아내야 합니다. 로직앱은 특성상 엔드포인트 뒤에 항상 SAS 토큰이 붙어오기 때문에 이를 함께 알아내야 합니다. 먼저 엔드포인트를 찾고자 하는 로직앱의 리소스 ID를 아래와 같이 `az logic workflow show` 명령어를 통해 알아냅니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=01-az-logic-workflow-show.sh\n\n그 다음에는 `az rest` 명령어를 통해 SAS 토큰이 붙어 있는 엔드포인트 값을 알아냅니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=02-az-rest.sh\n\n이제 로직앱을 이벤트 처리자로 사용하기 위한 준비는 끝났습니다. 다음 순서는 이벤트그리드 토픽의 리소스 ID를 아래와 같이 `az eventgrid topic show` 명령어를 통해 알아냅니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=03-az-eventgrid-topic-show.sh\n\n이벤트그리드 구독자를 생성하기 위한 모든 준비가 끝났습니다. 아래 `az eventgrid event-subscription create` 명령어를 통해 이벤트그리드 구독자를 생성합니다. 여기서는 [CNCF][cncf]의 인큐베이팅 프로젝트인 [CloudEvents 스키마][ce]를 사용하는 것으로 합니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=04-az-eventgrid-event-subscription-create.sh\n\n위와 같은 방법으로 하면 곧바로 애저 이벤트그리드 구독자 리소스를 프로비저닝할 수 있습니다. 위 명령어를 한줄로 합치면 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=05-one-liner.sh\n\n---\n\n지금까지 이벤트그리드 구독자를 프로비저닝하고 로직앱을 그 처리자로 설정하기 위해 애저 CLI를 이용하는 방법에 대해 알아 보았습니다. 이를 조금 더 활용하면 [깃헙 액션][gh actions]과 같은 CI/CD 파이프라인에서도 손쉽게 통합시킬 수 있을 것입니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://docs.microsoft.com/ko-kr/azure/event-grid/media/overview/functional-model.png?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli-04.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[az cli]: https://docs.microsoft.com/ko-kr/cli/azure/what-is-azure-cli?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[az cli extensions]: https://docs.microsoft.com/ko-kr/cli/azure/azure-cli-extensions-list?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[az cli extensions eventgrid]: https://github.com/Azure/azure-cli-extensions/tree/master/src/eventgrid\n[az cli extensions logic]: https://github.com/Azure/azure-cli-extensions/tree/master/src/logic\n\n[az bicep]: https://github.com/Azure/bicep\n\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n\n[az evtgrd]: https://docs.microsoft.com/ko-kr/azure/event-grid/overview?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[az evtgrd arm topic]: https://docs.microsoft.com/ko-kr/azure/templates/microsoft.eventgrid/topics?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[az evtgrd arm sub]: https://docs.microsoft.com/ko-kr/azure/templates/microsoft.eventgrid/eventsubscriptions?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n\n[oid]: https://event.openinfradays.kr/2018/about/\n[oid ce]: https://event.openinfradays.kr/2018/session1/track_4_0\n[oid yt]: https://youtu.be/h2_ZNTXwlVc\n[oid ss]: https://www.slideshare.net/openstack_kr/openinfra-days-korea-2018-track-4-cloudevents\n\n[cncf]: https://www.cncf.io/\n[ce]: https://cloudevents.io/\n\n[gh actions]: https://docs.github.com/en/free-pro-team@latest/actions\n"},"title":"애저 CLI를 이용해 애저 이벤트그리드 구독 및 로직앱 이벤트 핸들러 프로비저닝하기","content":"\n[애저 이벤트그리드][az evtgrd]라는 서비스를 이용하면 다양한 형태의 이벤트 기반 아키텍처를 구성할 수 있습니다. 특히 다양한 형태로 기존에 존재하는 애플리케이션간 이벤트 메시지를 전송하는데 있어서 꽤 유용하게 쓰이지요.\n\n![애저 이벤트그리드][image-01]\n\n\n## 이벤트 기반 아키텍처의 세 요소 ##\n\n이벤트 기반 아키텍처를 구성할 때 중요한 역할을 하는 세 가지 요소는 아래와 같습니다.\n\n\n### 이벤트 생성자/퍼블리셔 ###\n\n이벤트 생성자/퍼블리셔는 이벤트가 발생하는 근원입니다. 이벤트만 발생시킬 수 있다면 무엇이든 이벤트 생성자가 될 수 있죠. 아래 그림은 지난 2018년 [오픈 인프라 데이즈][oid]에서 발표했던 [클라우드이벤트 CloudEvents][oid ce] 발표 내용의 일부를 캡쳐한 것인데요, 아래 그림에서는 라즈베리파이 장치에서 이벤트를 생성하는 것에 대해 묘사합니다.\n\n![이벤트 생성자 Event Publisher][image-02]\n\n\n### 이벤트 구독자/섭스크라이버/처리자/핸들러 ###\n\n이벤트 구독자와 처리자는 엄밀히 말하면 다른 것이긴 하지만, 보통은 구독하면서 동시에 해당 이벤트를 처리하기 때문에 같은 것드로 봐도 큰 무리는 없습니다. 아래 그림에서는 이벤트 생성자가 보낸 이벤트를 받아 시각화 처리를 하는 형태를 보여줍니다.\n\n![이벤트 구독자 Event Subscriber][image-03]\n\n\n### 이벤트 중개자/브로커 ###\n\n일반적으로 이 이벤트 생성자와 구독자 사이에서는 직접적인 연결을 하지 않고 비동기식으로 진행하는데, 이 때 필요한 것이 바로 [애저 이벤트그리드][az evtgrd]와 같은 이벤트 중개자입니다. 아래 그림은 바로 [애저 이벤트그리드][az evtgrd]가 이벤트 생성자와 구독자 사이에서 어떤 역할을 하는지 보여줍니다.\n\n![이벤트 중개자 Event Broker][image-04]\n\n> [클라우드이벤트][ce]에 대해 좀 더 알고 싶다면, [발표 영상][oid yt]과 [발표 자료][oid ss]를 확인해 보세요!\n\n\n## 애저 이벤트그리드 구독자 생성하기 ##\n\n일반적인 CI/CD 환경에서 애저 이벤트그리드 토픽을 생성할 때에는 [ARM 템플릿][az evtgrd arm topic]을 이용하면 쉽습니다. 하지만, 이벤트그리드 구독을 생성하는 [ARM 템플릿][az evtgrd arm sub]은 내가 생성한 이벤트그리드 토픽을 지정할 수 없기 때문에 여기서는 안타깝지만 사용할 수 없습니다. 대신, [애저 CLI][az cli]를 사용해서 내가 지정한 토픽에 대해 구독을 생성하면 됩니다.\n\n---\n\n***추가:***\n\n정확하게는 이벤트그리드 구독 리소스를 생성하면서 토픽을 지정할 수 있는 방법이 사실 두 가지가 있습니다.\n\n### 스코프 지정하기 (권장하는 방법) ###\n\n위에 언급한 이벤트그리드 구독용 [ARM 템플릿][az evtgrd arm sub]을 사용하기 위해서는 `scope` 속성값을 지정해 주면 됩니다 (line #7). ARM 템플릿을 [bicep][az bicep]으로 구현한 샘플 코드는 대략 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=06-az-eventgrid-event-subscription-create-1.bicep&highlights=7\n\n\n### 하위 리소스 타입 지정하기 (권장하지는 않지만 허용되는 방법) ###\n\n또는 아래와 같이 하위 리소스 타입으로 구현을 할 수도 있습니다. 이 떄는 `scope` 속성값이 필요하진 않지만, 리소스 타입과 이름을 좀 더 길게 정해줘야 하는 번거로움이 있습니다 (line #6-7).\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=07-az-eventgrid-event-subscription-create-2.bicep&highlights=6-7\n\n따라서, 위와 같은 방식으로 애저 이벤트그리드 구독 리소스를 프로비저닝해도 됩니다. 다만, 이 포스트는 애저 CLI에 초점을 맞추도록 하겠습니다.\n\n---\n\n\n## 애저 CLI 사전 준비사항 ##\n\n[애저 CLI][az cli]로 이벤트그리드 구독 리소스를 프로비저닝하기 위해서는 아래 [확장기능][az cli extensions]을 먼저 설치해야 합니다. 여기서 [Logic][az cli extensions logic]은 [애저 로직앱][az logapp]을 위한 것인데, 이 포스트에서는 이벤트 처리자로서 로직앱을 사용하기 때문입니다.\n\n* [EventGrid][az cli extensions eventgrid]\n* [Logic][az cli extensions logic]\n\n> 이 두 확장기능은 이 글을 쓰는 현재 프리뷰 기능이며 언제든 구현이 바뀔 수 있다는 점 잊지 마세요!\n\n\n## 애저 CLI 명령어 ##\n\n먼저 [애저 로직앱][az logapp]을 이벤트 처리자로 사용하기 위해서는 로직앱의 엔드포인트 URL을 알아내야 합니다. 로직앱은 특성상 엔드포인트 뒤에 항상 SAS 토큰이 붙어오기 때문에 이를 함께 알아내야 합니다. 먼저 엔드포인트를 찾고자 하는 로직앱의 리소스 ID를 아래와 같이 `az logic workflow show` 명령어를 통해 알아냅니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=01-az-logic-workflow-show.sh\n\n그 다음에는 `az rest` 명령어를 통해 SAS 토큰이 붙어 있는 엔드포인트 값을 알아냅니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=02-az-rest.sh\n\n이제 로직앱을 이벤트 처리자로 사용하기 위한 준비는 끝났습니다. 다음 순서는 이벤트그리드 토픽의 리소스 ID를 아래와 같이 `az eventgrid topic show` 명령어를 통해 알아냅니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=03-az-eventgrid-topic-show.sh\n\n이벤트그리드 구독자를 생성하기 위한 모든 준비가 끝났습니다. 아래 `az eventgrid event-subscription create` 명령어를 통해 이벤트그리드 구독자를 생성합니다. 여기서는 [CNCF][cncf]의 인큐베이팅 프로젝트인 [CloudEvents 스키마][ce]를 사용하는 것으로 합니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=04-az-eventgrid-event-subscription-create.sh\n\n위와 같은 방법으로 하면 곧바로 애저 이벤트그리드 구독자 리소스를 프로비저닝할 수 있습니다. 위 명령어를 한줄로 합치면 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=05-one-liner.sh\n\n---\n\n지금까지 이벤트그리드 구독자를 프로비저닝하고 로직앱을 그 처리자로 설정하기 위해 애저 CLI를 이용하는 방법에 대해 알아 보았습니다. 이를 조금 더 활용하면 [깃헙 액션][gh actions]과 같은 CI/CD 파이프라인에서도 손쉽게 통합시킬 수 있을 것입니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://docs.microsoft.com/ko-kr/azure/event-grid/media/overview/functional-model.png?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli-04.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[az cli]: https://docs.microsoft.com/ko-kr/cli/azure/what-is-azure-cli?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[az cli extensions]: https://docs.microsoft.com/ko-kr/cli/azure/azure-cli-extensions-list?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[az cli extensions eventgrid]: https://github.com/Azure/azure-cli-extensions/tree/master/src/eventgrid\n[az cli extensions logic]: https://github.com/Azure/azure-cli-extensions/tree/master/src/logic\n\n[az bicep]: https://github.com/Azure/bicep\n\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n\n[az evtgrd]: https://docs.microsoft.com/ko-kr/azure/event-grid/overview?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[az evtgrd arm topic]: https://docs.microsoft.com/ko-kr/azure/templates/microsoft.eventgrid/topics?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n[az evtgrd arm sub]: https://docs.microsoft.com/ko-kr/azure/templates/microsoft.eventgrid/eventsubscriptions?WT.mc_id=devops-12244-juyoo&ocid=AID3027813\n\n[oid]: https://event.openinfradays.kr/2018/about/\n[oid ce]: https://event.openinfradays.kr/2018/session1/track_4_0\n[oid yt]: https://youtu.be/h2_ZNTXwlVc\n[oid ss]: https://www.slideshare.net/openstack_kr/openinfra-days-korea-2018-track-4-cloudevents\n\n[cncf]: https://www.cncf.io/\n[ce]: https://cloudevents.io/\n\n[gh actions]: https://docs.github.com/en/free-pro-team@latest/actions\n"},"569d2d86-c23e-4bcb-b38c-6483cdf25d71":{"id":"569d2d86-c23e-4bcb-b38c-6483cdf25d71","index":"Blog","path":"/posts/2021/01/12/6-ways-refactoring-azure-devops-pipelines/","node":{"title":"애저 DevOps 파이프라인을 리팩토링하는 6가지 방법","category":"Azure","description":"애저 DevOps 파이프라인 YAML 파일을 사용하다 보면 반복적인 작업이 많이 나옵니다. 이 반복적인 작업 부분을 템플릿 형태로 리팩토링할 수 있는 포인트가 최소 여섯 군데 정도인데, 이러한 리팩토링 테크닉에 대해 다뤄봅니다.","content":"\n\n[애저 DevOps][az devops]에서 [CI/CD 파이프라인][az devops pipelines]을 구성하다보면 보통 반복적인 작업들이 많습니다. 이게 [태스크 Tasks][az devops pipelines tasks] 수준일 수도 있고, [작업 Jobs][az devops pipelines jobs] 수준일 수도 있고, [스테이지 Stages][az devops pipelines stages] 수준일 수도 있는데, 코딩을 할 때는 반복적인 부분을 리팩토링 한다지만, 파이프라인에서 반복적인 부분을 리팩토링할 수는 없을까요? 물론 있습니다. 그것도 파이프라인을 리팩토링할 수 있는 포인트가 최소 여섯 군데 정도 있습니다. 이 포스트에서는 애저 파이프라인의 [YAML][az devops pipelines yaml] 형식 [템플릿][az devops pipelines templates]을 이용해서 반복적으로 나타나는 부분을 리팩토링하는 방법에 대해 알아보겠습니다.\n\n> 이 포스트에 쓰인 예제 파이프라인 코드를 [이 리포지토리](https://github.com/devkimchi/Azure-Pipelines-Template-Sample)에서 확인해 보세요!\n\n\n## 빌드 파이프라인 ##\n\n우선 일반적인 빌드 파이프라인을 한 번 만들어 보겠습니다. 아래는 그냥 빌드 `Stage`를 작성한 것입니다. `Stages/Stage` 아래 `Jobs/Job` 아래 `Steps/Task`가 들어가 있습니다. `Greeting` 이라는 변수값을 출력시키는 파이프라인입니다 (line #18, 25)\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-without-template.yaml&highlights=18,25\n\n이 파이프라인을 실행시키면 아래와 같은 결과가 나옵니다. `Hello World`가 보이죠?\n\n![리팩토링 전 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-01.png)\n\n이제 이 빌드 파이프라인을 리팩토링할 차례입니다. 리팩토링은 크게 세 곳에서 가능한데요, 하나는 `Steps` 수준, 다른 하나는 `Jobs` 수준, 그리고 마지막 하나는 `Stages` 수준입니다.\n\n\n## 빌드 파이프라인을 `Steps` 수준에서 리팩토링하기 ##\n\n예를 들어 node.js 기반의 애플리케이션을 하나 만든다고 가정해 보죠. 이 경우 보통 순서가\n\n1. node.js 런타임 설치하기\n2. npm 패키지 복원하기\n3. 애플리케이션 빌드하기\n4. 애플리케이션 테스트하기\n5. 아티팩트 생성하기\n\n정도가 될 것입니다. 이 때 마지막 5번 항목을 제외하고는 거의 대부분의 경우 같은 순서로, 그리고 저 1-4번 작업을 한 세트로 해서 진행을 하게 되죠. 그렇다면 이 1-4번 작업 흐름을 그냥 하나로 묶어서 템플릿 형태로 빼 놓을 수도 있지 않을까요? 이럴 때 바로 `Steps` 수준의 리팩토링을 진행하게 됩니다. 만약 다른 작업에서는 이후 추가 작업을 더 필요로 한다고 하면 템플릿을 돌리고 난 후 추가 태스크를 정의하면 되므로 별 문제는 없습니다.\n\n이제 위에 정의한 빌드 파이프라인의 `Steps` 부분을 별도의 템플릿으로 분리합니다. 그렇다면 원래 파이프라인과 템플릿은 아래와 같이 바뀔 것입니다. 원래 파이프라인(`pipeline.yaml`)의 `steps` 항목 아래에 `template` 라는 항목이 생기고 (line #21), `parameters`를 통해 템플릿으로 값을 전달하는 것이 보일 것입니다 (line #22-23).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-steps-template.yaml&highlights=21-23\n\n그리고 `Steps` 수준 리팩토링 결과 템플릿인 `template-steps-build.yaml`을 보면, 아래와 같이 `parameters`와 `steps`를 정의했습니다 (line #2, 5). 이 `parameters` 항목을 통해 부모 파이프라인과 템플릿 사이 값을 교환할 수 있게 해 줍니다.\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-steps-build.yaml&highlights=2,5\n\n이렇게 리팩토링을 한 후 파이프라인을 돌려보면 아래와 같은 결과 화면을 보게 됩니다. 부모 파이프라인에서 템플릿으로 넘겨준 파라미터 값이 잘 표현되는 것이 보이죠?\n\n![Steps 수준 리팩토링 후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-02.png)\n\n\n## 빌드 파이프라인을 `Jobs` 수준에서 리팩토링하기 ##\n\n이번에는 `Jobs` 수준에서 리팩토링을 한 번 해보겠습니다. 앞서 연습해 봤던 `Steps` 수준 리팩토링은 공통의 태스크들을 묶어주는 정도였다면, `Jobs` 수준의 리팩토링은 그보다 큰 덩어리를 다룹니다. 이 덩어리에는 [빌드 에이전트][az devops pipelines agents]의 종류까지 결정할 수 있고, 템플릿 안의 모든 태스크를 동일하게 가져갈 수 있습니다.\n\n> 물론 [조건 표현식][az devops pipelines conditions]과 같은 고급 기능을 사용하면 좀 더 다양한 시나리오에서 다양한 태스크들을 활용할 수 있습니다.\n\n아래와 같이 부모 파이프라인을 수정해 보죠 (line #13-16).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-jobs-template.yaml&highlights=13-16\n\n그리고 난 후, 아래와 같이 `template-jobs-build.yaml` 파일을 작성합니다. 파라미터로 `vmImage`와 `message`를 넘겨 템플릿에서 어떻게 사용하는지 살펴보죠 (line #2-4).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-build.yaml&highlights=2-4\n\n`Jobs` 수준에서 사용하는 빌드 에이전트의 종류까지도 변수화시켜 사용할 수 있는 것이 보이나요? 부모 템플릿에서 에이전트를 `Windows Server 2016` 버전으로 설정했으므로 실제 이를 파이프라인으로 돌려보면 아래와 같은 결과가 나타납니다.\n\n![Jobs 수준 리팩토링후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-03.png)\n\n\n## 빌드 파이프라인을 `Stages` 수준에서 리팩토링하기 ##\n\n이번에는 `Stages` 수준에서 파이프라인 리팩토링을 시도해 보겠습니다. 하나의 스테이지에는 여러개의 `Job`을 동시에 돌리거나 순차적으로 돌릴 수 있습니다. `Job` 수준에서 돌아가는 공통의 작업들이 있다면 이를 `Job` 수준에서 묶어 리팩토링 할 수 있겠지만, 아예 공통의 `Job`들 까지 묶어서 하나의 `Stage`를 만들고 이를 별도의 템플릿으로 빼낼 수 있는데, 이것이 이 연습의 핵심입니다. 아래 부모 파이프라인 코드를 보세요. `stages` 아래에 곧바로 템플릿을 지정하고 변수를 보냅니다 (line #9-12).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-stages-template.yaml&highlights=9-12\n\n위에서 언급한 `template-stage-build.yaml` 파일은 아래와 같이 작성할 수 있습니다. 부모에서 받아온 파라미터를 통해 빌드 에이전트에 쓰일 OS와 다른 값들을 설정할 수 있는게 보이죠 (line #2-4)?\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-stages-build.yaml&highlights=2-4\n\n이렇게 해서 파이프라인을 실행해 본 결과는 대략 아래와 같습니다. 변수를 통해 전달한 값에 따라 빌드 에이전트가 `Ubuntu 16.04` 버전으로 설정이 되었고, 글로벌 변수 값을 별도로 재정의하지 않았으므로 아래 그림과 같이 `G'day, mate`라는 글로벌 변수 값을 볼 수 있습니다.\n\n![Stages 수준 리팩토링 후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-04.png)\n\n\n## 빌드 파이프라인을 다단계 템플릿으로 리팩토링하기 ##\n\n이렇게 `Steps` 수준, `Jobs` 수준, `Stages` 수준에서 모두 리팩토링을 해 봤습니다. 그렇다면 리팩토링의 결과물인 템플릿을 다단계로 걸쳐서 사용할 수는 없을까요? 물론 당연히 되죠. 아래와 같이 부모 파이프라인을 수정해 보겠습니다. 이번에는 맥OS를 에이전트로 선택해 볼까요 (line #9-12)?\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-nested-stages-template.yaml&highlights=9-12\n\n`Stage` 수준에서 다단계 템플릿을 만들어서 붙여봤습니다. 이 템플릿 안에서 또다시 `Jobs` 수준의 다단계 템플릿을 호출합니다 (line #11-14).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-stages-nested-build.yaml&highlights=11-14\n\n`Jobs` 수준의 다단계 템플릿은 대략 아래와 같습니다. 그리고, 이 안에서 또다시 앞서 만들어 둔 `Steps` 수준의 템플릿을 호출합니다 (line #17-19).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-nested-build.yaml&highlights=17-19\n\n이렇게 다단계로 템플릿을 만들어 붙여놓은 후 파이프라인을 돌려보면 아래와 같습니다.\n\n![다단계 리팩토링 후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-05.png)\n\n아주 문제 없이 다단계 템플릿이 잘 돌아가는게 보이죠?\n\n지금까지 빌드 파이프라인을 리팩토링해 봤습니다. 이제 릴리즈 파이프라인으로 들어가 보겠습니다.\n\n\n## 릴리즈 파이프라인 ##\n\n릴리즈 파이프라인은 빌드 파이프라인과 크게 다르지 않습니다. 다만 `job` 대신 [`deployment job`][az devpos pipelines deploymentjobs]을 사용한다는 차이가 있을 뿐입니다. 이 둘의 차이에 대해 얘기하는 것은 이 포스트의 범위를 벗어나니 여기까지만 하기로 하고, 실제 릴리즈 파이프라인의 구성을 보겠습니다. 템플릿 리팩토링 없는 전형적인 릴리즈 스테이지는 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-without-template.yaml&highlights=9\n\n위 코드를 보면 `Jobs` 수준에 `deployment`를 사용해서 작업 단위를 정의한 것을 볼 수 있죠 (line #9)? 이를 실행시킨 결과는 대략 아래와 같습니다.\n\n![리팩토링 전 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-06.png)\n\n이제 이 릴리즈 파이프라인을 동일하게 세 곳, `Steps`, `Jobs`, `Stages` 수준에서 리팩토링을 할 수 있습니다. 각각의 리팩토링 방식은 크게 다르지 않으므로 아래 리팩토링 결과만을 적어놓도록 하겠습니다.\n\n\n## 릴리즈 파이프라인을 `Steps` 수준에서 리팩토링하기 ##\n\n우선 `Steps` 수준에서 릴리즈 템플릿을 만들어 보도록 하죠. 부모 템플릿은 아래와 같습니다 (line #24-26).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-steps-template.yaml&highlights=24-26\n\n그리고 템플릿으로 빼낸 `Steps`는 아래와 같습니다. 앞서 빌드 파이프라인에서 사용한 템플릿과 구조가 다르지 않죠 (line #2-3)?\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-steps-release.yaml&highlights=2-3\n\n그리고 그 결과를 보면 아래와 같습니다.\n\n![Steps 수준 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-07.png)\n\n\n## 릴리즈 파이프라인을 `Jobs` 수준에서 리팩토링하기 ##\n\n이번에는 릴리즈 파이프라인을 `Jobs` 수준에서 리팩토링해 보겠습니다 (line #13-17).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-jobs-template.yaml&highlights=13-17\n\n그리고 리팩토링한 템플릿은 아래와 같습니다. 여기서 눈여겨 봐야 할 부분은 바로 [`environment`][az devops pipelines environments] 이름도 파라미터로 처리가 가능하다는 점입니다 (line #14). 즉, 거의 대부분의 설정을 부모 파이프라인에서 파라미터로 내려주면 템플릿에서 받아 처리가 가능합니다 (line #2-5).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-release.yaml&highlights=2-5,14\n\n![Jobs 수준 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-08.png)\n\n\n## 릴리즈 파이프라인을 `Stages` 수준에서 리팩토링하기 ##\n\n더 이상의 자세한 설명은 생략합니다 (line #5-9). 😉\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-stages-template.yaml&highlights=5-9\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=tmplate-stages-release.yaml&highlights=2-5\n\n![Stages 수준 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-09.png)\n\n\n## 릴리즈 파이프라인을 다단계 템플릿으로 리팩토링하기 ##\n\n릴리즈 파이프라인 역시 다단계 템플릿으로 구성이 가능합니다.\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-nested-stages-template.yaml&highlights=5-9\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-stages-nested-release.yaml&highlights=2-5,12-16\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-nested-release.yaml&highlights=20-22\n\n![다단계 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-10.png)\n\n---\n\n이렇게 빌드 및 릴리즈 파이프라인을 모든 [`Stages`][az devops pipelines stages], [`Jobs`][az devops pipelines jobs], [`Steps`][az devops pipelines tasks] 수준에서 [템플릿][az devops pipelines templates]을 이용해 리팩토링을 해 보았습니다. 파이프라인 작업을 하다 보면 분명히 리팩토링이 필요한 순간이 생깁니다. 그리고 어느 수준에서 템플릿을 만들어 써야 할 지는 전적으로 상황마다 다르다고 할 수 있습니다.\n\n다만 한 가지 고려해야 할 것은, 템플릿은 가급적이면 단순한 작업을 할 수 있게끔 만드는 것이 좋습니다. 템플릿 표현식을 보면 조건문도 있고 반복문도 있고 굉장히 고급 기능을 사용할 수 있긴 하지만, 우선은 단순하게 시작해서 템플릿을 다듬어 나가는 것이 좋을 것입니다. 아무쪼록 [애저 데브옵스 파이프라인][az devops pipelines]의 [다중 스테이지 파이프라인 기법][az devops pipelines multi-stage]을 통해 다양한 템플릿 활용 테크닉을 도입해 보고 그 강력함을 느낄 수 있기를 바랍니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 DevOps에 관심이 있으신가요? ➡️ [무료 애저 DevOps 사용하기][az devops free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops free]: https://azure.microsoft.com/ko-kr/services/devops/?WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[az devops]: https://docs.microsoft.com/ko-kr/azure/devops/user-guide/what-is-azure-devops?view=azure-devops&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines tasks]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/tasks?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines jobs]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devpos pipelines deploymentjobs]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/deployment-jobs?view=azure-devops&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines stages]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/stages?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines yaml]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines templates]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/templates?view=azure-devops&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines conditions]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/conditions?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines agents]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/agents/agents?view=azure-devops&tabs=browser&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines multi-stage]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/get-started/multi-stage-pipelines-experience?view=azure-devops&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines environments]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/environments?view=azure-devops&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n"},"title":"애저 DevOps 파이프라인을 리팩토링하는 6가지 방법","content":"\n\n[애저 DevOps][az devops]에서 [CI/CD 파이프라인][az devops pipelines]을 구성하다보면 보통 반복적인 작업들이 많습니다. 이게 [태스크 Tasks][az devops pipelines tasks] 수준일 수도 있고, [작업 Jobs][az devops pipelines jobs] 수준일 수도 있고, [스테이지 Stages][az devops pipelines stages] 수준일 수도 있는데, 코딩을 할 때는 반복적인 부분을 리팩토링 한다지만, 파이프라인에서 반복적인 부분을 리팩토링할 수는 없을까요? 물론 있습니다. 그것도 파이프라인을 리팩토링할 수 있는 포인트가 최소 여섯 군데 정도 있습니다. 이 포스트에서는 애저 파이프라인의 [YAML][az devops pipelines yaml] 형식 [템플릿][az devops pipelines templates]을 이용해서 반복적으로 나타나는 부분을 리팩토링하는 방법에 대해 알아보겠습니다.\n\n> 이 포스트에 쓰인 예제 파이프라인 코드를 [이 리포지토리](https://github.com/devkimchi/Azure-Pipelines-Template-Sample)에서 확인해 보세요!\n\n\n## 빌드 파이프라인 ##\n\n우선 일반적인 빌드 파이프라인을 한 번 만들어 보겠습니다. 아래는 그냥 빌드 `Stage`를 작성한 것입니다. `Stages/Stage` 아래 `Jobs/Job` 아래 `Steps/Task`가 들어가 있습니다. `Greeting` 이라는 변수값을 출력시키는 파이프라인입니다 (line #18, 25)\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-without-template.yaml&highlights=18,25\n\n이 파이프라인을 실행시키면 아래와 같은 결과가 나옵니다. `Hello World`가 보이죠?\n\n![리팩토링 전 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-01.png)\n\n이제 이 빌드 파이프라인을 리팩토링할 차례입니다. 리팩토링은 크게 세 곳에서 가능한데요, 하나는 `Steps` 수준, 다른 하나는 `Jobs` 수준, 그리고 마지막 하나는 `Stages` 수준입니다.\n\n\n## 빌드 파이프라인을 `Steps` 수준에서 리팩토링하기 ##\n\n예를 들어 node.js 기반의 애플리케이션을 하나 만든다고 가정해 보죠. 이 경우 보통 순서가\n\n1. node.js 런타임 설치하기\n2. npm 패키지 복원하기\n3. 애플리케이션 빌드하기\n4. 애플리케이션 테스트하기\n5. 아티팩트 생성하기\n\n정도가 될 것입니다. 이 때 마지막 5번 항목을 제외하고는 거의 대부분의 경우 같은 순서로, 그리고 저 1-4번 작업을 한 세트로 해서 진행을 하게 되죠. 그렇다면 이 1-4번 작업 흐름을 그냥 하나로 묶어서 템플릿 형태로 빼 놓을 수도 있지 않을까요? 이럴 때 바로 `Steps` 수준의 리팩토링을 진행하게 됩니다. 만약 다른 작업에서는 이후 추가 작업을 더 필요로 한다고 하면 템플릿을 돌리고 난 후 추가 태스크를 정의하면 되므로 별 문제는 없습니다.\n\n이제 위에 정의한 빌드 파이프라인의 `Steps` 부분을 별도의 템플릿으로 분리합니다. 그렇다면 원래 파이프라인과 템플릿은 아래와 같이 바뀔 것입니다. 원래 파이프라인(`pipeline.yaml`)의 `steps` 항목 아래에 `template` 라는 항목이 생기고 (line #21), `parameters`를 통해 템플릿으로 값을 전달하는 것이 보일 것입니다 (line #22-23).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-steps-template.yaml&highlights=21-23\n\n그리고 `Steps` 수준 리팩토링 결과 템플릿인 `template-steps-build.yaml`을 보면, 아래와 같이 `parameters`와 `steps`를 정의했습니다 (line #2, 5). 이 `parameters` 항목을 통해 부모 파이프라인과 템플릿 사이 값을 교환할 수 있게 해 줍니다.\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-steps-build.yaml&highlights=2,5\n\n이렇게 리팩토링을 한 후 파이프라인을 돌려보면 아래와 같은 결과 화면을 보게 됩니다. 부모 파이프라인에서 템플릿으로 넘겨준 파라미터 값이 잘 표현되는 것이 보이죠?\n\n![Steps 수준 리팩토링 후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-02.png)\n\n\n## 빌드 파이프라인을 `Jobs` 수준에서 리팩토링하기 ##\n\n이번에는 `Jobs` 수준에서 리팩토링을 한 번 해보겠습니다. 앞서 연습해 봤던 `Steps` 수준 리팩토링은 공통의 태스크들을 묶어주는 정도였다면, `Jobs` 수준의 리팩토링은 그보다 큰 덩어리를 다룹니다. 이 덩어리에는 [빌드 에이전트][az devops pipelines agents]의 종류까지 결정할 수 있고, 템플릿 안의 모든 태스크를 동일하게 가져갈 수 있습니다.\n\n> 물론 [조건 표현식][az devops pipelines conditions]과 같은 고급 기능을 사용하면 좀 더 다양한 시나리오에서 다양한 태스크들을 활용할 수 있습니다.\n\n아래와 같이 부모 파이프라인을 수정해 보죠 (line #13-16).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-jobs-template.yaml&highlights=13-16\n\n그리고 난 후, 아래와 같이 `template-jobs-build.yaml` 파일을 작성합니다. 파라미터로 `vmImage`와 `message`를 넘겨 템플릿에서 어떻게 사용하는지 살펴보죠 (line #2-4).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-build.yaml&highlights=2-4\n\n`Jobs` 수준에서 사용하는 빌드 에이전트의 종류까지도 변수화시켜 사용할 수 있는 것이 보이나요? 부모 템플릿에서 에이전트를 `Windows Server 2016` 버전으로 설정했으므로 실제 이를 파이프라인으로 돌려보면 아래와 같은 결과가 나타납니다.\n\n![Jobs 수준 리팩토링후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-03.png)\n\n\n## 빌드 파이프라인을 `Stages` 수준에서 리팩토링하기 ##\n\n이번에는 `Stages` 수준에서 파이프라인 리팩토링을 시도해 보겠습니다. 하나의 스테이지에는 여러개의 `Job`을 동시에 돌리거나 순차적으로 돌릴 수 있습니다. `Job` 수준에서 돌아가는 공통의 작업들이 있다면 이를 `Job` 수준에서 묶어 리팩토링 할 수 있겠지만, 아예 공통의 `Job`들 까지 묶어서 하나의 `Stage`를 만들고 이를 별도의 템플릿으로 빼낼 수 있는데, 이것이 이 연습의 핵심입니다. 아래 부모 파이프라인 코드를 보세요. `stages` 아래에 곧바로 템플릿을 지정하고 변수를 보냅니다 (line #9-12).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-stages-template.yaml&highlights=9-12\n\n위에서 언급한 `template-stage-build.yaml` 파일은 아래와 같이 작성할 수 있습니다. 부모에서 받아온 파라미터를 통해 빌드 에이전트에 쓰일 OS와 다른 값들을 설정할 수 있는게 보이죠 (line #2-4)?\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-stages-build.yaml&highlights=2-4\n\n이렇게 해서 파이프라인을 실행해 본 결과는 대략 아래와 같습니다. 변수를 통해 전달한 값에 따라 빌드 에이전트가 `Ubuntu 16.04` 버전으로 설정이 되었고, 글로벌 변수 값을 별도로 재정의하지 않았으므로 아래 그림과 같이 `G'day, mate`라는 글로벌 변수 값을 볼 수 있습니다.\n\n![Stages 수준 리팩토링 후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-04.png)\n\n\n## 빌드 파이프라인을 다단계 템플릿으로 리팩토링하기 ##\n\n이렇게 `Steps` 수준, `Jobs` 수준, `Stages` 수준에서 모두 리팩토링을 해 봤습니다. 그렇다면 리팩토링의 결과물인 템플릿을 다단계로 걸쳐서 사용할 수는 없을까요? 물론 당연히 되죠. 아래와 같이 부모 파이프라인을 수정해 보겠습니다. 이번에는 맥OS를 에이전트로 선택해 볼까요 (line #9-12)?\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-nested-stages-template.yaml&highlights=9-12\n\n`Stage` 수준에서 다단계 템플릿을 만들어서 붙여봤습니다. 이 템플릿 안에서 또다시 `Jobs` 수준의 다단계 템플릿을 호출합니다 (line #11-14).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-stages-nested-build.yaml&highlights=11-14\n\n`Jobs` 수준의 다단계 템플릿은 대략 아래와 같습니다. 그리고, 이 안에서 또다시 앞서 만들어 둔 `Steps` 수준의 템플릿을 호출합니다 (line #17-19).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-nested-build.yaml&highlights=17-19\n\n이렇게 다단계로 템플릿을 만들어 붙여놓은 후 파이프라인을 돌려보면 아래와 같습니다.\n\n![다단계 리팩토링 후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-05.png)\n\n아주 문제 없이 다단계 템플릿이 잘 돌아가는게 보이죠?\n\n지금까지 빌드 파이프라인을 리팩토링해 봤습니다. 이제 릴리즈 파이프라인으로 들어가 보겠습니다.\n\n\n## 릴리즈 파이프라인 ##\n\n릴리즈 파이프라인은 빌드 파이프라인과 크게 다르지 않습니다. 다만 `job` 대신 [`deployment job`][az devpos pipelines deploymentjobs]을 사용한다는 차이가 있을 뿐입니다. 이 둘의 차이에 대해 얘기하는 것은 이 포스트의 범위를 벗어나니 여기까지만 하기로 하고, 실제 릴리즈 파이프라인의 구성을 보겠습니다. 템플릿 리팩토링 없는 전형적인 릴리즈 스테이지는 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-without-template.yaml&highlights=9\n\n위 코드를 보면 `Jobs` 수준에 `deployment`를 사용해서 작업 단위를 정의한 것을 볼 수 있죠 (line #9)? 이를 실행시킨 결과는 대략 아래와 같습니다.\n\n![리팩토링 전 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-06.png)\n\n이제 이 릴리즈 파이프라인을 동일하게 세 곳, `Steps`, `Jobs`, `Stages` 수준에서 리팩토링을 할 수 있습니다. 각각의 리팩토링 방식은 크게 다르지 않으므로 아래 리팩토링 결과만을 적어놓도록 하겠습니다.\n\n\n## 릴리즈 파이프라인을 `Steps` 수준에서 리팩토링하기 ##\n\n우선 `Steps` 수준에서 릴리즈 템플릿을 만들어 보도록 하죠. 부모 템플릿은 아래와 같습니다 (line #24-26).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-steps-template.yaml&highlights=24-26\n\n그리고 템플릿으로 빼낸 `Steps`는 아래와 같습니다. 앞서 빌드 파이프라인에서 사용한 템플릿과 구조가 다르지 않죠 (line #2-3)?\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-steps-release.yaml&highlights=2-3\n\n그리고 그 결과를 보면 아래와 같습니다.\n\n![Steps 수준 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-07.png)\n\n\n## 릴리즈 파이프라인을 `Jobs` 수준에서 리팩토링하기 ##\n\n이번에는 릴리즈 파이프라인을 `Jobs` 수준에서 리팩토링해 보겠습니다 (line #13-17).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-jobs-template.yaml&highlights=13-17\n\n그리고 리팩토링한 템플릿은 아래와 같습니다. 여기서 눈여겨 봐야 할 부분은 바로 [`environment`][az devops pipelines environments] 이름도 파라미터로 처리가 가능하다는 점입니다 (line #14). 즉, 거의 대부분의 설정을 부모 파이프라인에서 파라미터로 내려주면 템플릿에서 받아 처리가 가능합니다 (line #2-5).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-release.yaml&highlights=2-5,14\n\n![Jobs 수준 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-08.png)\n\n\n## 릴리즈 파이프라인을 `Stages` 수준에서 리팩토링하기 ##\n\n더 이상의 자세한 설명은 생략합니다 (line #5-9). 😉\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-stages-template.yaml&highlights=5-9\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=tmplate-stages-release.yaml&highlights=2-5\n\n![Stages 수준 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-09.png)\n\n\n## 릴리즈 파이프라인을 다단계 템플릿으로 리팩토링하기 ##\n\n릴리즈 파이프라인 역시 다단계 템플릿으로 구성이 가능합니다.\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-nested-stages-template.yaml&highlights=5-9\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-stages-nested-release.yaml&highlights=2-5,12-16\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-nested-release.yaml&highlights=20-22\n\n![다단계 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-10.png)\n\n---\n\n이렇게 빌드 및 릴리즈 파이프라인을 모든 [`Stages`][az devops pipelines stages], [`Jobs`][az devops pipelines jobs], [`Steps`][az devops pipelines tasks] 수준에서 [템플릿][az devops pipelines templates]을 이용해 리팩토링을 해 보았습니다. 파이프라인 작업을 하다 보면 분명히 리팩토링이 필요한 순간이 생깁니다. 그리고 어느 수준에서 템플릿을 만들어 써야 할 지는 전적으로 상황마다 다르다고 할 수 있습니다.\n\n다만 한 가지 고려해야 할 것은, 템플릿은 가급적이면 단순한 작업을 할 수 있게끔 만드는 것이 좋습니다. 템플릿 표현식을 보면 조건문도 있고 반복문도 있고 굉장히 고급 기능을 사용할 수 있긴 하지만, 우선은 단순하게 시작해서 템플릿을 다듬어 나가는 것이 좋을 것입니다. 아무쪼록 [애저 데브옵스 파이프라인][az devops pipelines]의 [다중 스테이지 파이프라인 기법][az devops pipelines multi-stage]을 통해 다양한 템플릿 활용 테크닉을 도입해 보고 그 강력함을 느낄 수 있기를 바랍니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 DevOps에 관심이 있으신가요? ➡️ [무료 애저 DevOps 사용하기][az devops free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops free]: https://azure.microsoft.com/ko-kr/services/devops/?WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[az devops]: https://docs.microsoft.com/ko-kr/azure/devops/user-guide/what-is-azure-devops?view=azure-devops&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines tasks]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/tasks?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines jobs]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devpos pipelines deploymentjobs]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/deployment-jobs?view=azure-devops&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines stages]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/stages?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines yaml]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines templates]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/templates?view=azure-devops&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines conditions]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/conditions?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines agents]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/agents/agents?view=azure-devops&tabs=browser&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines multi-stage]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/get-started/multi-stage-pipelines-experience?view=azure-devops&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n[az devops pipelines environments]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/environments?view=azure-devops&WT.mc_id=devops-12575-juyoo&ocid=AID3027813\n"},"0f190449-82f8-427e-9e86-776d3223c31f":{"id":"0f190449-82f8-427e-9e86-776d3223c31f","index":"Blog","path":"/posts/2021/01/19/cloudevents-for-azure-eventgrid-via-azure-functions/","node":{"title":"애저 펑션과 애저 이벤트그리드간 CloudEvents 형식 이벤트 데이터 주고받기","category":"Azure","description":"이 포스트에서는 애저 펑션의 이벤트그리드 바인딩이 아직 지원하지 않는 CloudEvents 형식의 이벤트 데이터를 다루는 방법에 대해 알아봅니다.","content":"\n[애저 펑션][az fncapp]은 자체적으로 [애저 이벤트그리드][az evtgrd]에 대한 [바인딩 확장 기능][az fncapp binding evtgrd]을 제공하고 있어서 이벤트그리드로 이벤트 데이터를 아주 손쉽게 주고 받을 수 있습니다. 하지만, 현재 바인딩 확장 기능은 아직 정식으로 [CloudEvents][ce] 형식을 지원하지 않는데, 그 이유는 [현재 버전의 SDK][nuget evtgrd legacy]가 아직 CloudEvents 형식을 지원하지 않기 때문입니다. 아마도 [새 버전의 SDK][nuget evtgrd new]가 GA되는 시점이 되면 애저 펑션 확장 기능에서도 이를 지원하지 않을까 예상하는데요, 따라서, 그 때 까지는 CloudEvents 형식을 사용해서 이벤트그리드에 데이터를 주고 받기 위해서 별도의 작업을 해 줘야 합니다. 이 포스트에서는 그 방법에 대해 간단히 정리해 보도록 하겠습니다.\n\n> 이 포스트에서는 [.NET SDK][az sdk evtgrd dotnet]를 대상으로 기술합니다. 다른 언어로도 SDK를 지원하고 있으니, 아래 링크를 클릭해서 새 SDK를 확인해 보세요!\n>\n> * [JavaScript][az sdk evtgrd js]\n> * [Python][az sdk evtgrd python]\n> * [Java][az sdk evtgrd java]\n\n\n## 애저 이벤트그리드 SDK 프리뷰 버전 설치 ##\n\n이 글을 쓰는 현재 새 버전의 애저 이벤트그리드 SDK 버전은 [`4.0.0-beta.4`][nuget evtgrd new]로, 아직 프리뷰 상태입니다. 이 프리뷰 버전의 SDK를 사용하면 CloudEvents 형식의 이벤트 데이터를 활용할 수 있죠. 먼저 아래 명령어를 통해 프리뷰 버전의 SDK를 설치합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=01-dotnet-add-package.sh\n\n이제 본격적으로 이벤트그리드 데이터를 작업해 보도록 하겠습니다!\n\n\n## CloudEvents 형식으로 이벤트 데이터 보내기 ##\n\n애저 CLI에서 이벤트그리드 명령어를 사용하기 위해서는 먼저 아래와 같이 [확장 기능][az cli extensions]을 설치해야 합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=02-az-extension-add.sh\n\n확장 기능을 설치하고 나면, 아래 [애저 CLI][az cli] 명령어를 통해 이벤트그리드 커스텀 토픽의 엔드포인트를 확인합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=03-get-endpoint.sh\n\n그리고, 접속 키는 아래 명령어를 이용해서 확인합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=04-get-access-key.sh\n\n위에서 확인한 엔드포인트와 접속 키를 이용해서 아래와 같이 애저 펑션 안에 이벤트그리드용 데이터 퍼블리셔 인스턴스를 만듭니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=05-create-publisher.cs\n\nCloudEvents 형식의 데이터를 보내기 위해서는 이벤트 데이터 뿐만 아니라 몇 가지 다른 메타 데이터 정보가 필요합니다.\n\n* `source`: 이벤트 발생자. 보통 URL 형식으로 작성합니다.\n* `type`: 이벤트 타입. 이 값을 이용해서 이벤트를 구분합니다. 형식은 `com.example.someevent`와 비슷한 형태가 됩니다.\n* `datacontenttype`: 항상 `application/cloudevents+json` 값으로 지정해 주면 됩니다.\n\n이외에도 다른 메타 데이터 정보가 필요하지만, 나머지는 SDK에서 자동으로 처리해주니 여기서는 크게 상관하지 않습니다.\n\n> CloudEvents 데이터 형식에 대한 내용을 좀 더 확인하고 싶다면, [이 링크][ce spec json]를 읽어보세요!\n\n위 메타 데이터 정보를 이용해 아래와 같이 CloudEvents 데이터를 작성한 후 이벤트그리드로 보내면 됩니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=06-publish-event.cs\n\n위의 방법을 통해 CloudEvents 형식의 이벤트 데이터를 이벤트그리드 커스텀 토픽으로 보낼 수 있게 됐습니다.\n\n\n## CloudEvents 형식으로 이벤트 데이터 받기 ##\n\n앞서 [애저 펑션][az fncapp]에서는 [이벤트그리드 바인딩 확장 기능의 제약][az fncapp binding evtgrd]이 있다고 했습니다. 때문에 CloudEvents 형식의 데이터를 받아 처리하기 위해서는 [HTTP 트리거][az fncapp trigger http]를 이용해야 하는데요, 이 트리거는 두 가지 요청을 동시에 처리해야 합니다.\n\n* 이벤트 핸들러 엔드포인트 검증 요청\n* 이벤트 데이터 처리\n\n\n### 이벤트 핸들러 엔드포인트 검증 요청 ###\n\n[CloudEvents의 웹훅 스펙][ce spec webhook]에 따르면 검증 요청은 `OPTIONS` 메소드를 이용하고 요청 헤더에 반드시 `WebHook-Request-Origin`를 포함합니다 (line #8). 따라서 이 검증 요청에 응답하기 위해서는 이 요청 헤더 값을 응답 헤더의 `WebHook-Allowed-Origin` 값에 실어 보내야 합니다 (line #9).\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=07-validate-request.cs&highlights=8,9\n\n\n### 이벤트 데이터 처리 ###\n\n위와 같이 이벤트 핸들러로서 애저 펑션 엔드포인트 검증에 성공했다면, 애저 이벤트그리드는 앞으로 이벤트 데이터를 계속해서 동일한 엔드포인트로 `POST` 메소드를 이용해 보냅니다. 이 때, CloudEvents 이벤트 데이터 전체를 사용하고 싶다면 아래 코드의 `@event` 인스턴스를 이용하면 되고 (line #18), `data` 부분만 사용하려면 아래 코드와 같이 비직렬화해서 사용합니다 (line #19).\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=08-handle-event.cs&highlights=18,19\n\n위와 같이 CloudEvents 형식의 이벤트 데이터를 이벤트 토픽에서 애저 펑션으로 받아 처리할 수 있게 됐습니다.\n\n---\n\n지금까지 [애저 펑션][az fncapp]에서 [애저 이벤트그리드][az evtgrd]로 [CloudEvents][ce] 형식의 이벤트 데이터를 보내고 받는 방법에 대해 알아 보았습니다. 이 방법은 포스트 안에서 계속 언급했다시피, 현재 [바인딩 확장 기능][az fncapp binding evtgrd]은 아직 CloudEvents 형식을 지원하지 않기 때문에, 일종의 임시방편으로 사용하는 방법입니다. 조만간 새 버전의 확장 기능이 릴리즈 되기를 기대합니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[az devops free]: https://azure.microsoft.com/ko-kr/services/devops/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[az cli]: https://docs.microsoft.com/ko-kr/cli/azure/what-is-azure-cli?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[az cli extensions]: https://docs.microsoft.com/ko-kr/cli/azure/azure-cli-extensions-list?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[az fncapp binding evtgrd]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-event-grid?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[az fncapp trigger http]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp&WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n\n[az evtgrd]: https://docs.microsoft.com/ko-kr/azure/event-grid/overview?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[az evtgrd topic custom]: https://docs.microsoft.com/ko-kr/azure/event-grid/custom-topics?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n\n[nuget evtgrd legacy]: https://www.nuget.org/packages/Microsoft.Azure.EventGrid/\n[nuget evtgrd new]: https://www.nuget.org/packages/Azure.Messaging.EventGrid/\n\n[az sdk evtgrd dotnet]: https://github.com/Azure/azure-sdk-for-net/tree/master/sdk/eventgrid/Azure.Messaging.EventGrid\n[az sdk evtgrd js]: https://github.com/Azure/azure-sdk-for-js/tree/master/sdk/eventgrid/eventgrid\n[az sdk evtgrd python]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/eventgrid/azure-eventgrid\n[az sdk evtgrd java]: https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/eventgrid/azure-messaging-eventgrid\n\n[ce]: https://cloudevents.io/\n[ce spec json]: https://github.com/cloudevents/spec/blob/v1.0/json-format.md#23-examples\n[ce spec webhook]: https://github.com/cloudevents/spec/blob/v1.0/http-webhook.md#4-abuse-protection\n"},"title":"애저 펑션과 애저 이벤트그리드간 CloudEvents 형식 이벤트 데이터 주고받기","content":"\n[애저 펑션][az fncapp]은 자체적으로 [애저 이벤트그리드][az evtgrd]에 대한 [바인딩 확장 기능][az fncapp binding evtgrd]을 제공하고 있어서 이벤트그리드로 이벤트 데이터를 아주 손쉽게 주고 받을 수 있습니다. 하지만, 현재 바인딩 확장 기능은 아직 정식으로 [CloudEvents][ce] 형식을 지원하지 않는데, 그 이유는 [현재 버전의 SDK][nuget evtgrd legacy]가 아직 CloudEvents 형식을 지원하지 않기 때문입니다. 아마도 [새 버전의 SDK][nuget evtgrd new]가 GA되는 시점이 되면 애저 펑션 확장 기능에서도 이를 지원하지 않을까 예상하는데요, 따라서, 그 때 까지는 CloudEvents 형식을 사용해서 이벤트그리드에 데이터를 주고 받기 위해서 별도의 작업을 해 줘야 합니다. 이 포스트에서는 그 방법에 대해 간단히 정리해 보도록 하겠습니다.\n\n> 이 포스트에서는 [.NET SDK][az sdk evtgrd dotnet]를 대상으로 기술합니다. 다른 언어로도 SDK를 지원하고 있으니, 아래 링크를 클릭해서 새 SDK를 확인해 보세요!\n>\n> * [JavaScript][az sdk evtgrd js]\n> * [Python][az sdk evtgrd python]\n> * [Java][az sdk evtgrd java]\n\n\n## 애저 이벤트그리드 SDK 프리뷰 버전 설치 ##\n\n이 글을 쓰는 현재 새 버전의 애저 이벤트그리드 SDK 버전은 [`4.0.0-beta.4`][nuget evtgrd new]로, 아직 프리뷰 상태입니다. 이 프리뷰 버전의 SDK를 사용하면 CloudEvents 형식의 이벤트 데이터를 활용할 수 있죠. 먼저 아래 명령어를 통해 프리뷰 버전의 SDK를 설치합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=01-dotnet-add-package.sh\n\n이제 본격적으로 이벤트그리드 데이터를 작업해 보도록 하겠습니다!\n\n\n## CloudEvents 형식으로 이벤트 데이터 보내기 ##\n\n애저 CLI에서 이벤트그리드 명령어를 사용하기 위해서는 먼저 아래와 같이 [확장 기능][az cli extensions]을 설치해야 합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=02-az-extension-add.sh\n\n확장 기능을 설치하고 나면, 아래 [애저 CLI][az cli] 명령어를 통해 이벤트그리드 커스텀 토픽의 엔드포인트를 확인합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=03-get-endpoint.sh\n\n그리고, 접속 키는 아래 명령어를 이용해서 확인합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=04-get-access-key.sh\n\n위에서 확인한 엔드포인트와 접속 키를 이용해서 아래와 같이 애저 펑션 안에 이벤트그리드용 데이터 퍼블리셔 인스턴스를 만듭니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=05-create-publisher.cs\n\nCloudEvents 형식의 데이터를 보내기 위해서는 이벤트 데이터 뿐만 아니라 몇 가지 다른 메타 데이터 정보가 필요합니다.\n\n* `source`: 이벤트 발생자. 보통 URL 형식으로 작성합니다.\n* `type`: 이벤트 타입. 이 값을 이용해서 이벤트를 구분합니다. 형식은 `com.example.someevent`와 비슷한 형태가 됩니다.\n* `datacontenttype`: 항상 `application/cloudevents+json` 값으로 지정해 주면 됩니다.\n\n이외에도 다른 메타 데이터 정보가 필요하지만, 나머지는 SDK에서 자동으로 처리해주니 여기서는 크게 상관하지 않습니다.\n\n> CloudEvents 데이터 형식에 대한 내용을 좀 더 확인하고 싶다면, [이 링크][ce spec json]를 읽어보세요!\n\n위 메타 데이터 정보를 이용해 아래와 같이 CloudEvents 데이터를 작성한 후 이벤트그리드로 보내면 됩니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=06-publish-event.cs\n\n위의 방법을 통해 CloudEvents 형식의 이벤트 데이터를 이벤트그리드 커스텀 토픽으로 보낼 수 있게 됐습니다.\n\n\n## CloudEvents 형식으로 이벤트 데이터 받기 ##\n\n앞서 [애저 펑션][az fncapp]에서는 [이벤트그리드 바인딩 확장 기능의 제약][az fncapp binding evtgrd]이 있다고 했습니다. 때문에 CloudEvents 형식의 데이터를 받아 처리하기 위해서는 [HTTP 트리거][az fncapp trigger http]를 이용해야 하는데요, 이 트리거는 두 가지 요청을 동시에 처리해야 합니다.\n\n* 이벤트 핸들러 엔드포인트 검증 요청\n* 이벤트 데이터 처리\n\n\n### 이벤트 핸들러 엔드포인트 검증 요청 ###\n\n[CloudEvents의 웹훅 스펙][ce spec webhook]에 따르면 검증 요청은 `OPTIONS` 메소드를 이용하고 요청 헤더에 반드시 `WebHook-Request-Origin`를 포함합니다 (line #8). 따라서 이 검증 요청에 응답하기 위해서는 이 요청 헤더 값을 응답 헤더의 `WebHook-Allowed-Origin` 값에 실어 보내야 합니다 (line #9).\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=07-validate-request.cs&highlights=8,9\n\n\n### 이벤트 데이터 처리 ###\n\n위와 같이 이벤트 핸들러로서 애저 펑션 엔드포인트 검증에 성공했다면, 애저 이벤트그리드는 앞으로 이벤트 데이터를 계속해서 동일한 엔드포인트로 `POST` 메소드를 이용해 보냅니다. 이 때, CloudEvents 이벤트 데이터 전체를 사용하고 싶다면 아래 코드의 `@event` 인스턴스를 이용하면 되고 (line #18), `data` 부분만 사용하려면 아래 코드와 같이 비직렬화해서 사용합니다 (line #19).\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=08-handle-event.cs&highlights=18,19\n\n위와 같이 CloudEvents 형식의 이벤트 데이터를 이벤트 토픽에서 애저 펑션으로 받아 처리할 수 있게 됐습니다.\n\n---\n\n지금까지 [애저 펑션][az fncapp]에서 [애저 이벤트그리드][az evtgrd]로 [CloudEvents][ce] 형식의 이벤트 데이터를 보내고 받는 방법에 대해 알아 보았습니다. 이 방법은 포스트 안에서 계속 언급했다시피, 현재 [바인딩 확장 기능][az fncapp binding evtgrd]은 아직 CloudEvents 형식을 지원하지 않기 때문에, 일종의 임시방편으로 사용하는 방법입니다. 조만간 새 버전의 확장 기능이 릴리즈 되기를 기대합니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[az devops free]: https://azure.microsoft.com/ko-kr/services/devops/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[az cli]: https://docs.microsoft.com/ko-kr/cli/azure/what-is-azure-cli?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[az cli extensions]: https://docs.microsoft.com/ko-kr/cli/azure/azure-cli-extensions-list?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[az fncapp binding evtgrd]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-event-grid?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[az fncapp trigger http]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp&WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n\n[az evtgrd]: https://docs.microsoft.com/ko-kr/azure/event-grid/overview?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[az evtgrd topic custom]: https://docs.microsoft.com/ko-kr/azure/event-grid/custom-topics?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n\n[nuget evtgrd legacy]: https://www.nuget.org/packages/Microsoft.Azure.EventGrid/\n[nuget evtgrd new]: https://www.nuget.org/packages/Azure.Messaging.EventGrid/\n\n[az sdk evtgrd dotnet]: https://github.com/Azure/azure-sdk-for-net/tree/master/sdk/eventgrid/Azure.Messaging.EventGrid\n[az sdk evtgrd js]: https://github.com/Azure/azure-sdk-for-js/tree/master/sdk/eventgrid/eventgrid\n[az sdk evtgrd python]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/eventgrid/azure-eventgrid\n[az sdk evtgrd java]: https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/eventgrid/azure-messaging-eventgrid\n\n[ce]: https://cloudevents.io/\n[ce spec json]: https://github.com/cloudevents/spec/blob/v1.0/json-format.md#23-examples\n[ce spec webhook]: https://github.com/cloudevents/spec/blob/v1.0/http-webhook.md#4-abuse-protection\n"},"19b5d15b-9d44-4815-8fc9-2f692eff02d4":{"id":"19b5d15b-9d44-4815-8fc9-2f692eff02d4","index":"Blog","path":"/posts/2021/01/26/towards-fairness-ai-with-fairlearn-and-azure-mlops/","node":{"title":"공정한 & 편향없는 AI를 위한 Fairlearn 및 애저 MLOps 도구 활용","category":"Azure","description":"공정한, 그리고 편향없는 AI를 실현하기 위한 마음가짐/윤리적인 자세도 중요하겠지만, 도구를 잘 활용하여 사용하는 데이터/알고리즘에 대한 편향성을 조기에 발견할 수 있다면 더욱 좋겠죠? Fairlearn 오픈소스와 애저 머신러닝 서비스를 활용한 MLOps 도구를 통해 공정한/편향없는 AI 실현이 어떻게 가능한지 다뤄봅니다.","content":"\n개인의 삶에 영향을 미치는 중요한 결정에 많은 데이터 활용이 이루어지면서 보다 안전하고, 윤리적이면서 책임감있는 사용을 보장하는 AI(인공지능)에 대한 중요성이 대두되고 있습니다. 선한 목적으로 알고리즘을 개발하고 데이터를 활용하더라도 의도하지 않게 성별, 문화적, 민족적 편향성을 AI가 보여준다면 결코 공정하다고 할 수 없을 것입니다.\n\n![애저 머신러닝 - 책임있는 ML](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/responsible-ml.png)\n\n마이크로소프트는 책임감있고 사람들의 신뢰를 보장하는 방식으로 AI 시스템이 개발되도록 AETHER 위원회를 비롯한 작업 그룹들이 주도하는 노력과 지원을 계속하고 있습니다 ([참고][ms-ai-approach]). 그 중, 지난 빌드 2020에서는 애저 머신러닝 서비스를 통해 책임있는 ML을 어떻게 구현하는지에 대한 발표가 있었습니다. 데이터 과학자 및 개발자 분들께서 머신러닝 모델을 보다 잘 <b>이해</b>하고, 데이터를 <b>보호</b>하며 머신러닝 전반 과정을 <b>제어</b>하는 과정을 통해 신뢰할 수 있는 AI를 구축가능하다는 것입니다.\n\n![AI에서의 공정성 (Fairness)](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/ai-and-fairness-from-build-korea-azure-ai.jpg)\n\n지난 2020년 7월, 마이크로소프트 [Data&AI 클라우드 솔루션 아키텍트이신 박소은님][linkedin-soeun-park]이 [Azure AI의 새로운 기능][ms-build-korea-2020-azure-track]에 대해 발표하시면서 AI에서의 공정성 (Fairness)을 말씀해주셨습니다. AI 시스템이 공정하지 않게 동작할 때 발생하는 여러 피해 중, 하나는 서비스 품질 (Quality of Service)에 대한 피해가 있습니다. 제품이 특정 그룹에서는 잘 동작하지만 다른 그룹에서는 다른 품질을 보여준다는 것으로, 어떤 음성인식 시스템에서, 남성의 목소리는 잘 인식하는 반면, 여성의 소리를 잘 인식하지 못한다면 서비스 품질 피해가 있다고 할 수 있습니다. 두 번째로는 할당 (Allocation)에 대한 피해로, 예를 들어 대출 심사나 채용 과정에서 관련없는 특징이 고려되어 판단이 되어 의도하지 않은 할당 피해가 있다는 것입니다. 이러한 문제들을 해결하기 위해서는 AI에 접근할 때 윤리적인 마음가짐과 함께 올바른 규정을 준수하는 부분도 중요하겠지만, 어떻게 모델을 분석하고, 특정 그룹의 사람들에게 부정적인 결과를 초래할 수 있는 이러한 행동들이 AI 시스템에 반영되었는지를 잘 확인하는 방법 또한 중요할 것입니다.\n\n도구를 보다 잘 활용하여 사용하는 데이터 및 알고리즘이 공정한지를 어떻게 발견하고 대처할 수 있을까요? 이번 포스트에서는 머신러닝 시스템을 만들 때, 파이썬 라이브러리인 [Fairlearn][fairlearn-website] 오픈소스와 [애저 머신러닝 서비스][ms-azure-ml-docs]를 활용하여 보다 공정하고 편향없는 AI를 어떻게 실현할 수 있는지에 대해 알아보겠습니다.\n\n## Fairlearn 오픈소스를 사용한 머신러닝 모델 평가 ##\n\nFairlearn은 머신러닝 모델에서 발생할 수 있는 비공정성을 평가하는 기능을 제공하면서 동시에 비공정성을 완화 가능한 알고리즘들을 제공하여 비공정성을 개선하고자 사용하는 오픈소스 툴킷입니다. 파이썬으로 작성된 오픈소스로 [깃허브에 공개][fairlearn-github]되어 있으며, [pip 명령어를 사용][fairlearn-pypi]해 로컬/클라우드 환경에 직접 설치하여 사용하실 수도 있습니다. 본 포스트에서는 비공정성 평가에 대한 부분을 살펴보겠습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=01-pip-install-fairlearn.sh\n\n일반적으로 머신러닝을 사용해 모델을 정의 후 트레이닝 및 예측하는 과정을 거치며, 머신러닝 모델을 평가하기 위해서는 분류(Classification), 회귀 (Regression), 클러스터링과 같은 모델 유형에 따라 정확도 (Accuracy), 정밀도 (Precision), 재현율 (Recall), AUC, MAE, RMSE 등과 같은 여러 지표 (Metric)들을 사용합니다 ([마이크로소프트 문서][ms-docs-ml-algorithm-evaluation-model-metrics]에서 자세한 내용을 영문으로 확인하실 수 있습니다). Fairlearn에서는 공정성을 평가하기 위해 이와 같은 지표들을 기반으로 1) 민감한 피처를 선택하고 2) 성능과 예측 차이에 따른 평가 결과를 확인하는 라이브러리 함수를 제공합니다. 또한, 대시보드를 Jupyter 노트북에서 확인하여 만든 머신러닝 모델이 공정한지를 보다 쉽게 확인도 가능합니다. 참고로, 애저에서는 뒤에서 설명하는 [애저 머신러닝 서비스에서 Jupyter 노트북을 쉽게 실행][ms-azure-ml-jupyter]할 수 있습니다.\n\n![Fairlearn - 모델 평가](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/fairlearn-ml-model-assessment.jpg)\n\n그렇다면, 이제부터는 실제 데이터셋으로 머신러닝 모델을 트레이닝할 때 Fairlearn을 어떻게 사용하는지 살펴보겠습니다. [OpenML에 업로드된 성인 인구조사 데이터셋][openml-adult-census-1590]을 활용해 보겠습니다. [Scikit-learn에서 제공하는 fetch_openml() 함수][scikit-learn-fetch_openml]를 통해 데이터셋 숫자인 1590만 알면 아래 코드 예제와 같이 쉽게 데이터셋을 불러올 수 있습니다. 연간 소득이 5만 달러를 넘는지에 대한 여부를 판단하는 예측 모델을 만들고자 합니다. 여기서 한 가지, 머신러닝 모델 트레이닝을 할 때 성별, 인종과 같은 민감한 피처를 제외하는 것이 좋습니다. 앞에서 언급하였던 할당 피해를 방지할 수 있을 것입니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=02-fetch_openml.py\n\n그리고 머신러닝 모델을 트레이닝할 때, 일반적으로 평가를 위해 데이터를 트레이닝 셋과 테스트 셋으로 분리합니다. 예제에서는 30%를 테스트 셋으로 배정하였으며, 인덱스를 정리하는 짧은 코드를 추가하였습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=03-dataset-split.py\n\n데이터 준비가 이제 다 끝났으니, 모델 트레이닝 및 예측이 가능하겠죠? 예제에서는 [Scikit-learn에서 제공하는 분류를 위한 의사결정트리인 DecisionTreeClassifier][scikit-learn-tree]를 사용해 보겠습니다. 구체적인 `min_samples_leaf` 및 `max_depth` 값 등을 튜닝하는 것도 중요하겠지만, 본 포스트에서는 AI 공정성을 위한 평가를 어떻게 하는지에 집중하도록 하겠습니다. 테스트셋으로 예측한 결과들을 정확도, 정밀도, 재현율 등 지표를 통해 확인할 수 있으나, 해당 지표 자체만으로 머신러닝 모델이 공정성을 얼마나 확보하였는지를 이해하기에는 쉽지 않은 것 같습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=04-training.py\n\nJupyter 노트북에서 Fairlearn 라이브러리에서 제공하는 `FairlearnDashboard()` 함수를 사용하면 대시보드를 불러올 수 있습니다. 함수를 호출할 때, 민감한 피처에 대한 데이터셋과 예측 모델을 지정하면 민감한 피처와 측정하고자 하는 성능 항목을 선택하여 성능과 예측에 대한 차이 (disparity)를 확인하는 대시보드를 제공합니다. 각 민감한 피처 값 유형에 따라 살펴보고자 하는 지표가 과소/과대 예측이 되었는지에 대한 성능 차이 및 데이터 선택에 따른 공정성이 있는지에 대한 예측 차이를 확인할 수 있습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=05-fairlearn-dashboard.py\n\n## MLOps 실현을 위한 애저 머신러닝 서비스에 모델 & 실험 업로드 ##\n\n방대한 양의 데이터에서부터 머신러닝 모델이 여러 트레이닝 및 예측, 튜닝 과정을 걸쳐 완성되어도, 실제 서비스화를 위해서는 성능 최적화와 함께 트레이닝 데이터 및 모델에 대한 모니터링 및 관리 등 많은 과정이 있습니다. [애저 머신러닝 서비스][ms-azure-ml-service-page]는 사람, 프로세스, 제품이 함께 결합하여 최종 고객에게 가치를 지속적으로 전달한다는 DevOps를 넘어서, 이러한 전반적인 머신러닝을 고려한 MLOps 실천 사례 경험을 반영한 애저 서비스입니다. 복잡한 데이터셋 변화와 발전하는 머신러닝 모델에 대한 추적 뿐만 아니라, 보다 빠르게 머신러닝 모델을 빌드하고 학습, 배포할 수 있는 다양한 생산적인 환경을 개발자와 데이터 과학자에게 제공하고 있습니다. (MLOps에 대한 자세한 내용은 마이크로소프트에서 AI 플랫폼을 담당하시는 [한석진님][linkedin-seokjin-han]이 공유주신 [MLOps 101 영상][yt-mlops-101-seokjin]을 통해 확인하실 수 있습니다.)\n\n- 실험: 머신러닝을 하는 과정은 1) 데이터셋 준비 2) 모델 트레이닝을 위한 피처 선택 3) 알고리즘 선택 및 파라미터 지정 4) 트레이닝 수행이라는 과정을 거쳐 하나의 머신러닝 모델이 만들어집니다. 이를 애저 머신러닝 서비스에서는 실험이라는 단위로 추상화를 하였습니다. 예를 들어 위 예제에서 테스트셋 비율을 30%로, DecisionTreeClassifier를 사용하여 `min_samples_leaf` 값은 10으로, `max_depth` 값은 4로 지정하였는데, 이 전체를 실행했던 과정을 하나의 실험으로 보는 것입니다. 같은 실험을 반복해서 실행하기도 하며, 데이터셋을 바꿔서 다시 실행하거나, `max_depth` 값을 3으로 바꾸어서 트레이닝을 한다면 또 다른 실험 단위를 실행할 수도 있겠죠.\n\n- 모델: 실험 과정을 거쳐, 반복 & 재사용이 가능한 모델이라는 단위도 생각해볼 수 있습니다. 모델은 1) 어떤 머신러닝 알고리즘을 선택하는지 2) 어떤 파라미터 값을 사용하는지에 대한 내용을 가지는 추상화 단위입니다. 이렇게 모델을 실험과 따로 분리하여 살펴봄으로써, 동일한 모델이 서로 다른 데이터셋을 사용하여 실험할 때 어떤 결과 차이를 보이는지 확인할 수가 있을 것입니다.\n\n무엇보다 애저 머신러닝 서비스는 책임있는 ML을 위한 머신러닝 모델 **이해**, 데이터 **보호**, 전체 과정 **제어**를 위한 쉬운 도구 연계를 염두한 서비스라는 특징을 가지고 있습니다. 위에서 살펴본 Fairlearn의 경우, AI 공정성을 보장하기 위한 머신러닝 모델 이해와 관련이 있는데요, 애저 머신러닝 서비스에서는 Fairlearn 오픈소스와 연동이 가능하여 애저 머신러닝 서비스 UI에서 모델과 실험 단위로 Fairlearn 대시보드를 살펴볼 수 있습니다. 이제부터는 애저 머신러닝 서비스에서 실험과 모델이 어떻게 관리되는지 간단히 살펴보고, 위에서 만든 머신러닝 모델을 애저 머신러닝 서비스에 모델 및 실험 단위로 업로드하여 책임있는 ML을 위해 MLOps를 어떻게 활용할 수 있는지를 살펴보고자 합니다.\n\n업로드를 위해서는 애저 머신러닝 서비스라는 리소스를 만들어야겠죠? 애저 포털에서 애저 머신러닝 서비스를 만드는 방법은 [마이크로소프트 Learn에 설명된 머신러닝 소개 및 작업 영역][ms-learn-azure-ml-workspace] 내용을 참고하실 수 있습니다. 애저 머신러닝 서비스를 쉽게 연결하려면 [azureml-sdk][azureml-sdk-pypi] 및 관련 라이브러리가 필요합니다. 애저 머신러닝 노트북에 대한 한 예제 파일에 나와있는 아래 내용을 통해 의존성있는 라이브러리 목록을 확인할 수 있습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=05-2-upload-fairness-dashboard.yml\n\n애저 머신러닝 서비스 접속 구성을 담고 있는 `config.json` 파일이 필요합니다. 해당 파일은 애저 머신러닝 서비스 리소스를 애저에서 만든 다음 받으셔서 로컬 및 다른 개발 환경에서 연결하실 수도 있으며, 아니면 애저 머신러닝 스튜디오를 실행한 후, Notebooks 탭에서 Jupyter 노트북을 작성하면 추가한 컴퓨팅 자원에서 바로 `config.json` 파일을 불러오실 수도 있습니다.\n\n![Azure Machine Learning Service - config.json 다운로드](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/azure-ml-download-config.png)\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=06-azureml-config.py\n\n그 다음으로, 애저 머신러닝 서비스에 모델을 등록합니다. 이때, 등록할 모델은 이전에 [Scikit-learn에서 제공하는 분류를 위한 의사결정트리인 DecisionTreeClassifier][scikit-learn-tree]를 사용하였고, 구체적인 `min_samples_leaf` 및 `max_depth` 값을 지정하였던, 개체 인스턴스에 대응합니다. 모델을 등록하면 모델 ID 값을 반환하는데, 이 값은 바로 다음에 실험을 추가할 때 사용하므로 변수에 저장해두고자 합니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=07-azure-model-reg.py\n\n애저 머신러닝 서비스에서 Fairlearn에서 실행했던 결과를 포함해 실험으로 관리할 수 있습니다. 이렇게 관리를 하려면 Fairlearn으로 실행한 결과를 계산하여 저장해 두고 있어야겠죠. [fairlearn.metrics][fairlearn-metrics-package] 패키지에 있는 `_create_group_metric_set()` 함수를 통해 미리 계산한 결과를 저장합니다. \n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=08-fairlearn-metric-calc.py\n\n다음으로 애저 머신러닝 서비스에 실험 단위로 업로드합니다. [azureml.core.Experiment 클래스][ms-azureml-core-experiment-class] 인스턴스를 생성한 후, 업로드를 진행합니다. 이 때, 바로 이전에 Fairlearn에서 계산된 결과를 Experiment 인스턴스에 같이 전달합니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=09-azureml-upload.py\n\n이제, 애저 머신러닝 서비스에서 어떻게 보이는지 확인해보면 되겠죠? 애저 머신러닝 스튜디오에서 실험 -> 목록 선택 -> 실행 단위를 선택한 다음, 공정성 탭에 들어가면 확인하실 수 있습니다. 코드 예제와 함께 단계별로 살펴보았는데요, 애저 머신러닝 서비스를 사용한다면 공정성에 대한 부분을 개발자는 Fairlearn으로 관련 지표를 계산하여 업로드하며, 관리자 / 머신러닝 종사자는 애저 머신러닝 스튜디오 UI에서 실험 및 모델 단위로 공정성에 대한 지표를 UI를 통해 쉽게 확인할 수가 있습니다. 또한, 모니터링이나 전체 머신러닝 프로세스를 코드로 잘 관리한다면, 책임있는 ML을 MLOps 실천 사례에 따라 실현할 수 있으며, 구성원 모두 및 외부에도 보다 신뢰있는 AI라고 할 수 있을 것입니다.\n\n![애저 머신러닝 서비스 - 스튜디오에서 공정성 확인](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/azure-ml-studio-fairness.png)\n\n이와 같이, 머신러닝 솔루션이 공정하고 예측의 가치를 이해하고 설명하기 쉽도록 하려면 개발자와 데이터 과학자가 AI 시스템의 공정성을 평가하고 관찰된 불공정 문제를 완화하는 데 사용할 수 있는 프로세스를 도구와 함께 구축하는 것이 중요합니다. 2021년 1월 개최된 CES 2021에서 마이크로소프트 최고법률책임자인 브래드 스미스는 \"기술에는 양심이 없지만 사람에게는 있다\"며 \"기술이 어떤 방식으로 쓰이든 그것은 사람의 책임\"이라고 이야기하였습니다. 이번 포스트에서 소개된 머신러닝 도구 및 실천사례가 잘 활용되어, 보다 공정한, 그리고 편향없는 AI와 함께 모두 지낼 수 있기를 희망합니다.\n\n> 이 포스트에 쓰인 예제 Jupyter 노트북 코드를 [여기](https://github.com/ianychoi/Azure-oss-hands-on-labs/blob/master/06-Azure-ML-with-Fairlearn/fairlearn-quickstart-on-AzureMLStudio.ipynb)에서 확인해 보세요!\n\n그리고 영문으로 되어 있지만, Fairlearn에 대해 자세하게 설명한 많은 내용이 있으며, 해당 내용을 참고하여 본 포스트를 작성하였습니다:\n- [Fairlearn - A Python package to assess AI system's fairness][ms-tc-fairlearn]\n- [Microsoft Docs: What is responsible machine learning?][ms-docs-responsible-ml]\n- [Fairlearn: A toolkit for assessing and improving fairness in AI][ms-research-fairlearn]\n- [Creating Fair Machine Learning Models with Fairlearn][towardsdatascience-tutorial-fairness]\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][ms-az-account-free]\n* 애저 머신러닝 서비스에 관심이 있으신가요? ➡️ [애저 머신러닝 서비스 살펴보기][ms-azure-ml-service-page]\n* 애저에서 머신러닝을 한다는 것은 무엇일까요? ➡️ [한석진님이 쓰신 기고를 살펴보세요][seokjin-azure-and-ml]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms-learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt-msdevkr]\n\n[ms-az-account-free]: https://azure.microsoft.com/ko-kr/free/?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-azure-ml-service-page]: https://azure.microsoft.com/ko-kr/services/machine-learning/?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-learn]: https://docs.microsoft.com/ko-kr/learn/?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[yt-msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[fairlearn-website]: https://fairlearn.github.io\n[fairlearn-github]: https://github.com/fairlearn/fairlearn\n[fairlearn-pypi]: https://pypi.org/project/fairlearn/\n[openml-adult-census-1590]: https://www.openml.org/d/1590\n[scikit-learn-fetch_openml]: https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_openml.html\n[scikit-learn-tree]: https://scikit-learn.org/stable/modules/tree.html\n[scikit-learn-model-evaluation]: https://scikit-learn.org/stable/modules/model_evaluation.html\n[yt-mlops-101-seokjin]: https://www.youtube.com/playlist?list=PLDZRZwFT9Wku509LgbJviEcHxX4AYj3QP\n[azureml-sdk-pypi]: https://pypi.org/project/azureml-sdk/\n[fairlearn-metrics-package]: https://fairlearn.github.io/v0.5.0/api_reference/fairlearn.metrics.html\n[towardsdatascience-tutorial-fairness]: https://towardsdatascience.com/a-tutorial-on-fairness-in-machine-learning-3ff8ba1040cb\n[seokjin-azure-and-ml]: http://it.chosun.com/site/data/html_dir/2020/08/02/2020080200103.html\n[linkedin-soeun-park]: https://www.linkedin.com/in/soeun-park-b55613176/\n[linkedin-seokjin-han]: https://www.linkedin.com/in/seokjinhan/\n\n[ms-ai-approach]: https://www.microsoft.com/ko-kr/ai/our-approach?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-build-korea-2020-azure-track]: https://info.microsoft.com/AP-AzureINFRA-WBNR-FY21-07Jul-23-BuildKorea-SRDEM31279_LP02OnDemandRegistration-ForminBody.html?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-docs-ml-algorithm-evaluation-model-metrics]: https://docs.microsoft.com/en-us/azure/machine-learning/algorithm-module-reference/evaluate-model#metrics?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-learn-azure-ml-workspace]: https://docs.microsoft.com/ko-kr/learn/modules/intro-to-azure-machine-learning-service/2-azure-ml-workspace?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-azureml-core-experiment-class]: https://docs.microsoft.com/ko-kr/python/api/azureml-core/azureml.core.experiment(class)?view=azure-ml-py&ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-tc-fairlearn]: https://techcommunity.microsoft.com/t5/educator-developer-blog/fairlearn-a-python-package-to-assess-ai-system-s-fairness/ba-p/1402950?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-docs-responsible-ml]: https://docs.microsoft.com/en-us/azure/machine-learning/concept-responsible-ml?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-research-fairlearn]: https://www.microsoft.com/en-us/research/publication/fairlearn-a-toolkit-for-assessing-and-improving-fairness-in-ai/?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-azure-ml-jupyter]: https://docs.microsoft.com/ko-kr/azure/machine-learning/how-to-run-jupyter-notebooks/?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-azure-ml-docs]: https://docs.microsoft.com/ko-kr/azure/machine-learning/?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n"},"title":"공정한 & 편향없는 AI를 위한 Fairlearn 및 애저 MLOps 도구 활용","content":"\n개인의 삶에 영향을 미치는 중요한 결정에 많은 데이터 활용이 이루어지면서 보다 안전하고, 윤리적이면서 책임감있는 사용을 보장하는 AI(인공지능)에 대한 중요성이 대두되고 있습니다. 선한 목적으로 알고리즘을 개발하고 데이터를 활용하더라도 의도하지 않게 성별, 문화적, 민족적 편향성을 AI가 보여준다면 결코 공정하다고 할 수 없을 것입니다.\n\n![애저 머신러닝 - 책임있는 ML](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/responsible-ml.png)\n\n마이크로소프트는 책임감있고 사람들의 신뢰를 보장하는 방식으로 AI 시스템이 개발되도록 AETHER 위원회를 비롯한 작업 그룹들이 주도하는 노력과 지원을 계속하고 있습니다 ([참고][ms-ai-approach]). 그 중, 지난 빌드 2020에서는 애저 머신러닝 서비스를 통해 책임있는 ML을 어떻게 구현하는지에 대한 발표가 있었습니다. 데이터 과학자 및 개발자 분들께서 머신러닝 모델을 보다 잘 <b>이해</b>하고, 데이터를 <b>보호</b>하며 머신러닝 전반 과정을 <b>제어</b>하는 과정을 통해 신뢰할 수 있는 AI를 구축가능하다는 것입니다.\n\n![AI에서의 공정성 (Fairness)](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/ai-and-fairness-from-build-korea-azure-ai.jpg)\n\n지난 2020년 7월, 마이크로소프트 [Data&AI 클라우드 솔루션 아키텍트이신 박소은님][linkedin-soeun-park]이 [Azure AI의 새로운 기능][ms-build-korea-2020-azure-track]에 대해 발표하시면서 AI에서의 공정성 (Fairness)을 말씀해주셨습니다. AI 시스템이 공정하지 않게 동작할 때 발생하는 여러 피해 중, 하나는 서비스 품질 (Quality of Service)에 대한 피해가 있습니다. 제품이 특정 그룹에서는 잘 동작하지만 다른 그룹에서는 다른 품질을 보여준다는 것으로, 어떤 음성인식 시스템에서, 남성의 목소리는 잘 인식하는 반면, 여성의 소리를 잘 인식하지 못한다면 서비스 품질 피해가 있다고 할 수 있습니다. 두 번째로는 할당 (Allocation)에 대한 피해로, 예를 들어 대출 심사나 채용 과정에서 관련없는 특징이 고려되어 판단이 되어 의도하지 않은 할당 피해가 있다는 것입니다. 이러한 문제들을 해결하기 위해서는 AI에 접근할 때 윤리적인 마음가짐과 함께 올바른 규정을 준수하는 부분도 중요하겠지만, 어떻게 모델을 분석하고, 특정 그룹의 사람들에게 부정적인 결과를 초래할 수 있는 이러한 행동들이 AI 시스템에 반영되었는지를 잘 확인하는 방법 또한 중요할 것입니다.\n\n도구를 보다 잘 활용하여 사용하는 데이터 및 알고리즘이 공정한지를 어떻게 발견하고 대처할 수 있을까요? 이번 포스트에서는 머신러닝 시스템을 만들 때, 파이썬 라이브러리인 [Fairlearn][fairlearn-website] 오픈소스와 [애저 머신러닝 서비스][ms-azure-ml-docs]를 활용하여 보다 공정하고 편향없는 AI를 어떻게 실현할 수 있는지에 대해 알아보겠습니다.\n\n## Fairlearn 오픈소스를 사용한 머신러닝 모델 평가 ##\n\nFairlearn은 머신러닝 모델에서 발생할 수 있는 비공정성을 평가하는 기능을 제공하면서 동시에 비공정성을 완화 가능한 알고리즘들을 제공하여 비공정성을 개선하고자 사용하는 오픈소스 툴킷입니다. 파이썬으로 작성된 오픈소스로 [깃허브에 공개][fairlearn-github]되어 있으며, [pip 명령어를 사용][fairlearn-pypi]해 로컬/클라우드 환경에 직접 설치하여 사용하실 수도 있습니다. 본 포스트에서는 비공정성 평가에 대한 부분을 살펴보겠습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=01-pip-install-fairlearn.sh\n\n일반적으로 머신러닝을 사용해 모델을 정의 후 트레이닝 및 예측하는 과정을 거치며, 머신러닝 모델을 평가하기 위해서는 분류(Classification), 회귀 (Regression), 클러스터링과 같은 모델 유형에 따라 정확도 (Accuracy), 정밀도 (Precision), 재현율 (Recall), AUC, MAE, RMSE 등과 같은 여러 지표 (Metric)들을 사용합니다 ([마이크로소프트 문서][ms-docs-ml-algorithm-evaluation-model-metrics]에서 자세한 내용을 영문으로 확인하실 수 있습니다). Fairlearn에서는 공정성을 평가하기 위해 이와 같은 지표들을 기반으로 1) 민감한 피처를 선택하고 2) 성능과 예측 차이에 따른 평가 결과를 확인하는 라이브러리 함수를 제공합니다. 또한, 대시보드를 Jupyter 노트북에서 확인하여 만든 머신러닝 모델이 공정한지를 보다 쉽게 확인도 가능합니다. 참고로, 애저에서는 뒤에서 설명하는 [애저 머신러닝 서비스에서 Jupyter 노트북을 쉽게 실행][ms-azure-ml-jupyter]할 수 있습니다.\n\n![Fairlearn - 모델 평가](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/fairlearn-ml-model-assessment.jpg)\n\n그렇다면, 이제부터는 실제 데이터셋으로 머신러닝 모델을 트레이닝할 때 Fairlearn을 어떻게 사용하는지 살펴보겠습니다. [OpenML에 업로드된 성인 인구조사 데이터셋][openml-adult-census-1590]을 활용해 보겠습니다. [Scikit-learn에서 제공하는 fetch_openml() 함수][scikit-learn-fetch_openml]를 통해 데이터셋 숫자인 1590만 알면 아래 코드 예제와 같이 쉽게 데이터셋을 불러올 수 있습니다. 연간 소득이 5만 달러를 넘는지에 대한 여부를 판단하는 예측 모델을 만들고자 합니다. 여기서 한 가지, 머신러닝 모델 트레이닝을 할 때 성별, 인종과 같은 민감한 피처를 제외하는 것이 좋습니다. 앞에서 언급하였던 할당 피해를 방지할 수 있을 것입니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=02-fetch_openml.py\n\n그리고 머신러닝 모델을 트레이닝할 때, 일반적으로 평가를 위해 데이터를 트레이닝 셋과 테스트 셋으로 분리합니다. 예제에서는 30%를 테스트 셋으로 배정하였으며, 인덱스를 정리하는 짧은 코드를 추가하였습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=03-dataset-split.py\n\n데이터 준비가 이제 다 끝났으니, 모델 트레이닝 및 예측이 가능하겠죠? 예제에서는 [Scikit-learn에서 제공하는 분류를 위한 의사결정트리인 DecisionTreeClassifier][scikit-learn-tree]를 사용해 보겠습니다. 구체적인 `min_samples_leaf` 및 `max_depth` 값 등을 튜닝하는 것도 중요하겠지만, 본 포스트에서는 AI 공정성을 위한 평가를 어떻게 하는지에 집중하도록 하겠습니다. 테스트셋으로 예측한 결과들을 정확도, 정밀도, 재현율 등 지표를 통해 확인할 수 있으나, 해당 지표 자체만으로 머신러닝 모델이 공정성을 얼마나 확보하였는지를 이해하기에는 쉽지 않은 것 같습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=04-training.py\n\nJupyter 노트북에서 Fairlearn 라이브러리에서 제공하는 `FairlearnDashboard()` 함수를 사용하면 대시보드를 불러올 수 있습니다. 함수를 호출할 때, 민감한 피처에 대한 데이터셋과 예측 모델을 지정하면 민감한 피처와 측정하고자 하는 성능 항목을 선택하여 성능과 예측에 대한 차이 (disparity)를 확인하는 대시보드를 제공합니다. 각 민감한 피처 값 유형에 따라 살펴보고자 하는 지표가 과소/과대 예측이 되었는지에 대한 성능 차이 및 데이터 선택에 따른 공정성이 있는지에 대한 예측 차이를 확인할 수 있습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=05-fairlearn-dashboard.py\n\n## MLOps 실현을 위한 애저 머신러닝 서비스에 모델 & 실험 업로드 ##\n\n방대한 양의 데이터에서부터 머신러닝 모델이 여러 트레이닝 및 예측, 튜닝 과정을 걸쳐 완성되어도, 실제 서비스화를 위해서는 성능 최적화와 함께 트레이닝 데이터 및 모델에 대한 모니터링 및 관리 등 많은 과정이 있습니다. [애저 머신러닝 서비스][ms-azure-ml-service-page]는 사람, 프로세스, 제품이 함께 결합하여 최종 고객에게 가치를 지속적으로 전달한다는 DevOps를 넘어서, 이러한 전반적인 머신러닝을 고려한 MLOps 실천 사례 경험을 반영한 애저 서비스입니다. 복잡한 데이터셋 변화와 발전하는 머신러닝 모델에 대한 추적 뿐만 아니라, 보다 빠르게 머신러닝 모델을 빌드하고 학습, 배포할 수 있는 다양한 생산적인 환경을 개발자와 데이터 과학자에게 제공하고 있습니다. (MLOps에 대한 자세한 내용은 마이크로소프트에서 AI 플랫폼을 담당하시는 [한석진님][linkedin-seokjin-han]이 공유주신 [MLOps 101 영상][yt-mlops-101-seokjin]을 통해 확인하실 수 있습니다.)\n\n- 실험: 머신러닝을 하는 과정은 1) 데이터셋 준비 2) 모델 트레이닝을 위한 피처 선택 3) 알고리즘 선택 및 파라미터 지정 4) 트레이닝 수행이라는 과정을 거쳐 하나의 머신러닝 모델이 만들어집니다. 이를 애저 머신러닝 서비스에서는 실험이라는 단위로 추상화를 하였습니다. 예를 들어 위 예제에서 테스트셋 비율을 30%로, DecisionTreeClassifier를 사용하여 `min_samples_leaf` 값은 10으로, `max_depth` 값은 4로 지정하였는데, 이 전체를 실행했던 과정을 하나의 실험으로 보는 것입니다. 같은 실험을 반복해서 실행하기도 하며, 데이터셋을 바꿔서 다시 실행하거나, `max_depth` 값을 3으로 바꾸어서 트레이닝을 한다면 또 다른 실험 단위를 실행할 수도 있겠죠.\n\n- 모델: 실험 과정을 거쳐, 반복 & 재사용이 가능한 모델이라는 단위도 생각해볼 수 있습니다. 모델은 1) 어떤 머신러닝 알고리즘을 선택하는지 2) 어떤 파라미터 값을 사용하는지에 대한 내용을 가지는 추상화 단위입니다. 이렇게 모델을 실험과 따로 분리하여 살펴봄으로써, 동일한 모델이 서로 다른 데이터셋을 사용하여 실험할 때 어떤 결과 차이를 보이는지 확인할 수가 있을 것입니다.\n\n무엇보다 애저 머신러닝 서비스는 책임있는 ML을 위한 머신러닝 모델 **이해**, 데이터 **보호**, 전체 과정 **제어**를 위한 쉬운 도구 연계를 염두한 서비스라는 특징을 가지고 있습니다. 위에서 살펴본 Fairlearn의 경우, AI 공정성을 보장하기 위한 머신러닝 모델 이해와 관련이 있는데요, 애저 머신러닝 서비스에서는 Fairlearn 오픈소스와 연동이 가능하여 애저 머신러닝 서비스 UI에서 모델과 실험 단위로 Fairlearn 대시보드를 살펴볼 수 있습니다. 이제부터는 애저 머신러닝 서비스에서 실험과 모델이 어떻게 관리되는지 간단히 살펴보고, 위에서 만든 머신러닝 모델을 애저 머신러닝 서비스에 모델 및 실험 단위로 업로드하여 책임있는 ML을 위해 MLOps를 어떻게 활용할 수 있는지를 살펴보고자 합니다.\n\n업로드를 위해서는 애저 머신러닝 서비스라는 리소스를 만들어야겠죠? 애저 포털에서 애저 머신러닝 서비스를 만드는 방법은 [마이크로소프트 Learn에 설명된 머신러닝 소개 및 작업 영역][ms-learn-azure-ml-workspace] 내용을 참고하실 수 있습니다. 애저 머신러닝 서비스를 쉽게 연결하려면 [azureml-sdk][azureml-sdk-pypi] 및 관련 라이브러리가 필요합니다. 애저 머신러닝 노트북에 대한 한 예제 파일에 나와있는 아래 내용을 통해 의존성있는 라이브러리 목록을 확인할 수 있습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=05-2-upload-fairness-dashboard.yml\n\n애저 머신러닝 서비스 접속 구성을 담고 있는 `config.json` 파일이 필요합니다. 해당 파일은 애저 머신러닝 서비스 리소스를 애저에서 만든 다음 받으셔서 로컬 및 다른 개발 환경에서 연결하실 수도 있으며, 아니면 애저 머신러닝 스튜디오를 실행한 후, Notebooks 탭에서 Jupyter 노트북을 작성하면 추가한 컴퓨팅 자원에서 바로 `config.json` 파일을 불러오실 수도 있습니다.\n\n![Azure Machine Learning Service - config.json 다운로드](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/azure-ml-download-config.png)\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=06-azureml-config.py\n\n그 다음으로, 애저 머신러닝 서비스에 모델을 등록합니다. 이때, 등록할 모델은 이전에 [Scikit-learn에서 제공하는 분류를 위한 의사결정트리인 DecisionTreeClassifier][scikit-learn-tree]를 사용하였고, 구체적인 `min_samples_leaf` 및 `max_depth` 값을 지정하였던, 개체 인스턴스에 대응합니다. 모델을 등록하면 모델 ID 값을 반환하는데, 이 값은 바로 다음에 실험을 추가할 때 사용하므로 변수에 저장해두고자 합니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=07-azure-model-reg.py\n\n애저 머신러닝 서비스에서 Fairlearn에서 실행했던 결과를 포함해 실험으로 관리할 수 있습니다. 이렇게 관리를 하려면 Fairlearn으로 실행한 결과를 계산하여 저장해 두고 있어야겠죠. [fairlearn.metrics][fairlearn-metrics-package] 패키지에 있는 `_create_group_metric_set()` 함수를 통해 미리 계산한 결과를 저장합니다. \n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=08-fairlearn-metric-calc.py\n\n다음으로 애저 머신러닝 서비스에 실험 단위로 업로드합니다. [azureml.core.Experiment 클래스][ms-azureml-core-experiment-class] 인스턴스를 생성한 후, 업로드를 진행합니다. 이 때, 바로 이전에 Fairlearn에서 계산된 결과를 Experiment 인스턴스에 같이 전달합니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=09-azureml-upload.py\n\n이제, 애저 머신러닝 서비스에서 어떻게 보이는지 확인해보면 되겠죠? 애저 머신러닝 스튜디오에서 실험 -> 목록 선택 -> 실행 단위를 선택한 다음, 공정성 탭에 들어가면 확인하실 수 있습니다. 코드 예제와 함께 단계별로 살펴보았는데요, 애저 머신러닝 서비스를 사용한다면 공정성에 대한 부분을 개발자는 Fairlearn으로 관련 지표를 계산하여 업로드하며, 관리자 / 머신러닝 종사자는 애저 머신러닝 스튜디오 UI에서 실험 및 모델 단위로 공정성에 대한 지표를 UI를 통해 쉽게 확인할 수가 있습니다. 또한, 모니터링이나 전체 머신러닝 프로세스를 코드로 잘 관리한다면, 책임있는 ML을 MLOps 실천 사례에 따라 실현할 수 있으며, 구성원 모두 및 외부에도 보다 신뢰있는 AI라고 할 수 있을 것입니다.\n\n![애저 머신러닝 서비스 - 스튜디오에서 공정성 확인](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/azure-ml-studio-fairness.png)\n\n이와 같이, 머신러닝 솔루션이 공정하고 예측의 가치를 이해하고 설명하기 쉽도록 하려면 개발자와 데이터 과학자가 AI 시스템의 공정성을 평가하고 관찰된 불공정 문제를 완화하는 데 사용할 수 있는 프로세스를 도구와 함께 구축하는 것이 중요합니다. 2021년 1월 개최된 CES 2021에서 마이크로소프트 최고법률책임자인 브래드 스미스는 \"기술에는 양심이 없지만 사람에게는 있다\"며 \"기술이 어떤 방식으로 쓰이든 그것은 사람의 책임\"이라고 이야기하였습니다. 이번 포스트에서 소개된 머신러닝 도구 및 실천사례가 잘 활용되어, 보다 공정한, 그리고 편향없는 AI와 함께 모두 지낼 수 있기를 희망합니다.\n\n> 이 포스트에 쓰인 예제 Jupyter 노트북 코드를 [여기](https://github.com/ianychoi/Azure-oss-hands-on-labs/blob/master/06-Azure-ML-with-Fairlearn/fairlearn-quickstart-on-AzureMLStudio.ipynb)에서 확인해 보세요!\n\n그리고 영문으로 되어 있지만, Fairlearn에 대해 자세하게 설명한 많은 내용이 있으며, 해당 내용을 참고하여 본 포스트를 작성하였습니다:\n- [Fairlearn - A Python package to assess AI system's fairness][ms-tc-fairlearn]\n- [Microsoft Docs: What is responsible machine learning?][ms-docs-responsible-ml]\n- [Fairlearn: A toolkit for assessing and improving fairness in AI][ms-research-fairlearn]\n- [Creating Fair Machine Learning Models with Fairlearn][towardsdatascience-tutorial-fairness]\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][ms-az-account-free]\n* 애저 머신러닝 서비스에 관심이 있으신가요? ➡️ [애저 머신러닝 서비스 살펴보기][ms-azure-ml-service-page]\n* 애저에서 머신러닝을 한다는 것은 무엇일까요? ➡️ [한석진님이 쓰신 기고를 살펴보세요][seokjin-azure-and-ml]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms-learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt-msdevkr]\n\n[ms-az-account-free]: https://azure.microsoft.com/ko-kr/free/?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-azure-ml-service-page]: https://azure.microsoft.com/ko-kr/services/machine-learning/?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-learn]: https://docs.microsoft.com/ko-kr/learn/?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[yt-msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[fairlearn-website]: https://fairlearn.github.io\n[fairlearn-github]: https://github.com/fairlearn/fairlearn\n[fairlearn-pypi]: https://pypi.org/project/fairlearn/\n[openml-adult-census-1590]: https://www.openml.org/d/1590\n[scikit-learn-fetch_openml]: https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_openml.html\n[scikit-learn-tree]: https://scikit-learn.org/stable/modules/tree.html\n[scikit-learn-model-evaluation]: https://scikit-learn.org/stable/modules/model_evaluation.html\n[yt-mlops-101-seokjin]: https://www.youtube.com/playlist?list=PLDZRZwFT9Wku509LgbJviEcHxX4AYj3QP\n[azureml-sdk-pypi]: https://pypi.org/project/azureml-sdk/\n[fairlearn-metrics-package]: https://fairlearn.github.io/v0.5.0/api_reference/fairlearn.metrics.html\n[towardsdatascience-tutorial-fairness]: https://towardsdatascience.com/a-tutorial-on-fairness-in-machine-learning-3ff8ba1040cb\n[seokjin-azure-and-ml]: http://it.chosun.com/site/data/html_dir/2020/08/02/2020080200103.html\n[linkedin-soeun-park]: https://www.linkedin.com/in/soeun-park-b55613176/\n[linkedin-seokjin-han]: https://www.linkedin.com/in/seokjinhan/\n\n[ms-ai-approach]: https://www.microsoft.com/ko-kr/ai/our-approach?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-build-korea-2020-azure-track]: https://info.microsoft.com/AP-AzureINFRA-WBNR-FY21-07Jul-23-BuildKorea-SRDEM31279_LP02OnDemandRegistration-ForminBody.html?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-docs-ml-algorithm-evaluation-model-metrics]: https://docs.microsoft.com/en-us/azure/machine-learning/algorithm-module-reference/evaluate-model#metrics?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-learn-azure-ml-workspace]: https://docs.microsoft.com/ko-kr/learn/modules/intro-to-azure-machine-learning-service/2-azure-ml-workspace?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-azureml-core-experiment-class]: https://docs.microsoft.com/ko-kr/python/api/azureml-core/azureml.core.experiment(class)?view=azure-ml-py&ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-tc-fairlearn]: https://techcommunity.microsoft.com/t5/educator-developer-blog/fairlearn-a-python-package-to-assess-ai-system-s-fairness/ba-p/1402950?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-docs-responsible-ml]: https://docs.microsoft.com/en-us/azure/machine-learning/concept-responsible-ml?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-research-fairlearn]: https://www.microsoft.com/en-us/research/publication/fairlearn-a-toolkit-for-assessing-and-improving-fairness-in-ai/?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-azure-ml-jupyter]: https://docs.microsoft.com/ko-kr/azure/machine-learning/how-to-run-jupyter-notebooks/?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n[ms-azure-ml-docs]: https://docs.microsoft.com/ko-kr/azure/machine-learning/?ocid=AID3027813&WT.mc_id=aiml-13829-yechoi\n"},"4b93263d-63e1-47a7-bfbd-04ea135bf25e":{"id":"4b93263d-63e1-47a7-bfbd-04ea135bf25e","index":"Blog","path":"/posts/2021/02/02/websub-to-eventgrid-via-cloudevents-and-beyond/","node":{"title":"WebSub에서 CloudEvents를 통해 이벤트그리드로 전환하고 다양한 소셜 미디어로 알리기","category":"Azure","description":"이 포스트는 유튜브 채널에 새 비디오가 올라왔을 때, 이 이벤트를 CloudEvents 형식으로 변환해서 애저 이벤트그리드로 발행한 후, 로직 앱을 이용해 다양한 소셜 미디어로 확산시키는 일련의 워크플로우에 대해 다룹니다.","content":"\n\n유튜브 채널을 하나 운영하고 있다고 가정하겠습니다. 새 비디오가 하나 업로드 되었을 때, 이를 내가 운영하는 다른 소셜 미디어에 함께 노출 시키고 싶다면 어떻게 하면 좋을까요? 이미 시장에는 이를 위한 다양한 유료 도구들이 많이 나와 있고, 소셜 미디어 마케팅을 전문으로 하는 회사도 많습니다. 게다가 그런 회사의 경우는 자체적인 솔루션도 갖고 있으니, 이를 이용하면 쉽겠죠. 그런데, 만약 여러 가지 이유로 내가 직접 이런 도구들을 만들어서 사용하고 싶다면 어떨까요? 기존의 제품/서비스들이 제공하는 기능이 내 용도와는 다르다면 어떻게 할까요? 이럴 경우에는 한 번 직접 만들어 보는 것도 좋습니다.\n\n이 포스트에서는 유튜브에 새 비디오가 올라올 때부터 다른 소셜 미디어에 노출 시킬 때 까지의 전체적인 워크플로우를 [애저 이벤트그리드][az evtgrd], [애저 펑션][az fncapp], [애저 로직 앱][az logapp] 등의 다양한 애저 서버리스 서비스를 통해 구현해 보기로 하겠습니다.\n\n> 구현한 솔루션의 소스 코드는 이곳 [깃헙 리포지토리][gh sample]에서 다운로드 받아 보세요!\n\n\n## 유튜브 알림 구독 ##\n\n유튜브에서는 [웹훅 알림][yt webhook]을 위해 [PubSubHubbub][pshb]이라는 규약을 사용합니다. 이 규약은 현재 [WebSub][websub]이라는 이름으로 [2016년에 최초 가안][websub wd 1]이 나온 이후 2018년에 웹표준으로 지정됐죠.\n\n유튜브의 모든 채널은 이미 구글이 운영하는 [WebSub 허브][yt websub hub]에 등록이 되어 있으므로, 특정 채널에 대한 비디오 업데이트 알림을 받기 위해서는 이 허브에 [구독 신청][yt websub sub]만 하면 됩니다. 아래 그림과 같이 메시지 처리기(Message Handler) URL을 넣고, 유튜브 채널 URL을 입력한 후 `Do It!` 버튼을 클릭하면 등록이 끝납니다.\n\n![유튜브 WebSub 구독하기][image-01]\n\n단, 여기서 주의해야 할 점이 하나 있습니다. 메시지 처리기 URL로 호출하는 애플리케이션은 구독 등록이 끝남과 동시에 [유효성 검증][websub verification]을 위한 API 호출을 받게 되는데, 이를 통과해야만 구독 절차가 완전히 끝나게 됩니다. 이 유효성 검증을 통과하지 못하면 아무리 구독을 해도 알림을 받을 수 없습니다.\n\n\n## WebSub 구독 요청 검증 ##\n\nWebSub 구독 요청에 대한 검증을 위해서 메시지 처리기 URL은 검증 요청이 들어왔을 때 아래와 같은 내용을 처리해 줘야 합니다.\n\n* 검증 요청은 `GET` 메소드로 아래와 같은 쿼리스트링 파라미터를 전송하는데요,\n  * `hub.mode`: `subscribe` 문자열\n  * `hub.topic`: 구독하고자 하는 유튜브 채널 URL\n  * `hub.challenge`: WebSub 허브에서 생성한 임의의 문자열로 구독 요청에 대한 검증에 사용합니다\n  * `hub.lease_seconds`: 구독 요청 유효 기간으로 이 기간 안에 구독 요청에 대한 검증을 통과하지 못하면 이 요청은 자동으로 폐기됩니다\n* 검증 요청에 대한 응답으로 응답 개체 본문에 `hub.challenge` 값만 추가해서 200 응답 코드와 함께 반환합니다\n  * 응답 개체 본문에 `hub.challenge` 이외의 다른 값이 들어가면 이 응답은 WebSub 허브에서 유효한 응답으로 처리하지 않습니다\n\n이 구독 요청 검증 로직을 [애저 펑션][az fncapp]으로 구현해 보면 대략 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=01-callback-1.cs\n\n위와 같이 메시지 처리를 위한 구독 요청 검증에 성공했다면, WebSub 허브는 앞으로 계속해서 유튜브 채널에 새 비디오가 올라올 때마다 알림 이벤트를 메시지 처리기 쪽으로 보내게 되죠.\n\n\n## WebSub 알림 피드 변환 ##\n\nWebSub 역시도 어디까지나 [발행자/구독자(Publisher/Subscriber; Pub/Sub) 패턴][eip pubsub]을 따르기 때문에 크게 새로울 것은 없습니다. 다만, WebSub으로 주고 받는 데이터는 ATOM 피드 형식을 따르기 때문에 구독자가 ATOM 피드 형식의 XML 문서를 해석해서 처리할 수만 있으면 됩니다. 그런데, 이벤트 구독자 쪽에 ATOM 피트 형태의 XML 데이터를 강제하는 것은 이벤트 발행자와 구독자 사이에 강한 커플링을 유도합니다. 구독자가 어떤 식으로 데이터를 처리할 지 알 수 없는 상황에서 이를 강제하는 것은 바람직하지 않기 때문에, 중간에 표준 데이터 형식 혹은 캐노니컬 데이터 형식으로 바꿔주는 것이 좋습니다.\n\n따라서, 여기서는 [CloudEvents][ce] 형식을 이용해서 캐노니컬 데이터 형식으로 변환합니다. 이 포스트에서는 이 캐노니컬 데이터 변환 과정을 두 단계로 나눴는데, 하나씩 설명해 보기로 하겠습니다.\n\n\n### 1. WebSub 알림 피드 ➡️ CloudEvents 형식 변환 ##\n\n이 첫번째 단계의 목적은 WebSub에 대한 의존성을 끊어내는 데 있습니다. 따라서, WebSub에서 전달된 ATOM 피드의 XML 데이터를 별다른 변환 없이 그대로 CloudEvents 형식에 담습니다. 유튜브에 새 비디오가 올라왔을 때 WebSub을 통해 받는 알림 피드의 데이터는 대략 아래와 비슷하게 생겼습니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=02-websub-feed.xml\n\n이 요청 데이터를 아래와 같이 단순 문자열로 받아 냅니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=03-callback-2.cs\n\n이와 더불어 알림 피드 요청 헤더는 아래와 같은 값을 포함하고 있는데요,\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=04-websub-request-header.txt\n\n이 헤더 값을 아래와 같이 추출해 냅니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=05-callback-3.cs\n\n그리고 아래와 같이 이벤트 타입과 이벤트 데이터 타입을 설정합니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=06-callback-4.cs\n\n[지난 포스트][post prev 1]에서 언급한 바와 같이 현재 [애저 펑션][az fncapp]의 [이벤트그리드 바인딩][az fncapp binding evtgrd]은 [CloudEvents 형식을 아직 지원하지 않기 때문에][az evtgrd ce], 아래와 같이 펑션 코드 안에서 직접 처리를 해 줘야 합니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=07-callback-5.cs\n\n여기까지 해서, WebSub에서 받아온 이벤트 데이터를 그대로 CloudEvents를 이용한 캐노니컬 형식으로 변환해서 애저 이벤트그리드로 다시 보냅니다. 이렇게 보내진 CloudEvents 형식 데이터는 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=08-cloudevents-from-websub.json\n\n여기까지 해서 아래와 같은 변환 절차가 끝났습니다.\n\n![유튜브 WebSub에서 애저 이벤트그리드로 변환하기][image-02]\n\n이제 다음 단계로 넘어가도록 하지요.\n\n\n### 2. WebSub XML 데이터 가공 ##\n\n두 번째 단계에서는 WebSub XML 데이터를 소셜 미디어 확산을 위해 필요한 데이터 형태로 가공하는 일을 합니다.\n\n앞서 받아온 WebSub 데이터에는 비디오 ID, 채널 ID 등과 같은 제한적인 정보만 들어있습니다. 따라서, 이를 이용해서 구체적인 정보를 YouTube API를 통해 받아와야 다음 단계의 소셜 미디어 노출에 필요한 데이터를 가공할 수 있습니다. [애저 이벤트그리드][az evtgrd]에 발행된 이벤트 데이터를 받아 처리하려면 우선 이벤트 처리기를 등록해야 합니다. 이 등록 과정도 앞서 WebSub 구독 등록 절차와 같이 [유효성 검사][az evtgrd delivery auth]가 필요합니다. 그런데, 이벤트 처리기로 [애저 로직 앱][az logapp]을 선택하면 이 유효성 검사 부분을 내부적으로 처리를 해주기 때문에 여기서는 로직 앱을 이용하면 편리합니다.\n\n로직 앱 이벤트 처리기에서 처음 하는 일은 이벤트그리드에서 받아온 이벤트 데이터가 내가 필요로 하는 데이터인지를 확인하는 것입니다. 내가 필요로 하는 이벤트 데이터라면 채널 정보와 이벤트 타입이 맞아야 합니다. 내가 필요로 하는 데이터가 아니라면 더이상 로직 앱 워크플로우를 실행하지 않고 멈추게 됩니다.\n\n![이벤트 데이터 확인하기][image-03]\n\n내가 처리하고자 하는 이벤트 데이터라면 이를 애저 펑션으로 보내 데이터를 가공합니다.\n\n![이벤트 데이터 가공하기][image-04]\n\n애저 펑션에서는 유튜브 API를 이용해서 비디오의 구체적인 정보를 받아와 가공한 후 다시 로직 앱으로 데이터를 반환합니다. 애저 펑션이 반환하는 데이터는 대략 아래와 같이 생겼습니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=09-video-details.json\n\n여기까지 해서 대략 이벤트 데이터를 가공하는 작업이 끝났습니다.\n\n![이벤트 데이터 가공하기 다이어그램][image-05]\n\n\n## 소셜 미디어 노출 ##\n\n이 로직 앱이 해야 하는 나머지 일은 다른 소셜 미디어 확산 도구들이 이 데이터를 받아 처리할 수 있게끔 해 주는 것인데요, 여기에는 두 가지 방법이 있습니다.\n\n* 이 로직 앱에 직접 다른 소셜 미디어 노출을 위한 API를 연결하는 것\n* 소셜 미디어에 노출시키기 위한 도구들이 이용할 수 있게끔 이벤트를 던지는 것\n\n첫 번째 방법은 의존성이 생깁니다. 만약, 새로운 도구가 추가된다거나, 기존 도구를 제거한다거나 하면 이 로직 앱을 반드시 수정해야 합니다. 이는 유지보수 측면에서는 그다지 좋은 방법은 아니죠. 반면에 두 번째 방법은 다시 이벤트를 생성해서 뿌리면, 다른 소셜 미디어 확산 도구들이 각자 알아서 이 이벤트를 받아 처리하면 되기 때문에 의존성을 없앨 수 있습니다. 복잡도가 한 단계 증가하기는 하지만, 유지보수 측면에서는 굉장히 편리합니다. 따라서, 여기서는 두 번째 방법을 선택했습니다.\n\n\n### 1. 이벤트그리드로 가공된 데이터 발행하기 ###\n\n이벤트그리드로 다시 이벤트 데이터를 발행하기 위해서는 우선 CloudEvents 형식으로 데이터를 구성해야 합니다. 앞서 받아온 데이터는 말 그대로 데이터를 가공만 한 것이고, 아래 로직 앱 액션에서 CloudEvents 형식으로 데이터를 가공합니다.\n\n![CloudEvents 형식으로 변환하기][image-06]\n\n마지막으로 이 이벤트 데이터를 애저 이벤트그리드로 보내는 액션을 만들어 보면 아래와 같습니다. 아래 그림에 보면 헤더 영역에 `ce-`로 시작하는 다양한 메타 데이터가 보이는데, 이는 CloudEvents 데이터 전송시 [교차 검증][ce binding http]과 관련된 규약 때문입니다.\n\n![이벤트그리드로 데이터 보내기][image-07]\n\n이렇게 이벤트그리드로 데이터를 보내고 나면 개별 소셜 미디어 처리기에서 이 이벤트 데이터를 처리할 준비가 된 셈인데요, 다음에서 개별 소셜 미디어 처리기가 어떻게 대응하는 지 볼 수 있습니다.\n\n![이벤트그리드로 데이터 보내기 다이어그램][image-08]\n\n\n### 2. 개별 소셜 미디어 처리기 ###\n\n앞서 소셜 미디어에서 처리할 수 있을 정도로 데이터를 가공해서 이벤트그리드로 보냈다면, 개별 소셜 미디어 처리기는 각자 상황에 맞게 이 데이터를 받아 처리하면 됩니다. 이벤트그리드에서 받아온 데이터는 대략 아래와 같이 생겼습니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=10-video-details-to-cloudevents.json\n\n\n#### 트위터 ####\n\n로직 앱은 [트위터 커넥터][az logapp connector twitter]를 자체 제공하고 있으므로 별도로 API 호출을 위한 코드를 만들 필요가 없습니다. 따라서, 아래와 같이 간단하게 호출하면 됩니다.\n\n![트위터 포스팅하기][image-09]\n\n\n#### 링크드인 ####\n\n로직 앱은 [링크드인 커넥터][az logapp connector linkedin]도 자체 제공하고 있으므로 별도로 API 호출을 위한 코드를 만들 필요가 없습니다. 따라서, 아래와 같이 간단하게 호출하면 된다.\n\n![링크드인 포스팅하기][image-10]\n\n\n#### 페이스북 ####\n\n반면에 로직 앱의 [페이스북 커넥터][az logapp connector facebook]는 더이상 사용할 수 없습니다. 따라서, [오픈소스로 풀린 커스텀 커넥터][az logapp connector facebook custom]를 이용하거나 다른 방법을 쓰는 수 밖에 없는데, 마침 [IFTTT][ifttt]에서 [페이스북 페이지로 포스팅][ifttt facebook page]하는 커넥터를 사용할 수 있으니, 이를 이용하기로 하겠습니다.\n\n![IFTTT 페이스북 커넥터][image-11]\n\n로직 앱 관점에서는 IFTTT 쪽으로 HTTP 요청만 보내면 되기 때문에 별다른 어려움은 없습니다. 다만, `value1`, `value2`, `value3` 어트리뷰트만 사용 가능하다는 점 주의하세요!\n\n![페이스북 포스팅하기][image-12]\n\n실제로 IFTTT 쪽에서 이 요청을 받아 처리한 결과는 아래와 같이 보입니다.\n\n![IFTTT에서 페이스북 포스팅하기][image-14]\n\n이렇게 해서 트위터, 링크드인, 페이스북 등 소셜 미디어로 새 유튜브 비디오가 올라왔을 경우 포스팅하는 방법을 구현해 보았습니다.\n\n![E2E 이벤트 처리 절차][image-13]\n\n---\n\n지금까지 [애저 이벤트그리드][az evtgrd], [애저 펑션][az fncapp], [애저 로직 앱][az logapp] 등을 사용해서 특정 유튜브 채널에 새 비디오가 올라왔을 때, 이를 WebSub 이벤트로 받으면, 1) 이를 CloudEvents 형식으로 변환해서 애저 이벤트그리드로 보내고, 2) 필요한 형태로 변환한 후, 3) 원하는 소셜 미디어로 포스팅하는 전체적인 워크플로우를 구현해 보았습니다. 각각의 단계는 모두 디커플링을 시켜놓았기 때문에 유지 보수 차원에서 의존성을 고려할 필요가 없을 뿐더러, 향후 새로운 소셜 미디어 채널로 포스팅을 계획할 경우에도 손쉽게 추가할 수 있는 구조를 만들었습니다.\n\n만약 이런 온라인 컨텐츠 마케팅을 기획하고 있다면 이와 비슷한 형태로 애플리케이션을 구현해 보는 것도 좋은 시도가 될 것입니다. 또한, 이를 통해 전체적인 클라우드 시스템 아키텍처를 구성하는 방법에 대해서도 고민해 볼 수 있을 것입니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-02-ko.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-04.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-05-ko.png\n[image-06]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-06.png\n[image-07]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-07.png\n[image-08]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-08-ko.png\n[image-09]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-09.png\n[image-10]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-10.png\n[image-11]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-11.png\n[image-12]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-12.png\n[image-13]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-13-ko.png\n[image-14]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-14.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[post prev 1]: /developerkorea/posts/2021/01/19/cloudevents-for-azure-eventgrid-via-azure-functions/\n\n[gh sample]: https://github.com/devrel-kr/youtube-websub-subscription-handler\n\n[pshb]: https://github.com/pubsubhubbub/PubSubHubbub\n[websub]: https://www.w3.org/TR/websub/\n[websub wd 1]: https://www.w3.org/TR/2016/WD-pubsub-20161020/\n[websub verification]: https://indieweb.org/How_to_publish_and_consume_WebSub#The_hub_verifies_the_subscription_request\n\n[eip pubsub]: https://www.enterpriseintegrationpatterns.com/patterns/messaging/PublishSubscribeChannel.html\n\n[yt webhook]: https://developers.google.com/youtube/v3/guides/push_notifications\n[yt websub hub]: https://pubsubhubbub.appspot.com/\n[yt websub sub]: https://pubsubhubbub.appspot.com/subscribe\n\n[ce]: https://cloudevents.io/\n[ce binding http]: https://github.com/cloudevents/spec/blob/master/http-protocol-binding.md#3-http-message-mapping\n\n[az evtgrd]: https://docs.microsoft.com/ko-kr/azure/event-grid/overview?WT.mc_id=devops-dotnet-12869-juyoo&ocid=AID3027813\n[az evtgrd ce]: https://docs.microsoft.com/ko-kr/azure/event-grid/cloudevents-schema?WT.mc_id=devops-dotnet-12869-juyoo&ocid=AID3027813#use-with-azure-functions\n[az evtgrd delivery auth]: https://docs.microsoft.com/ko-kr/azure/event-grid/security-authentication?WT.mc_id=devops-dotnet-12869-juyoo&ocid=AID3027813\n\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=dotnet-12869-juyoo&ocid=AID3027813\n[az logapp connector twitter]: https://docs.microsoft.com/ko-kr/connectors/twitter/?WT.mc_id=dotnet-12869-juyoo&ocid=AID3027813\n[az logapp connector linkedin]: https://docs.microsoft.com/ko-kr/connectors/linkedinv2/?WT.mc_id=dotnet-12869-juyoo&ocid=AID3027813\n[az logapp connector facebook]: https://docs.microsoft.com/ko-kr/connectors/facebook/?WT.mc_id=dotnet-12869-juyoo&ocid=AID3027813\n[az logapp connector facebook custom]: https://github.com/microsoft/PowerPlatformConnectors/tree/master/custom-connectors/Facebook\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-12869-juyoo&ocid=AID3027813\n[az fncapp binding evtgrd]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-event-grid?WT.mc_id=dotnet-12869-juyoo&ocid=AID3027813\n\n[ifttt]: https://ifttt.com/\n[ifttt facebook page]: https://ifttt.com/facebook_pages\n"},"title":"WebSub에서 CloudEvents를 통해 이벤트그리드로 전환하고 다양한 소셜 미디어로 알리기","content":"\n\n유튜브 채널을 하나 운영하고 있다고 가정하겠습니다. 새 비디오가 하나 업로드 되었을 때, 이를 내가 운영하는 다른 소셜 미디어에 함께 노출 시키고 싶다면 어떻게 하면 좋을까요? 이미 시장에는 이를 위한 다양한 유료 도구들이 많이 나와 있고, 소셜 미디어 마케팅을 전문으로 하는 회사도 많습니다. 게다가 그런 회사의 경우는 자체적인 솔루션도 갖고 있으니, 이를 이용하면 쉽겠죠. 그런데, 만약 여러 가지 이유로 내가 직접 이런 도구들을 만들어서 사용하고 싶다면 어떨까요? 기존의 제품/서비스들이 제공하는 기능이 내 용도와는 다르다면 어떻게 할까요? 이럴 경우에는 한 번 직접 만들어 보는 것도 좋습니다.\n\n이 포스트에서는 유튜브에 새 비디오가 올라올 때부터 다른 소셜 미디어에 노출 시킬 때 까지의 전체적인 워크플로우를 [애저 이벤트그리드][az evtgrd], [애저 펑션][az fncapp], [애저 로직 앱][az logapp] 등의 다양한 애저 서버리스 서비스를 통해 구현해 보기로 하겠습니다.\n\n> 구현한 솔루션의 소스 코드는 이곳 [깃헙 리포지토리][gh sample]에서 다운로드 받아 보세요!\n\n\n## 유튜브 알림 구독 ##\n\n유튜브에서는 [웹훅 알림][yt webhook]을 위해 [PubSubHubbub][pshb]이라는 규약을 사용합니다. 이 규약은 현재 [WebSub][websub]이라는 이름으로 [2016년에 최초 가안][websub wd 1]이 나온 이후 2018년에 웹표준으로 지정됐죠.\n\n유튜브의 모든 채널은 이미 구글이 운영하는 [WebSub 허브][yt websub hub]에 등록이 되어 있으므로, 특정 채널에 대한 비디오 업데이트 알림을 받기 위해서는 이 허브에 [구독 신청][yt websub sub]만 하면 됩니다. 아래 그림과 같이 메시지 처리기(Message Handler) URL을 넣고, 유튜브 채널 URL을 입력한 후 `Do It!` 버튼을 클릭하면 등록이 끝납니다.\n\n![유튜브 WebSub 구독하기][image-01]\n\n단, 여기서 주의해야 할 점이 하나 있습니다. 메시지 처리기 URL로 호출하는 애플리케이션은 구독 등록이 끝남과 동시에 [유효성 검증][websub verification]을 위한 API 호출을 받게 되는데, 이를 통과해야만 구독 절차가 완전히 끝나게 됩니다. 이 유효성 검증을 통과하지 못하면 아무리 구독을 해도 알림을 받을 수 없습니다.\n\n\n## WebSub 구독 요청 검증 ##\n\nWebSub 구독 요청에 대한 검증을 위해서 메시지 처리기 URL은 검증 요청이 들어왔을 때 아래와 같은 내용을 처리해 줘야 합니다.\n\n* 검증 요청은 `GET` 메소드로 아래와 같은 쿼리스트링 파라미터를 전송하는데요,\n  * `hub.mode`: `subscribe` 문자열\n  * `hub.topic`: 구독하고자 하는 유튜브 채널 URL\n  * `hub.challenge`: WebSub 허브에서 생성한 임의의 문자열로 구독 요청에 대한 검증에 사용합니다\n  * `hub.lease_seconds`: 구독 요청 유효 기간으로 이 기간 안에 구독 요청에 대한 검증을 통과하지 못하면 이 요청은 자동으로 폐기됩니다\n* 검증 요청에 대한 응답으로 응답 개체 본문에 `hub.challenge` 값만 추가해서 200 응답 코드와 함께 반환합니다\n  * 응답 개체 본문에 `hub.challenge` 이외의 다른 값이 들어가면 이 응답은 WebSub 허브에서 유효한 응답으로 처리하지 않습니다\n\n이 구독 요청 검증 로직을 [애저 펑션][az fncapp]으로 구현해 보면 대략 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=01-callback-1.cs\n\n위와 같이 메시지 처리를 위한 구독 요청 검증에 성공했다면, WebSub 허브는 앞으로 계속해서 유튜브 채널에 새 비디오가 올라올 때마다 알림 이벤트를 메시지 처리기 쪽으로 보내게 되죠.\n\n\n## WebSub 알림 피드 변환 ##\n\nWebSub 역시도 어디까지나 [발행자/구독자(Publisher/Subscriber; Pub/Sub) 패턴][eip pubsub]을 따르기 때문에 크게 새로울 것은 없습니다. 다만, WebSub으로 주고 받는 데이터는 ATOM 피드 형식을 따르기 때문에 구독자가 ATOM 피드 형식의 XML 문서를 해석해서 처리할 수만 있으면 됩니다. 그런데, 이벤트 구독자 쪽에 ATOM 피트 형태의 XML 데이터를 강제하는 것은 이벤트 발행자와 구독자 사이에 강한 커플링을 유도합니다. 구독자가 어떤 식으로 데이터를 처리할 지 알 수 없는 상황에서 이를 강제하는 것은 바람직하지 않기 때문에, 중간에 표준 데이터 형식 혹은 캐노니컬 데이터 형식으로 바꿔주는 것이 좋습니다.\n\n따라서, 여기서는 [CloudEvents][ce] 형식을 이용해서 캐노니컬 데이터 형식으로 변환합니다. 이 포스트에서는 이 캐노니컬 데이터 변환 과정을 두 단계로 나눴는데, 하나씩 설명해 보기로 하겠습니다.\n\n\n### 1. WebSub 알림 피드 ➡️ CloudEvents 형식 변환 ##\n\n이 첫번째 단계의 목적은 WebSub에 대한 의존성을 끊어내는 데 있습니다. 따라서, WebSub에서 전달된 ATOM 피드의 XML 데이터를 별다른 변환 없이 그대로 CloudEvents 형식에 담습니다. 유튜브에 새 비디오가 올라왔을 때 WebSub을 통해 받는 알림 피드의 데이터는 대략 아래와 비슷하게 생겼습니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=02-websub-feed.xml\n\n이 요청 데이터를 아래와 같이 단순 문자열로 받아 냅니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=03-callback-2.cs\n\n이와 더불어 알림 피드 요청 헤더는 아래와 같은 값을 포함하고 있는데요,\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=04-websub-request-header.txt\n\n이 헤더 값을 아래와 같이 추출해 냅니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=05-callback-3.cs\n\n그리고 아래와 같이 이벤트 타입과 이벤트 데이터 타입을 설정합니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=06-callback-4.cs\n\n[지난 포스트][post prev 1]에서 언급한 바와 같이 현재 [애저 펑션][az fncapp]의 [이벤트그리드 바인딩][az fncapp binding evtgrd]은 [CloudEvents 형식을 아직 지원하지 않기 때문에][az evtgrd ce], 아래와 같이 펑션 코드 안에서 직접 처리를 해 줘야 합니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=07-callback-5.cs\n\n여기까지 해서, WebSub에서 받아온 이벤트 데이터를 그대로 CloudEvents를 이용한 캐노니컬 형식으로 변환해서 애저 이벤트그리드로 다시 보냅니다. 이렇게 보내진 CloudEvents 형식 데이터는 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=08-cloudevents-from-websub.json\n\n여기까지 해서 아래와 같은 변환 절차가 끝났습니다.\n\n![유튜브 WebSub에서 애저 이벤트그리드로 변환하기][image-02]\n\n이제 다음 단계로 넘어가도록 하지요.\n\n\n### 2. WebSub XML 데이터 가공 ##\n\n두 번째 단계에서는 WebSub XML 데이터를 소셜 미디어 확산을 위해 필요한 데이터 형태로 가공하는 일을 합니다.\n\n앞서 받아온 WebSub 데이터에는 비디오 ID, 채널 ID 등과 같은 제한적인 정보만 들어있습니다. 따라서, 이를 이용해서 구체적인 정보를 YouTube API를 통해 받아와야 다음 단계의 소셜 미디어 노출에 필요한 데이터를 가공할 수 있습니다. [애저 이벤트그리드][az evtgrd]에 발행된 이벤트 데이터를 받아 처리하려면 우선 이벤트 처리기를 등록해야 합니다. 이 등록 과정도 앞서 WebSub 구독 등록 절차와 같이 [유효성 검사][az evtgrd delivery auth]가 필요합니다. 그런데, 이벤트 처리기로 [애저 로직 앱][az logapp]을 선택하면 이 유효성 검사 부분을 내부적으로 처리를 해주기 때문에 여기서는 로직 앱을 이용하면 편리합니다.\n\n로직 앱 이벤트 처리기에서 처음 하는 일은 이벤트그리드에서 받아온 이벤트 데이터가 내가 필요로 하는 데이터인지를 확인하는 것입니다. 내가 필요로 하는 이벤트 데이터라면 채널 정보와 이벤트 타입이 맞아야 합니다. 내가 필요로 하는 데이터가 아니라면 더이상 로직 앱 워크플로우를 실행하지 않고 멈추게 됩니다.\n\n![이벤트 데이터 확인하기][image-03]\n\n내가 처리하고자 하는 이벤트 데이터라면 이를 애저 펑션으로 보내 데이터를 가공합니다.\n\n![이벤트 데이터 가공하기][image-04]\n\n애저 펑션에서는 유튜브 API를 이용해서 비디오의 구체적인 정보를 받아와 가공한 후 다시 로직 앱으로 데이터를 반환합니다. 애저 펑션이 반환하는 데이터는 대략 아래와 같이 생겼습니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=09-video-details.json\n\n여기까지 해서 대략 이벤트 데이터를 가공하는 작업이 끝났습니다.\n\n![이벤트 데이터 가공하기 다이어그램][image-05]\n\n\n## 소셜 미디어 노출 ##\n\n이 로직 앱이 해야 하는 나머지 일은 다른 소셜 미디어 확산 도구들이 이 데이터를 받아 처리할 수 있게끔 해 주는 것인데요, 여기에는 두 가지 방법이 있습니다.\n\n* 이 로직 앱에 직접 다른 소셜 미디어 노출을 위한 API를 연결하는 것\n* 소셜 미디어에 노출시키기 위한 도구들이 이용할 수 있게끔 이벤트를 던지는 것\n\n첫 번째 방법은 의존성이 생깁니다. 만약, 새로운 도구가 추가된다거나, 기존 도구를 제거한다거나 하면 이 로직 앱을 반드시 수정해야 합니다. 이는 유지보수 측면에서는 그다지 좋은 방법은 아니죠. 반면에 두 번째 방법은 다시 이벤트를 생성해서 뿌리면, 다른 소셜 미디어 확산 도구들이 각자 알아서 이 이벤트를 받아 처리하면 되기 때문에 의존성을 없앨 수 있습니다. 복잡도가 한 단계 증가하기는 하지만, 유지보수 측면에서는 굉장히 편리합니다. 따라서, 여기서는 두 번째 방법을 선택했습니다.\n\n\n### 1. 이벤트그리드로 가공된 데이터 발행하기 ###\n\n이벤트그리드로 다시 이벤트 데이터를 발행하기 위해서는 우선 CloudEvents 형식으로 데이터를 구성해야 합니다. 앞서 받아온 데이터는 말 그대로 데이터를 가공만 한 것이고, 아래 로직 앱 액션에서 CloudEvents 형식으로 데이터를 가공합니다.\n\n![CloudEvents 형식으로 변환하기][image-06]\n\n마지막으로 이 이벤트 데이터를 애저 이벤트그리드로 보내는 액션을 만들어 보면 아래와 같습니다. 아래 그림에 보면 헤더 영역에 `ce-`로 시작하는 다양한 메타 데이터가 보이는데, 이는 CloudEvents 데이터 전송시 [교차 검증][ce binding http]과 관련된 규약 때문입니다.\n\n![이벤트그리드로 데이터 보내기][image-07]\n\n이렇게 이벤트그리드로 데이터를 보내고 나면 개별 소셜 미디어 처리기에서 이 이벤트 데이터를 처리할 준비가 된 셈인데요, 다음에서 개별 소셜 미디어 처리기가 어떻게 대응하는 지 볼 수 있습니다.\n\n![이벤트그리드로 데이터 보내기 다이어그램][image-08]\n\n\n### 2. 개별 소셜 미디어 처리기 ###\n\n앞서 소셜 미디어에서 처리할 수 있을 정도로 데이터를 가공해서 이벤트그리드로 보냈다면, 개별 소셜 미디어 처리기는 각자 상황에 맞게 이 데이터를 받아 처리하면 됩니다. 이벤트그리드에서 받아온 데이터는 대략 아래와 같이 생겼습니다.\n\nhttps://gist.github.com/justinyoo/cb04844306f9a44dcdcaaa70a6a55326?file=10-video-details-to-cloudevents.json\n\n\n#### 트위터 ####\n\n로직 앱은 [트위터 커넥터][az logapp connector twitter]를 자체 제공하고 있으므로 별도로 API 호출을 위한 코드를 만들 필요가 없습니다. 따라서, 아래와 같이 간단하게 호출하면 됩니다.\n\n![트위터 포스팅하기][image-09]\n\n\n#### 링크드인 ####\n\n로직 앱은 [링크드인 커넥터][az logapp connector linkedin]도 자체 제공하고 있으므로 별도로 API 호출을 위한 코드를 만들 필요가 없습니다. 따라서, 아래와 같이 간단하게 호출하면 된다.\n\n![링크드인 포스팅하기][image-10]\n\n\n#### 페이스북 ####\n\n반면에 로직 앱의 [페이스북 커넥터][az logapp connector facebook]는 더이상 사용할 수 없습니다. 따라서, [오픈소스로 풀린 커스텀 커넥터][az logapp connector facebook custom]를 이용하거나 다른 방법을 쓰는 수 밖에 없는데, 마침 [IFTTT][ifttt]에서 [페이스북 페이지로 포스팅][ifttt facebook page]하는 커넥터를 사용할 수 있으니, 이를 이용하기로 하겠습니다.\n\n![IFTTT 페이스북 커넥터][image-11]\n\n로직 앱 관점에서는 IFTTT 쪽으로 HTTP 요청만 보내면 되기 때문에 별다른 어려움은 없습니다. 다만, `value1`, `value2`, `value3` 어트리뷰트만 사용 가능하다는 점 주의하세요!\n\n![페이스북 포스팅하기][image-12]\n\n실제로 IFTTT 쪽에서 이 요청을 받아 처리한 결과는 아래와 같이 보입니다.\n\n![IFTTT에서 페이스북 포스팅하기][image-14]\n\n이렇게 해서 트위터, 링크드인, 페이스북 등 소셜 미디어로 새 유튜브 비디오가 올라왔을 경우 포스팅하는 방법을 구현해 보았습니다.\n\n![E2E 이벤트 처리 절차][image-13]\n\n---\n\n지금까지 [애저 이벤트그리드][az evtgrd], [애저 펑션][az fncapp], [애저 로직 앱][az logapp] 등을 사용해서 특정 유튜브 채널에 새 비디오가 올라왔을 때, 이를 WebSub 이벤트로 받으면, 1) 이를 CloudEvents 형식으로 변환해서 애저 이벤트그리드로 보내고, 2) 필요한 형태로 변환한 후, 3) 원하는 소셜 미디어로 포스팅하는 전체적인 워크플로우를 구현해 보았습니다. 각각의 단계는 모두 디커플링을 시켜놓았기 때문에 유지 보수 차원에서 의존성을 고려할 필요가 없을 뿐더러, 향후 새로운 소셜 미디어 채널로 포스팅을 계획할 경우에도 손쉽게 추가할 수 있는 구조를 만들었습니다.\n\n만약 이런 온라인 컨텐츠 마케팅을 기획하고 있다면 이와 비슷한 형태로 애플리케이션을 구현해 보는 것도 좋은 시도가 될 것입니다. 또한, 이를 통해 전체적인 클라우드 시스템 아키텍처를 구성하는 방법에 대해서도 고민해 볼 수 있을 것입니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-02-ko.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-04.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-05-ko.png\n[image-06]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-06.png\n[image-07]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-07.png\n[image-08]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-08-ko.png\n[image-09]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-09.png\n[image-10]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-10.png\n[image-11]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-11.png\n[image-12]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-12.png\n[image-13]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-13-ko.png\n[image-14]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/websub-to-eventgrid-via-cloudevents-and-beyond-14.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[post prev 1]: /developerkorea/posts/2021/01/19/cloudevents-for-azure-eventgrid-via-azure-functions/\n\n[gh sample]: https://github.com/devrel-kr/youtube-websub-subscription-handler\n\n[pshb]: https://github.com/pubsubhubbub/PubSubHubbub\n[websub]: https://www.w3.org/TR/websub/\n[websub wd 1]: https://www.w3.org/TR/2016/WD-pubsub-20161020/\n[websub verification]: https://indieweb.org/How_to_publish_and_consume_WebSub#The_hub_verifies_the_subscription_request\n\n[eip pubsub]: https://www.enterpriseintegrationpatterns.com/patterns/messaging/PublishSubscribeChannel.html\n\n[yt webhook]: https://developers.google.com/youtube/v3/guides/push_notifications\n[yt websub hub]: https://pubsubhubbub.appspot.com/\n[yt websub sub]: https://pubsubhubbub.appspot.com/subscribe\n\n[ce]: https://cloudevents.io/\n[ce binding http]: https://github.com/cloudevents/spec/blob/master/http-protocol-binding.md#3-http-message-mapping\n\n[az evtgrd]: https://docs.microsoft.com/ko-kr/azure/event-grid/overview?WT.mc_id=devops-dotnet-12869-juyoo&ocid=AID3027813\n[az evtgrd ce]: https://docs.microsoft.com/ko-kr/azure/event-grid/cloudevents-schema?WT.mc_id=devops-dotnet-12869-juyoo&ocid=AID3027813#use-with-azure-functions\n[az evtgrd delivery auth]: https://docs.microsoft.com/ko-kr/azure/event-grid/security-authentication?WT.mc_id=devops-dotnet-12869-juyoo&ocid=AID3027813\n\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=dotnet-12869-juyoo&ocid=AID3027813\n[az logapp connector twitter]: https://docs.microsoft.com/ko-kr/connectors/twitter/?WT.mc_id=dotnet-12869-juyoo&ocid=AID3027813\n[az logapp connector linkedin]: https://docs.microsoft.com/ko-kr/connectors/linkedinv2/?WT.mc_id=dotnet-12869-juyoo&ocid=AID3027813\n[az logapp connector facebook]: https://docs.microsoft.com/ko-kr/connectors/facebook/?WT.mc_id=dotnet-12869-juyoo&ocid=AID3027813\n[az logapp connector facebook custom]: https://github.com/microsoft/PowerPlatformConnectors/tree/master/custom-connectors/Facebook\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-12869-juyoo&ocid=AID3027813\n[az fncapp binding evtgrd]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-event-grid?WT.mc_id=dotnet-12869-juyoo&ocid=AID3027813\n\n[ifttt]: https://ifttt.com/\n[ifttt facebook page]: https://ifttt.com/facebook_pages\n"},"93b2d263-3996-4e97-93ce-87676213d1f3":{"id":"93b2d263-3996-4e97-93ce-87676213d1f3","index":"Blog","path":"/posts/2021/02/09/creating-custom-connector-from-azure-functions-with-swagger/","node":{"title":"애저 펑션에 Open API 확장 기능을 이용해 파워 플랫폼용 커스텀 커넥터 곧바로 생성하기","category":"Power Platform","description":"이 포스트에서는 애저 펑션 API에 Open API 확장 기능을 통합해서 파워 플랫폼에 사용할 커스텀 커넥터를 생성하는 방법에 대해 알아봅니다.","content":"\n\n[애저 펑션을 위한 Open API 확장 기능][gh openapi]을 사용하면 좋은 점 중에 하나가 바로 [애저 펑션][az func]으로 API를 개발할 때 이 API의 발견가능성(discoverability)을 높여준다는 것입니다. 따라서, 이를 이용하면 굉장히 손쉽게 [애저 API 관리도구][az apim]에 연동시킬 수 있습니다. 또한 [애저 로직 앱][az logapp]이나 [파워 플랫폼][power platform] 에서 사용하는 [커스텀 커넥터][az cuscon] 역시도 쉽게 생성할 수 있는데요, 이 포스트에서는 이 Open API 확장 기능을 이용해 애저 펑션에 Open API 문서를 통합한 후, 이를 이용해 커스텀 커넥터를 만들어 보는 방법에 대해 알아봅니다.\n\n\n## 샘플 애저 펑션 코드 ##\n\n우선 기본적인 뼈대만 갖춘 애저 펑션 샘플 코드는 아래와 같습니다. `/feeds/items`와 `/feeds/item` 이라는 두 개의 엔드포인트를 나타냅니다 (line #7, 15).\n\nhttps://gist.github.com/justinyoo/2b4bc731ff8f2cdb5e80e28bd7dff9e7?file=01-feed-reader.cs&highlights=7,15\n\n이를 실행시키면 당연하겠지만, 아래와 같이 두 개의 엔드포인트를 확인할 수 있습니다.\n\n![애저 펑션 엔드포인트][image-01]\n\n\n## NuGet 패키지 설치 ##\n\n애저 펑션에 Open API 문서를 손쉽게 생성해 주는 NuGet 패키지를 설치합니다.\n\nhttps://gist.github.com/justinyoo/2b4bc731ff8f2cdb5e80e28bd7dff9e7?file=02-install-nuget-package-2.sh\n\n\n## 보일러플레이트 코드 설치 ##\n\n사실, 위 NuGet 패키지를 설치하면 보일러플레이트 코드가 자동으로 설치가 됩니다. 따라서, 이 부분은 딱히 고민할 부분이 없습니다. 앱을 빌드하고 실행시켜볼까요? 아래 그림과 같이 추가 엔드포인트가 보일텐데, 이 세 엔드포인트가 바로 Open API와 관련한 것들입니다.\n\n![애저 펑션 Open API 엔드포인트][image-02]\n\n이제 이 중에서 `http://localhost:7071/api/swagger/ui`를 브라우저에서 실행시켜 보면 아래와 같습니다.\n\n![엔드포인트 없는 애저 펑션 Swagger UI 페이지][image-03]\n\n일단 Swagger UI 페이지는 나왔지만, 아직 엔드포인트를 설정하지 않았기 때문에 자세한 내용은 보이질 않습니다.\n\n\n## Open API 확장을 위한 데코레이터 지정 ##\n\n이제 아래와 같이 각각의 엔드포인트에 데코레이터를 이용해 Open API 설정을 해 보겠습니다. `OpenApiOperationAttribute`, `OpenApiSecurityAttribute`, `OpenApiRequestBodyAttribute`, `OpenApiResponseWithBodyAttribute` 등의 데코레이터를 사용했습니다 (line #1-4, 13-16).\n\nhttps://gist.github.com/justinyoo/2b4bc731ff8f2cdb5e80e28bd7dff9e7?file=08-add-decorators-2.cs&highlights=1-4,13-16\n\n이렇게 컴파일 한 후, 다시 펑션 앱을 실행시켜 보면 아래와 같이 Swagger UI 페이지가 제대로 보입니다.\n\n![엔드포인트 포함한 애저 펑션 Swagger UI 페이지 #1][image-04]\n\n이렇게 애저 펑션에 Open API 익스텐션을 추가해서 Swagger UI 페이지를 붙이는 것 까지 살펴봤습니다. 이를 애저로 배포한 후 다시 Swagger UI 페이지에 접속해 볼까요?\n\n![엔드포인트 포함한 애저 펑션 Swagger UI 페이지 #1][image-05]\n\n이제 배포가 끝났으니 실제 커스텀 커넥터를 만들기 위한 다음 단계로 넘어가도록 하겠습니다.\n\n\n## 커스텀 커넥터 생성 ##\n\n커스텀 커넥터는 한 번 만들어 놓으면 [파워 오토메이트][power automate]와 [파워 앱스][power apps] 어디서든 사용할 수 있습니다. 따라서 여기서는 파워 오토메이트에서 커스텀 커넥터를 만들어 보기로 합니다. 먼저 아래와 같이 애저 펑션에서 제공하는 Swagger 문서의 URL을 지정합니다.\n\n![파워 오토메이트 커스텀 커넥터 #1][image-06]\n\n그런데, 가끔 아래와 같이 잘 안될 때가 있습니다. 이것은 현재 알려진 버그인데요, 괜찮습니다.\n\n![파워 오토메이트 커스텀 커넥터 #2][image-07]\n\n그럴 땐 당황하지 말고, Swagger 문서를 저장한 후 직접 업로드합니다.\n\n![파워 오토메이트 커스텀 커넥터 #3][image-08]\n\n이렇게 하면 그 다음부터는 그냥 자동으로 진행됩니다. 애초에 이 Open API 익스텐션이 바로 이 커스텀 커넥터를 염두에 두고 만든 것이어서 문제없이 진행됩니다. 아래와 같이 `✅ Create Connector` 버튼을 눌러 마무리합니다.\n\n![파워 오토메이트 커스텀 커넥터 #4][image-09]\n\n이제 커스텀 커넥터가 제대로 작동하는지 테스트를 해 볼 차례입니다. 아래 그림과 같이 `4. Test` 탭에서 커스텀 커넥터를 연결합니다.\n\n![파워 오토메이트 커스텀 커넥터 #5][image-10]\n\n그러면 아래 그림과 같이 애저 펑션 API 키 값을 입력하라는 표시가 나타나는데요, 여기서 API 키 값을 입력한 후 연결합니다.\n\n![파워 오토메이트 커스텀 커넥터 #6][image-11]\n\n커스텀 커넥터에 성공적으로 커넥션이 만들어지면, 이제 아래와 같이 실제로 테스트를 진행합니다. 아래 그림의 입력창은 바로 Swagger 문서에 정의된 요청 객체의 형식을 그대로 따라갑니다. 필요한 데이터를 입력하고 아래 `Test Operation` 버튼을 눌러보겠습니다.\n\n![파워 오토메이트 커스텀 커넥터 #7][image-12]\n\n그러면 아래와 같이 테스트가 성공적으로 수행된 것이 보입니다.\n\n![파워 오토메이트 커스텀 커넥터 #8][image-13]\n\n이제 커스텀 커넥터를 생성했으니, 파워 오토메이트를 하나 만들어 보겠습니다.\n\n\n## 커스텀 커넥터를 이용한 파워 오토메이트 플로우 만들기 ##\n\n이번에 만드는 파워 오토메이트 플로우는 파워 앱에서 이용할 것이기 때문에 아래와 같은 순서로 생성합니다. 먼저 `Instant Flow`를 선택합니다.\n\n![파워 오토메이트 커스텀 커넥터 #9][image-14]\n\n그 다음에는 아래 그림과 같이 파워 앱을 트리거로 지정합니다.\n\n![파워 오토메이트 커스텀 커넥터 #10][image-15]\n\n그러면 이제 본격적인 플로우 작성을 위한 디자이너 창이 생겼습니다. 여기서 `➕ New Step` 버튼을 클릭합니다.\n\n![파워 오토메이트 커스텀 커넥터 #11][image-16]\n\n검색 창에 `ATOM`을 입력하면 방금 우리가 생성한 커스텀 커넥터가 보입니다. 그리고, 애저 펑션에서 만든 두 개의 엔드포인트가 나타나는 것을 알 수 있죠? 여기서 피드 아이템 하나만 가져오는 액션을 아래와 같이 선택합니다.\n\n![파워 오토메이트 커스텀 커넥터 #12][image-17]\n\n액션을 선택하면 앞서 커스텀 커넥터를 테스트 할 때와 비슷한 필드 입력 화면이 나타납니다. 동일한 내용을 입력합니다.\n\n![파워 오토메이트 커스텀 커넥터 #13][image-18]\n\n이 플로우의 목적은 방금 커스텀 커넥터로 받아온 유튜브 피드를 소셜미디어에 포스팅하는 것이므로, 다음 액션으로 아래와 같이 트위터에 포스팅하는 액션을 선택합니다.\n\n![파워 오토메이트 커스텀 커넥터 #14][image-19]\n\n그리고 난 후, 앞서 커스텀 커넥터로부터 받아온 데이터를 아래와 같이 트위터 포스트 데이터로 입력합니다.\n\n![파워 오토메이트 커스텀 커넥터 #15][image-20]\n\n이번에는 파워 앱으로 이 플로우의 결과를 넘겨줘야 하니 아래와 같이 응답 객체 액션을 선택합니다.\n\n![파워 오토메이트 커스텀 커넥터 #16][image-21]\n\n그리고, 응답 객체의 본문에는 커스텀 커넥터에서 받아온 응답 객체 전부를 넣습니다.\n\n![파워 오토메이트 커스텀 커넥터 #17][image-22]\n\n여기까지 하면 파워 오토메이트 플로우 작성은 거의 다 끝났습니다. 한 번 테스트를 해 볼까요? 우측 상단의 `Test` 버튼을 클릭해서 아래와 같이 선택한 후 `Save & Test` 버튼을 클릭합니다.\n\n![파워 오토메이트 커스텀 커넥터 #18][image-23]\n\n그러면 다음 화면에서는 이 플로우에서 사용하는 커넥터들이 다 제대로 연결되어 있는지 확인하게 되는데, 다 연결 되었다면 아래 `Continue` 버튼을 눌러 계속 진행합니다.\n\n![파워 오토메이트 커스텀 커넥터 #19][image-24]\n\n모든 것이 잘 진행된다면 아래와 같이 테스트에 성공했다는 메시지를 볼 수 있습니다.\n\n![파워 오토메이트 커스텀 커넥터 #20][image-25]\n\n이제 실제로 워크플로우가 어떻게 진행됐는지 살펴보겠습니다. 모든 액션은 아래와 같이 성공적으로 진행되었습니다. 여기서 응답 객체 데이터를 복사해 놓겠습니다.\n\n![파워 오토메이트 커스텀 커넥터 #21][image-26]\n\n그리고 실제로 트위터에도 성공적으로 포스팅이 된 것을 확인할 수 있습니다.\n\n![파워 오토메이트 커스텀 커넥터 #22][image-27]\n\n이제 응답 객체를 파워앱에서 좀 더 확실하게 인식할 수 있게끔 마지막 설정을 해 줄 차례입니다. 앞서 복사한 응답 객체 데이터를 가지고 JSON 스키마를 설정합니다. 아래 그림의 `Generate from Sample` 버튼을 클릭합니다.\n\n![파워 오토메이트 커스텀 커넥터 #23][image-28]\n\n방금 복사해 놨던 JSON 응답 객체를 붙여넣고 `Done` 버튼을 클릭합니다.\n\n![파워 오토메이트 커스텀 커넥터 #24][image-29]\n\n그러면 JSON 응답객체 스키마가 생성된 것을 확인할 수 있습니다.\n\n![파워 오토메이트 커스텀 커넥터 #25][image-30]\n\n여기까지 한 후 저장하면 파워 오토메이트 플로우 작성은 모두 끝났습니다.\n\n\n## 파워 앱에 파워 오토메이트 연동하기 ##\n\n이제 파워 앱을 만들어 볼 차례입니다. 이번에 만드는 파워 앱에 앞서 만든 파워 오토메이트를 연결해 보도록 하죠. 우선 새 앱 캔버스를 하나 생성합니다.\n\n![파워 앱스 #1][image-31]\n\n그 다음에 버튼 콘트롤 하나, 라벨 콘트롤 두 개, 이미지 콘트롤 하나를 캔버스에 추가합니다.\n\n![파워 앱스 #2][image-32]\n\n버튼을 눌렀을 때 필요한 액션이 바로 파워 오토메이트를 실행시키는 것입니다. 이 액션을 아래와 같이 연결합니다. 버튼을 클릭한 후 상단의 메뉴 바에서 `Action`을 클릭합니다. 그리고 바로 아래에 있는 `Power Automate`를 선택합니다. 그 다음에 나오는 화면에서 앞서 만들어 둔 파워 오토메이트를 선택하면 됩니다.\n\n![파워 앱스 #3][image-33]\n\n연결이 끝나면 곧바로 함수 창에 어떤 작업을 할 것인지를 물어보는데, 여기에 `ClearCollect(result, AmplifyingaRandomYouTubeContent.Run())` 라고 입력합니다. 여기서 `AmplifyingaRandomYouTubeContent()` 함수는 파워 오토메이트 이름을 의미합니다.\n\n![파워 앱스 #4][image-34]\n\n이제 다른 레이블 콘트롤 두 개와 이미지 콘트롤 한 개에는 이 파워 오토메이트 실행 결과를 표시합니다. 각각의 콘트롤에 아래와 같이 입력합니다.\n\n* 상단 레이블 콘트롤: `First(result).title`\n* 하단 레이블 콘트롤: `First(result).link`\n* 이미지 콘트롤: `First(result).thumbnailLink`\n\n이렇게 입력한 후 파워 앱을 실행시켜 버튼을 클릭해 볼까요? 그러면 아래와 같은 결과가 나타납니다.\n\n![파워 앱스 #5][image-35]\n\n그리고 트위터에도 제대로 포스트가 잘 이루어진 것을 확인할 수 있습니다.\n\n![파워 앱스 #6][image-36]\n\n<br/>\n\n---\n\n지금까지, [애저 펑션][az func] 앱에 [Open API 익스텐션][gh openapi]을 설치해서 자동으로 Swagger 문서를 만들어주게끔 하는 것과 더불어, 이를 이용해 [파워 오토메이트][power automate]에 쓰이는 [커스텀 커넥터][az cuscon]를 손쉽게 만드는 방법, 그리고 파워 오토메이트에 이 커스텀 커넥터를 쉽게 붙이는 방법, 마지막으로 [파워 앱][power apps]에 파워 오토메이트를 쉽게 연동하는 방법에 대해 알아 보았습니다. 이렇게 애저 펑션에 간단한 익스텐션 하나만 설치하는 것으로 애저 펑션 API의 확장성이 엄청나게 높아지게 되는데, 이를 이용하면 [파워 플랫폼][power platform]에서 필요한 API를 정말 손쉽게 만들 수 있으리라 확신합니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-04.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-05.png\n[image-06]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-06.png\n[image-07]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-07.png\n[image-08]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-08.png\n[image-09]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-09.png\n[image-10]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-10.png\n[image-11]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-11.png\n[image-12]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-12.png\n[image-13]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-13.png\n[image-14]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-14.png\n[image-15]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-15.png\n[image-16]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-16.png\n[image-17]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-17.png\n[image-18]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-18.png\n[image-19]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-19.png\n[image-20]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-20.png\n[image-21]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-21.png\n[image-22]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-22.png\n[image-23]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-23.png\n[image-24]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-24.png\n[image-25]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-25.png\n[image-26]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-26.png\n[image-27]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-27.png\n[image-28]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-28.png\n[image-29]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-29.png\n[image-30]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-30.png\n[image-31]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-31.png\n[image-32]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-32.png\n[image-33]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-33.png\n[image-34]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-34.png\n[image-35]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-35.png\n[image-36]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-36.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[gh openapi]: https://github.com/Azure/azure-functions-openapi-extension\n[gh openapi docs openapi]: https://github.com/Azure/azure-functions-openapi-extension/blob/main/docs/enable-open-api-endpoints.md\n[gh openapi release]: https://github.com/Azure/azure-functions-openapi-extension/releases\n\n[az func]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n[az apim]: https://docs.microsoft.com/ko-kr/azure/api-management/api-management-key-concepts?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n[az cuscon]: https://docs.microsoft.com/ko-kr/connectors/custom-connectors/?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n\n[power platform]: https://powerplatform.microsoft.com/ko-kr/?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n[power automate]: https://flow.microsoft.com/ko-kr/?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n[power apps]: https://powerapps.microsoft.com/ko-kr/?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n"},"title":"애저 펑션에 Open API 확장 기능을 이용해 파워 플랫폼용 커스텀 커넥터 곧바로 생성하기","content":"\n\n[애저 펑션을 위한 Open API 확장 기능][gh openapi]을 사용하면 좋은 점 중에 하나가 바로 [애저 펑션][az func]으로 API를 개발할 때 이 API의 발견가능성(discoverability)을 높여준다는 것입니다. 따라서, 이를 이용하면 굉장히 손쉽게 [애저 API 관리도구][az apim]에 연동시킬 수 있습니다. 또한 [애저 로직 앱][az logapp]이나 [파워 플랫폼][power platform] 에서 사용하는 [커스텀 커넥터][az cuscon] 역시도 쉽게 생성할 수 있는데요, 이 포스트에서는 이 Open API 확장 기능을 이용해 애저 펑션에 Open API 문서를 통합한 후, 이를 이용해 커스텀 커넥터를 만들어 보는 방법에 대해 알아봅니다.\n\n\n## 샘플 애저 펑션 코드 ##\n\n우선 기본적인 뼈대만 갖춘 애저 펑션 샘플 코드는 아래와 같습니다. `/feeds/items`와 `/feeds/item` 이라는 두 개의 엔드포인트를 나타냅니다 (line #7, 15).\n\nhttps://gist.github.com/justinyoo/2b4bc731ff8f2cdb5e80e28bd7dff9e7?file=01-feed-reader.cs&highlights=7,15\n\n이를 실행시키면 당연하겠지만, 아래와 같이 두 개의 엔드포인트를 확인할 수 있습니다.\n\n![애저 펑션 엔드포인트][image-01]\n\n\n## NuGet 패키지 설치 ##\n\n애저 펑션에 Open API 문서를 손쉽게 생성해 주는 NuGet 패키지를 설치합니다.\n\nhttps://gist.github.com/justinyoo/2b4bc731ff8f2cdb5e80e28bd7dff9e7?file=02-install-nuget-package-2.sh\n\n\n## 보일러플레이트 코드 설치 ##\n\n사실, 위 NuGet 패키지를 설치하면 보일러플레이트 코드가 자동으로 설치가 됩니다. 따라서, 이 부분은 딱히 고민할 부분이 없습니다. 앱을 빌드하고 실행시켜볼까요? 아래 그림과 같이 추가 엔드포인트가 보일텐데, 이 세 엔드포인트가 바로 Open API와 관련한 것들입니다.\n\n![애저 펑션 Open API 엔드포인트][image-02]\n\n이제 이 중에서 `http://localhost:7071/api/swagger/ui`를 브라우저에서 실행시켜 보면 아래와 같습니다.\n\n![엔드포인트 없는 애저 펑션 Swagger UI 페이지][image-03]\n\n일단 Swagger UI 페이지는 나왔지만, 아직 엔드포인트를 설정하지 않았기 때문에 자세한 내용은 보이질 않습니다.\n\n\n## Open API 확장을 위한 데코레이터 지정 ##\n\n이제 아래와 같이 각각의 엔드포인트에 데코레이터를 이용해 Open API 설정을 해 보겠습니다. `OpenApiOperationAttribute`, `OpenApiSecurityAttribute`, `OpenApiRequestBodyAttribute`, `OpenApiResponseWithBodyAttribute` 등의 데코레이터를 사용했습니다 (line #1-4, 13-16).\n\nhttps://gist.github.com/justinyoo/2b4bc731ff8f2cdb5e80e28bd7dff9e7?file=08-add-decorators-2.cs&highlights=1-4,13-16\n\n이렇게 컴파일 한 후, 다시 펑션 앱을 실행시켜 보면 아래와 같이 Swagger UI 페이지가 제대로 보입니다.\n\n![엔드포인트 포함한 애저 펑션 Swagger UI 페이지 #1][image-04]\n\n이렇게 애저 펑션에 Open API 익스텐션을 추가해서 Swagger UI 페이지를 붙이는 것 까지 살펴봤습니다. 이를 애저로 배포한 후 다시 Swagger UI 페이지에 접속해 볼까요?\n\n![엔드포인트 포함한 애저 펑션 Swagger UI 페이지 #1][image-05]\n\n이제 배포가 끝났으니 실제 커스텀 커넥터를 만들기 위한 다음 단계로 넘어가도록 하겠습니다.\n\n\n## 커스텀 커넥터 생성 ##\n\n커스텀 커넥터는 한 번 만들어 놓으면 [파워 오토메이트][power automate]와 [파워 앱스][power apps] 어디서든 사용할 수 있습니다. 따라서 여기서는 파워 오토메이트에서 커스텀 커넥터를 만들어 보기로 합니다. 먼저 아래와 같이 애저 펑션에서 제공하는 Swagger 문서의 URL을 지정합니다.\n\n![파워 오토메이트 커스텀 커넥터 #1][image-06]\n\n그런데, 가끔 아래와 같이 잘 안될 때가 있습니다. 이것은 현재 알려진 버그인데요, 괜찮습니다.\n\n![파워 오토메이트 커스텀 커넥터 #2][image-07]\n\n그럴 땐 당황하지 말고, Swagger 문서를 저장한 후 직접 업로드합니다.\n\n![파워 오토메이트 커스텀 커넥터 #3][image-08]\n\n이렇게 하면 그 다음부터는 그냥 자동으로 진행됩니다. 애초에 이 Open API 익스텐션이 바로 이 커스텀 커넥터를 염두에 두고 만든 것이어서 문제없이 진행됩니다. 아래와 같이 `✅ Create Connector` 버튼을 눌러 마무리합니다.\n\n![파워 오토메이트 커스텀 커넥터 #4][image-09]\n\n이제 커스텀 커넥터가 제대로 작동하는지 테스트를 해 볼 차례입니다. 아래 그림과 같이 `4. Test` 탭에서 커스텀 커넥터를 연결합니다.\n\n![파워 오토메이트 커스텀 커넥터 #5][image-10]\n\n그러면 아래 그림과 같이 애저 펑션 API 키 값을 입력하라는 표시가 나타나는데요, 여기서 API 키 값을 입력한 후 연결합니다.\n\n![파워 오토메이트 커스텀 커넥터 #6][image-11]\n\n커스텀 커넥터에 성공적으로 커넥션이 만들어지면, 이제 아래와 같이 실제로 테스트를 진행합니다. 아래 그림의 입력창은 바로 Swagger 문서에 정의된 요청 객체의 형식을 그대로 따라갑니다. 필요한 데이터를 입력하고 아래 `Test Operation` 버튼을 눌러보겠습니다.\n\n![파워 오토메이트 커스텀 커넥터 #7][image-12]\n\n그러면 아래와 같이 테스트가 성공적으로 수행된 것이 보입니다.\n\n![파워 오토메이트 커스텀 커넥터 #8][image-13]\n\n이제 커스텀 커넥터를 생성했으니, 파워 오토메이트를 하나 만들어 보겠습니다.\n\n\n## 커스텀 커넥터를 이용한 파워 오토메이트 플로우 만들기 ##\n\n이번에 만드는 파워 오토메이트 플로우는 파워 앱에서 이용할 것이기 때문에 아래와 같은 순서로 생성합니다. 먼저 `Instant Flow`를 선택합니다.\n\n![파워 오토메이트 커스텀 커넥터 #9][image-14]\n\n그 다음에는 아래 그림과 같이 파워 앱을 트리거로 지정합니다.\n\n![파워 오토메이트 커스텀 커넥터 #10][image-15]\n\n그러면 이제 본격적인 플로우 작성을 위한 디자이너 창이 생겼습니다. 여기서 `➕ New Step` 버튼을 클릭합니다.\n\n![파워 오토메이트 커스텀 커넥터 #11][image-16]\n\n검색 창에 `ATOM`을 입력하면 방금 우리가 생성한 커스텀 커넥터가 보입니다. 그리고, 애저 펑션에서 만든 두 개의 엔드포인트가 나타나는 것을 알 수 있죠? 여기서 피드 아이템 하나만 가져오는 액션을 아래와 같이 선택합니다.\n\n![파워 오토메이트 커스텀 커넥터 #12][image-17]\n\n액션을 선택하면 앞서 커스텀 커넥터를 테스트 할 때와 비슷한 필드 입력 화면이 나타납니다. 동일한 내용을 입력합니다.\n\n![파워 오토메이트 커스텀 커넥터 #13][image-18]\n\n이 플로우의 목적은 방금 커스텀 커넥터로 받아온 유튜브 피드를 소셜미디어에 포스팅하는 것이므로, 다음 액션으로 아래와 같이 트위터에 포스팅하는 액션을 선택합니다.\n\n![파워 오토메이트 커스텀 커넥터 #14][image-19]\n\n그리고 난 후, 앞서 커스텀 커넥터로부터 받아온 데이터를 아래와 같이 트위터 포스트 데이터로 입력합니다.\n\n![파워 오토메이트 커스텀 커넥터 #15][image-20]\n\n이번에는 파워 앱으로 이 플로우의 결과를 넘겨줘야 하니 아래와 같이 응답 객체 액션을 선택합니다.\n\n![파워 오토메이트 커스텀 커넥터 #16][image-21]\n\n그리고, 응답 객체의 본문에는 커스텀 커넥터에서 받아온 응답 객체 전부를 넣습니다.\n\n![파워 오토메이트 커스텀 커넥터 #17][image-22]\n\n여기까지 하면 파워 오토메이트 플로우 작성은 거의 다 끝났습니다. 한 번 테스트를 해 볼까요? 우측 상단의 `Test` 버튼을 클릭해서 아래와 같이 선택한 후 `Save & Test` 버튼을 클릭합니다.\n\n![파워 오토메이트 커스텀 커넥터 #18][image-23]\n\n그러면 다음 화면에서는 이 플로우에서 사용하는 커넥터들이 다 제대로 연결되어 있는지 확인하게 되는데, 다 연결 되었다면 아래 `Continue` 버튼을 눌러 계속 진행합니다.\n\n![파워 오토메이트 커스텀 커넥터 #19][image-24]\n\n모든 것이 잘 진행된다면 아래와 같이 테스트에 성공했다는 메시지를 볼 수 있습니다.\n\n![파워 오토메이트 커스텀 커넥터 #20][image-25]\n\n이제 실제로 워크플로우가 어떻게 진행됐는지 살펴보겠습니다. 모든 액션은 아래와 같이 성공적으로 진행되었습니다. 여기서 응답 객체 데이터를 복사해 놓겠습니다.\n\n![파워 오토메이트 커스텀 커넥터 #21][image-26]\n\n그리고 실제로 트위터에도 성공적으로 포스팅이 된 것을 확인할 수 있습니다.\n\n![파워 오토메이트 커스텀 커넥터 #22][image-27]\n\n이제 응답 객체를 파워앱에서 좀 더 확실하게 인식할 수 있게끔 마지막 설정을 해 줄 차례입니다. 앞서 복사한 응답 객체 데이터를 가지고 JSON 스키마를 설정합니다. 아래 그림의 `Generate from Sample` 버튼을 클릭합니다.\n\n![파워 오토메이트 커스텀 커넥터 #23][image-28]\n\n방금 복사해 놨던 JSON 응답 객체를 붙여넣고 `Done` 버튼을 클릭합니다.\n\n![파워 오토메이트 커스텀 커넥터 #24][image-29]\n\n그러면 JSON 응답객체 스키마가 생성된 것을 확인할 수 있습니다.\n\n![파워 오토메이트 커스텀 커넥터 #25][image-30]\n\n여기까지 한 후 저장하면 파워 오토메이트 플로우 작성은 모두 끝났습니다.\n\n\n## 파워 앱에 파워 오토메이트 연동하기 ##\n\n이제 파워 앱을 만들어 볼 차례입니다. 이번에 만드는 파워 앱에 앞서 만든 파워 오토메이트를 연결해 보도록 하죠. 우선 새 앱 캔버스를 하나 생성합니다.\n\n![파워 앱스 #1][image-31]\n\n그 다음에 버튼 콘트롤 하나, 라벨 콘트롤 두 개, 이미지 콘트롤 하나를 캔버스에 추가합니다.\n\n![파워 앱스 #2][image-32]\n\n버튼을 눌렀을 때 필요한 액션이 바로 파워 오토메이트를 실행시키는 것입니다. 이 액션을 아래와 같이 연결합니다. 버튼을 클릭한 후 상단의 메뉴 바에서 `Action`을 클릭합니다. 그리고 바로 아래에 있는 `Power Automate`를 선택합니다. 그 다음에 나오는 화면에서 앞서 만들어 둔 파워 오토메이트를 선택하면 됩니다.\n\n![파워 앱스 #3][image-33]\n\n연결이 끝나면 곧바로 함수 창에 어떤 작업을 할 것인지를 물어보는데, 여기에 `ClearCollect(result, AmplifyingaRandomYouTubeContent.Run())` 라고 입력합니다. 여기서 `AmplifyingaRandomYouTubeContent()` 함수는 파워 오토메이트 이름을 의미합니다.\n\n![파워 앱스 #4][image-34]\n\n이제 다른 레이블 콘트롤 두 개와 이미지 콘트롤 한 개에는 이 파워 오토메이트 실행 결과를 표시합니다. 각각의 콘트롤에 아래와 같이 입력합니다.\n\n* 상단 레이블 콘트롤: `First(result).title`\n* 하단 레이블 콘트롤: `First(result).link`\n* 이미지 콘트롤: `First(result).thumbnailLink`\n\n이렇게 입력한 후 파워 앱을 실행시켜 버튼을 클릭해 볼까요? 그러면 아래와 같은 결과가 나타납니다.\n\n![파워 앱스 #5][image-35]\n\n그리고 트위터에도 제대로 포스트가 잘 이루어진 것을 확인할 수 있습니다.\n\n![파워 앱스 #6][image-36]\n\n<br/>\n\n---\n\n지금까지, [애저 펑션][az func] 앱에 [Open API 익스텐션][gh openapi]을 설치해서 자동으로 Swagger 문서를 만들어주게끔 하는 것과 더불어, 이를 이용해 [파워 오토메이트][power automate]에 쓰이는 [커스텀 커넥터][az cuscon]를 손쉽게 만드는 방법, 그리고 파워 오토메이트에 이 커스텀 커넥터를 쉽게 붙이는 방법, 마지막으로 [파워 앱][power apps]에 파워 오토메이트를 쉽게 연동하는 방법에 대해 알아 보았습니다. 이렇게 애저 펑션에 간단한 익스텐션 하나만 설치하는 것으로 애저 펑션 API의 확장성이 엄청나게 높아지게 되는데, 이를 이용하면 [파워 플랫폼][power platform]에서 필요한 API를 정말 손쉽게 만들 수 있으리라 확신합니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-04.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-05.png\n[image-06]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-06.png\n[image-07]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-07.png\n[image-08]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-08.png\n[image-09]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-09.png\n[image-10]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-10.png\n[image-11]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-11.png\n[image-12]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-12.png\n[image-13]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-13.png\n[image-14]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-14.png\n[image-15]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-15.png\n[image-16]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-16.png\n[image-17]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-17.png\n[image-18]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-18.png\n[image-19]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-19.png\n[image-20]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-20.png\n[image-21]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-21.png\n[image-22]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-22.png\n[image-23]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-23.png\n[image-24]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-24.png\n[image-25]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-25.png\n[image-26]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-26.png\n[image-27]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-27.png\n[image-28]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-28.png\n[image-29]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-29.png\n[image-30]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-30.png\n[image-31]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-31.png\n[image-32]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-32.png\n[image-33]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-33.png\n[image-34]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-34.png\n[image-35]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-35.png\n[image-36]: https://sa0blogs.blob.core.windows.net/aliencube/2020/07/creating-custom-connector-from-azure-functions-with-swagger-36.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-12565-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[gh openapi]: https://github.com/Azure/azure-functions-openapi-extension\n[gh openapi docs openapi]: https://github.com/Azure/azure-functions-openapi-extension/blob/main/docs/enable-open-api-endpoints.md\n[gh openapi release]: https://github.com/Azure/azure-functions-openapi-extension/releases\n\n[az func]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n[az apim]: https://docs.microsoft.com/ko-kr/azure/api-management/api-management-key-concepts?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n[az cuscon]: https://docs.microsoft.com/ko-kr/connectors/custom-connectors/?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n\n[power platform]: https://powerplatform.microsoft.com/ko-kr/?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n[power automate]: https://flow.microsoft.com/ko-kr/?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n[power apps]: https://powerapps.microsoft.com/ko-kr/?WT.mc_id=dotnet-15268-juyoo&ocid=AID3027813\n"},"a036df16-34ae-4612-adff-3c706f37d0e3":{"id":"a036df16-34ae-4612-adff-3c706f37d0e3","index":"Blog","path":"/posts/2021/02/16/developing-webhook-testing-tool-with-azure-durable-functions/","node":{"title":"애저 듀어러블 펑션으로 웹훅 검사 도구 만들기","category":"Azure","description":"이 포스트에서는 애저 듀어러블 펑션의 Stateful 속성을 이용해서 웹훅을 테스트할 수 있는 도구를 개발해 보겠습니다.","content":"\n\n혹시 웹훅을 테스트 하기 위해 사용했던 추억의 RequestBin 앱 첫 화면이 기억나시나요?\n\n![][image-01]\n\n현재는 정식으로 서비스 되고 있지 않고, 다만 소스 코드와 함께 [샘플 형태][requestbin herokuapp]로 운영되고 있습니다. 따라서, 내가 직접 이 서비스를 운영하고 싶다면 도커 컨테이너를 이용해서 어딘가에 호스팅을 해야 합니다. 이와 관련해서 [애저 컨테이너 인스턴스][az aci]를 활용해서 [올리는 방법][gh sample aci]과 [애저 앱 서비스][az appsvc]를 활용해서 [올리는 방법][gh sample appsvc]을 예전에 샘플 코드 형태로 소개한 적이 있습니다. 그런데, 문제가 하나 있습니다. 오리지널 RequestBin 앱은 애플리케이션과 Redis 캐시로 구성이 되어 있는데, 캐시의 특성상 언제든 데이터가 소실될 수 있기 때문에 가끔은 오래된 웹훅 히스토리를 확인하고 싶을 때에는 난감할 수도 있죠.\n\n마침 애저 [듀어러블 펑션][az func durable]은 자체적으로 테이블 저장소 기능을 이용해서 [이벤트 소싱 패턴][event sourcing pattern]을 구현해 놓았습니다. 또한 이를 통해 데이터를 Stateful하게 저장할 수 있기 때문에 코드와 데이터를 동시에 다뤄야 하는 RequestBin 애플리케이션을 처음부터 만들어 보기에 아주 적절한 예시가 될 수 있습니다. 애저 [듀어러블 펑션][az func durable]이 갖는 독특한 속성 중 하나는 상태(State)를 저장할 수 있는(Stateful) 기능입니다. 이 상태 저장 속성을 이용하면 애저 펑션을 훨씬 더 다양한 용도로 사용할 수 있는데요, 이번 포스트에서는 바로 이 [듀어러블 펑션][az func durable]의 Stateful 속성을 이용해서 API의 웹훅 기능을 테스트할 수 있는 [RequestBin 애플리케이션][requestbin herokuapp]을 구현해 보겠습니다.\n\n> 이 포스트에 쓰인 샘플 코드는 [Durable RequestBin Sample][gh sample]에서 다운로드 받을 수 있습니다.\n\n\n## 상태 저장 엔티티 ##\n\n[듀어러블 펑션][az func durable]의 오케스트레이션 기능은 `IDurableOrchestrationClient`를 통해 State를 암시적으로 저장하는 반면에, 상태 저장 엔티티를 사용하면 `IDurableClient`를 통해 이 State를 명시적으로 저장하고 호출합니다. 따라서, 대략 아래와 같은 모양이 될 텐데요, 오케스트레이션을 구현하는 대신 State에 직접 접근하는 `IDurableClient` 인스턴스가 보일 것입니다 (line #4).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=01-create-bin.cs&highlights=4\n\n이제 이를 바탕으로 상태를 정의하는 엔티티를 생성합니다. `binId`는 유일한 값이라면 뭐가 되든 상관 없으므로 여기서는 간단하게 GUID를 사용합니다 (line #6). `EntityId`가 바로 상태를 관장하는 값입니다 (line #7).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=02-create-bin.cs&highlights=6,7\n\n위 코드에서 보면 `\"Bin\"`이라는 값은 이 상태를 명시적으로 저장하고 삭제하는 엔티티의 이름입니다. 이 엔티티는 액터 모델의 구현을 따릅니다. 따라서, 엔티티의 상태와 더불어 어떤 식으로 엔티티의 상태를 변경시킬 수 있는지에 대한 액션도 함께 정의되어 있지요. 대략 아래와 같은 모습이 됩니다. 먼저 `IBin` 인터페이스를 통해 상태 변경과 관련한 액션을 정의합니다. 여기서는 상태를 추가하고 리셋하는 역할만 정의합니다.\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=03-ibin.cs\n\n그리고 아래와 같이 `Bin` 클라스로 인터페이스 구현을 하는데, 상태 저장을 위한 `History`라는 속성을 정의합니다 (line #5). 이 때 클라스 데코레이터로 직렬화 옵션을 `MemberSerialization.OptIn`라고 주면 (line #1) 명시적으로 `JsonProperty` 데코레이터를 선언한 속성에 대해서만 직렬화를 시도하게 됩니다 (line #4). 마지막 줄에 보면 `Run(IDurableEntityContext)`라는 이름의 정적 메소드가 있는데 (line #23), 이를 통해 이벤트를 발생시켜 테이블 저장소에 상태를 저장합니다.\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=04-bin.cs&highlights=1,4,5,23\n\n\n## Bin 생성 ##\n\n그렇다면, 이제 이 엔티티에 어떻게 상태를 저장할까요? `SignalEntityAsync()` 메소드를 통해 엔티티에 구현한 메소드를 호출합니다 (line #8). 여기서는 비어있는 Bin 객체만 반환시킬 예정이므로 `null` 값을 보내게 됩니다. 이렇게 해서 비어있는 Bin이 하나 만들어졌습니다.\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=05-create-bin.cs&highlights=8\n\n여기까지 해서 펑션 앱을 실제로 돌려보면 테이블 저장소에 아래와 같은 형태로 레코드가 생성된 것이 보일 것입니다. `history` 필드에 비어있는 배열이 보이나요? 현재 `Bin`만 만들어졌기 때문입니다.\n\n![][image-02]\n\n\n## 웹훅 요청 저장 ##\n\n이제 웹훅 요청 히스토리를 하나씩 저장시켜 보도록 하죠. 앞서 만든 엔드포인트와 거의 비슷합니다. 다만 이번에는 요청 데이터를 넣어줘야 합니다. 타임스탬프, 요청 메소드, 헤더, 쿼리스트링, 페이로드를 모두 캡쳐해서 저장합니다 (line #10-14).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=06-add-history.cs&highlights=10-14\n\n그리고, 앞서와 같이 `bin`을 만들어 `SignalEntityAsync()` 메소드를 통해 히스토리를 추가합니다 (line #11).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=07-add-history.cs&highlights=11\n\n이렇게 한 후 실제로 웹훅 요청을 날려보면 테이블 저장소의 데이터가 아래와 같이 변경된 것이 보이는데요, 이는 실제로 요청 데이터가 저장된 것입니다.\n\n![][image-03]\n\n\n## 웹훅 히스토리 조회 ##\n\n그렇다면, 지금까지 저장해 놓은 웹훅 히스토리를 열어봐야 할 필요도 있을 테죠? 이 경우는 아래와 같이 먼저 Bin 레퍼런스를 생성합니다 (line #7).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=08-get-history.cs&highlights=7\n\n그리고 난 뒤, `ReadEntityStateAsync()` 메소드를 통해 현재 상태를 가져와서 응답 객체로 반환합니다 (line #9).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=09-get-history.cs&highlights=9\n\n이렇게 하면 아래와 같이 저장된 웹훅 요청 데이터에 대한 히스토리를 볼 수 있게 됩니다.\n\n![][image-04]\n\n\n## 웹훅 히스토리 삭제 ##\n\n이번에는 Bin 안에 저장된 모든 히스토리를 삭제해 볼까요? 먼저 Bin 레퍼런스를 생성합니다 (line #7).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=10-reset-history.cs&highlights=7\n\n그리고 난 후 이번에는 `SignalEntityAsync()` 메소드를 통해 `Bin` 액터의 `Reset()` 메소드를 호출합니다 (line #9).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=11-reset-history.cs&highlights=9\n\n이후 테이블 저장소를 조회해 보면 모든 웹훅 히스토리가 사라진 것을 확인할 수 있습니다.\n\n![][image-05]\n\n\n## Bin 삭제 ##\n\n이제 마지막으로 이 Bin이 더이상 필요없을 때 삭제하는 엔드포인트를 만들어 보겠습니다. 먼저 Bin 레퍼런스를 생성합니다 (line #7).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=12-purge-bin.cs&highlights=7\n\n그리고, `PurgeInstanceHistoryAsync()` 메소드를 통해 엔티티 자체를 테이블 저장소에서 삭제합니다 (line #9).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=13-purge-bin.cs&highlights=9\n\n실제로 이 엔드포인트를 호출하면 아래와 같이 테이블 저장소에서 엔티티가 완전히 사라진 것이 보입니다.\n\n![][image-06]\n\n\n<br/>\n\n---\n\n이렇게 해서 웹훅 API의 페이로드를 테스트해 볼 때 유용한 RequestBin 앱을 애저 [듀어러블 펑션][az func durable]을 이용해 구현해 봤습니다. 이 코드를 이용하면 아무래도 PoC이니만큼 간단한 웹훅 확인 용도로 사용하는데에는 큰 문제가 없습니다. 여기에 더해 조금 더 UI를 붙여준다거나 하면 좀 더 완성도가 높은 앱이 될 것입니다. 이 포스트의 포인트는 애저 [듀어러블 펑션][az func durable]의 Stateful한 특성을 오케스트레이션 용도 뿐만 아니라 직접 액세스를 통해 다양한 활용도를 구현해 볼 수 있다는 데 있으니, 앞으로 이 듀어러블 펑션을 통해 좀 더 다양한 워크플로우 관리를 할 수 있기를 기대합니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2020/04/building-requestbin-with-durable-functions-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2020/04/building-requestbin-with-durable-functions-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2020/04/building-requestbin-with-durable-functions-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2020/04/building-requestbin-with-durable-functions-04.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2020/04/building-requestbin-with-durable-functions-05.png\n[image-06]: https://sa0blogs.blob.core.windows.net/aliencube/2020/04/building-requestbin-with-durable-functions-06.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[gh sample]: https://github.com/devkimchi/RequestBin-Sample\n[gh sample aci]: https://github.com/aliencube/RequestBin-on-ACI\n[gh sample appsvc]: https://github.com/aliencube/RequestBin-on-Azure-App-Service\n\n[az func]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n[az func durable]: https://docs.microsoft.com/ko-kr/azure/azure-functions/durable/durable-functions-overview?tabs=csharp&WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n[az func durable entity]: https://docs.microsoft.com/ko-kr/azure/azure-functions/durable/durable-functions-entities?tabs=csharp&WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n\n[requestbin]: https://github.com/Runscope/requestbin\n[requestbin herokuapp]: https://requestbin.herokuapp.com/\n\n[az aci]: https://docs.microsoft.com/ko-kr/azure/container-instances/container-instances-overview?WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n[az appsvc]: https://docs.microsoft.com/ko-kr/azure/app-service/?WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n\n[event sourcing pattern]: https://docs.microsoft.com/ko-kr/azure/architecture/patterns/event-sourcing?WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n"},"title":"애저 듀어러블 펑션으로 웹훅 검사 도구 만들기","content":"\n\n혹시 웹훅을 테스트 하기 위해 사용했던 추억의 RequestBin 앱 첫 화면이 기억나시나요?\n\n![][image-01]\n\n현재는 정식으로 서비스 되고 있지 않고, 다만 소스 코드와 함께 [샘플 형태][requestbin herokuapp]로 운영되고 있습니다. 따라서, 내가 직접 이 서비스를 운영하고 싶다면 도커 컨테이너를 이용해서 어딘가에 호스팅을 해야 합니다. 이와 관련해서 [애저 컨테이너 인스턴스][az aci]를 활용해서 [올리는 방법][gh sample aci]과 [애저 앱 서비스][az appsvc]를 활용해서 [올리는 방법][gh sample appsvc]을 예전에 샘플 코드 형태로 소개한 적이 있습니다. 그런데, 문제가 하나 있습니다. 오리지널 RequestBin 앱은 애플리케이션과 Redis 캐시로 구성이 되어 있는데, 캐시의 특성상 언제든 데이터가 소실될 수 있기 때문에 가끔은 오래된 웹훅 히스토리를 확인하고 싶을 때에는 난감할 수도 있죠.\n\n마침 애저 [듀어러블 펑션][az func durable]은 자체적으로 테이블 저장소 기능을 이용해서 [이벤트 소싱 패턴][event sourcing pattern]을 구현해 놓았습니다. 또한 이를 통해 데이터를 Stateful하게 저장할 수 있기 때문에 코드와 데이터를 동시에 다뤄야 하는 RequestBin 애플리케이션을 처음부터 만들어 보기에 아주 적절한 예시가 될 수 있습니다. 애저 [듀어러블 펑션][az func durable]이 갖는 독특한 속성 중 하나는 상태(State)를 저장할 수 있는(Stateful) 기능입니다. 이 상태 저장 속성을 이용하면 애저 펑션을 훨씬 더 다양한 용도로 사용할 수 있는데요, 이번 포스트에서는 바로 이 [듀어러블 펑션][az func durable]의 Stateful 속성을 이용해서 API의 웹훅 기능을 테스트할 수 있는 [RequestBin 애플리케이션][requestbin herokuapp]을 구현해 보겠습니다.\n\n> 이 포스트에 쓰인 샘플 코드는 [Durable RequestBin Sample][gh sample]에서 다운로드 받을 수 있습니다.\n\n\n## 상태 저장 엔티티 ##\n\n[듀어러블 펑션][az func durable]의 오케스트레이션 기능은 `IDurableOrchestrationClient`를 통해 State를 암시적으로 저장하는 반면에, 상태 저장 엔티티를 사용하면 `IDurableClient`를 통해 이 State를 명시적으로 저장하고 호출합니다. 따라서, 대략 아래와 같은 모양이 될 텐데요, 오케스트레이션을 구현하는 대신 State에 직접 접근하는 `IDurableClient` 인스턴스가 보일 것입니다 (line #4).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=01-create-bin.cs&highlights=4\n\n이제 이를 바탕으로 상태를 정의하는 엔티티를 생성합니다. `binId`는 유일한 값이라면 뭐가 되든 상관 없으므로 여기서는 간단하게 GUID를 사용합니다 (line #6). `EntityId`가 바로 상태를 관장하는 값입니다 (line #7).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=02-create-bin.cs&highlights=6,7\n\n위 코드에서 보면 `\"Bin\"`이라는 값은 이 상태를 명시적으로 저장하고 삭제하는 엔티티의 이름입니다. 이 엔티티는 액터 모델의 구현을 따릅니다. 따라서, 엔티티의 상태와 더불어 어떤 식으로 엔티티의 상태를 변경시킬 수 있는지에 대한 액션도 함께 정의되어 있지요. 대략 아래와 같은 모습이 됩니다. 먼저 `IBin` 인터페이스를 통해 상태 변경과 관련한 액션을 정의합니다. 여기서는 상태를 추가하고 리셋하는 역할만 정의합니다.\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=03-ibin.cs\n\n그리고 아래와 같이 `Bin` 클라스로 인터페이스 구현을 하는데, 상태 저장을 위한 `History`라는 속성을 정의합니다 (line #5). 이 때 클라스 데코레이터로 직렬화 옵션을 `MemberSerialization.OptIn`라고 주면 (line #1) 명시적으로 `JsonProperty` 데코레이터를 선언한 속성에 대해서만 직렬화를 시도하게 됩니다 (line #4). 마지막 줄에 보면 `Run(IDurableEntityContext)`라는 이름의 정적 메소드가 있는데 (line #23), 이를 통해 이벤트를 발생시켜 테이블 저장소에 상태를 저장합니다.\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=04-bin.cs&highlights=1,4,5,23\n\n\n## Bin 생성 ##\n\n그렇다면, 이제 이 엔티티에 어떻게 상태를 저장할까요? `SignalEntityAsync()` 메소드를 통해 엔티티에 구현한 메소드를 호출합니다 (line #8). 여기서는 비어있는 Bin 객체만 반환시킬 예정이므로 `null` 값을 보내게 됩니다. 이렇게 해서 비어있는 Bin이 하나 만들어졌습니다.\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=05-create-bin.cs&highlights=8\n\n여기까지 해서 펑션 앱을 실제로 돌려보면 테이블 저장소에 아래와 같은 형태로 레코드가 생성된 것이 보일 것입니다. `history` 필드에 비어있는 배열이 보이나요? 현재 `Bin`만 만들어졌기 때문입니다.\n\n![][image-02]\n\n\n## 웹훅 요청 저장 ##\n\n이제 웹훅 요청 히스토리를 하나씩 저장시켜 보도록 하죠. 앞서 만든 엔드포인트와 거의 비슷합니다. 다만 이번에는 요청 데이터를 넣어줘야 합니다. 타임스탬프, 요청 메소드, 헤더, 쿼리스트링, 페이로드를 모두 캡쳐해서 저장합니다 (line #10-14).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=06-add-history.cs&highlights=10-14\n\n그리고, 앞서와 같이 `bin`을 만들어 `SignalEntityAsync()` 메소드를 통해 히스토리를 추가합니다 (line #11).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=07-add-history.cs&highlights=11\n\n이렇게 한 후 실제로 웹훅 요청을 날려보면 테이블 저장소의 데이터가 아래와 같이 변경된 것이 보이는데요, 이는 실제로 요청 데이터가 저장된 것입니다.\n\n![][image-03]\n\n\n## 웹훅 히스토리 조회 ##\n\n그렇다면, 지금까지 저장해 놓은 웹훅 히스토리를 열어봐야 할 필요도 있을 테죠? 이 경우는 아래와 같이 먼저 Bin 레퍼런스를 생성합니다 (line #7).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=08-get-history.cs&highlights=7\n\n그리고 난 뒤, `ReadEntityStateAsync()` 메소드를 통해 현재 상태를 가져와서 응답 객체로 반환합니다 (line #9).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=09-get-history.cs&highlights=9\n\n이렇게 하면 아래와 같이 저장된 웹훅 요청 데이터에 대한 히스토리를 볼 수 있게 됩니다.\n\n![][image-04]\n\n\n## 웹훅 히스토리 삭제 ##\n\n이번에는 Bin 안에 저장된 모든 히스토리를 삭제해 볼까요? 먼저 Bin 레퍼런스를 생성합니다 (line #7).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=10-reset-history.cs&highlights=7\n\n그리고 난 후 이번에는 `SignalEntityAsync()` 메소드를 통해 `Bin` 액터의 `Reset()` 메소드를 호출합니다 (line #9).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=11-reset-history.cs&highlights=9\n\n이후 테이블 저장소를 조회해 보면 모든 웹훅 히스토리가 사라진 것을 확인할 수 있습니다.\n\n![][image-05]\n\n\n## Bin 삭제 ##\n\n이제 마지막으로 이 Bin이 더이상 필요없을 때 삭제하는 엔드포인트를 만들어 보겠습니다. 먼저 Bin 레퍼런스를 생성합니다 (line #7).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=12-purge-bin.cs&highlights=7\n\n그리고, `PurgeInstanceHistoryAsync()` 메소드를 통해 엔티티 자체를 테이블 저장소에서 삭제합니다 (line #9).\n\nhttps://gist.github.com/justinyoo/01426032d1ee6886796d9cb72e048dd9?file=13-purge-bin.cs&highlights=9\n\n실제로 이 엔드포인트를 호출하면 아래와 같이 테이블 저장소에서 엔티티가 완전히 사라진 것이 보입니다.\n\n![][image-06]\n\n\n<br/>\n\n---\n\n이렇게 해서 웹훅 API의 페이로드를 테스트해 볼 때 유용한 RequestBin 앱을 애저 [듀어러블 펑션][az func durable]을 이용해 구현해 봤습니다. 이 코드를 이용하면 아무래도 PoC이니만큼 간단한 웹훅 확인 용도로 사용하는데에는 큰 문제가 없습니다. 여기에 더해 조금 더 UI를 붙여준다거나 하면 좀 더 완성도가 높은 앱이 될 것입니다. 이 포스트의 포인트는 애저 [듀어러블 펑션][az func durable]의 Stateful한 특성을 오케스트레이션 용도 뿐만 아니라 직접 액세스를 통해 다양한 활용도를 구현해 볼 수 있다는 데 있으니, 앞으로 이 듀어러블 펑션을 통해 좀 더 다양한 워크플로우 관리를 할 수 있기를 기대합니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2020/04/building-requestbin-with-durable-functions-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2020/04/building-requestbin-with-durable-functions-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2020/04/building-requestbin-with-durable-functions-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2020/04/building-requestbin-with-durable-functions-04.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2020/04/building-requestbin-with-durable-functions-05.png\n[image-06]: https://sa0blogs.blob.core.windows.net/aliencube/2020/04/building-requestbin-with-durable-functions-06.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[gh sample]: https://github.com/devkimchi/RequestBin-Sample\n[gh sample aci]: https://github.com/aliencube/RequestBin-on-ACI\n[gh sample appsvc]: https://github.com/aliencube/RequestBin-on-Azure-App-Service\n\n[az func]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n[az func durable]: https://docs.microsoft.com/ko-kr/azure/azure-functions/durable/durable-functions-overview?tabs=csharp&WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n[az func durable entity]: https://docs.microsoft.com/ko-kr/azure/azure-functions/durable/durable-functions-entities?tabs=csharp&WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n\n[requestbin]: https://github.com/Runscope/requestbin\n[requestbin herokuapp]: https://requestbin.herokuapp.com/\n\n[az aci]: https://docs.microsoft.com/ko-kr/azure/container-instances/container-instances-overview?WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n[az appsvc]: https://docs.microsoft.com/ko-kr/azure/app-service/?WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n\n[event sourcing pattern]: https://docs.microsoft.com/ko-kr/azure/architecture/patterns/event-sourcing?WT.mc_id=dotnet-16306-juyoo&ocid=AID3027813\n"},"ef6e4d52-1148-4e48-8a7f-1e763e39621a":{"id":"ef6e4d52-1148-4e48-8a7f-1e763e39621a","index":"Blog","path":"/posts/2021/03/02/event-driven-keyvault-secrets-rotation-management/","node":{"title":"이벤트 기반 애저 키 저장소 시크릿 로테이션 관리","category":"Azure","description":"이 포스트에서는 애저 키 저장소의 시크릿 값이 새롭게 갱신될 때 해당 이벤트를 캡쳐해서 로테이션에 필요하지 않은 오래된 버전들을 비활성화 시키는 방법에 대해 알아봅니다.","content":"\n\n[지난 포스트][post prev 1]에서는 [애저 키 저장소][az kv]의 모든 [시크릿][az kv secrets] 값의 모든 버전을 한꺼번에 돌려보고 비활성화 시키는 방법에 대해 알아 보았습니다. 이 방법이 매우 간편하긴 하지만, 처음 한 번이나 두 번 정도 벌크로 진행할 때를 제외하고는 매번 모든 시크릿 값을 대상으로 진행하는 것은 어찌 보면 과하지 않을까 하는 느낌도 있습니다. 그렇다면, 특정 시크릿에 새 버전이 만들어졌을 때 그 시크릿만 체크해서 필요한 만큼 변경할 수 있는 방법은 없을까요? 물론 있습니다! 애저 키 저장소 인스턴스는 기본적으로 [애저 이벤트그리드][az evtgrd]를 통해 이벤트를 발생시키므로, 이를 활용하면 이벤트 기반으로 특정 시크릿에 대해서만 [버전 로테이션을 관리][az kv secrets rotation]할 수 있습니다.\n\n* [애저 키 저장소 시크릿 로테이션 관리][post prev 1]\n* ***이벤트 기반 애저 키 저장소 시크릿 로테이션 관리***\n\n이 포스트에서는 [애저 이벤트그리드][az evtgrd], [애저 로직 앱][az logapp], [애저 펑션][az fncapp]을 이용해서 특정 시크릿에 새 버전이 추가될 경우, 이를 자동으로 감지해서 로테이션 버전을 관리하는 방법에 대해 알아보기로 하겠습니다.\n\n> 실제 작동하는 코드를 보고 싶으신가요? 이 [깃헙 리포지토리][gh sample]에서 다운로드 받아 로컬에서 돌려보세요!\n\n\n## 애저 키 저장소 이벤트 ##\n\n애저 키 저장소는 [이벤트 그리드][az kv evtgrd]와 통합하여 시크릿에 새로 버전이 하나 추가될 때 마다 [이벤트를 발생시킵니다][az kv evtgrd type]. 따라서 이 이벤트를 받아서 처리하게 되면, 굳이 모든 시크릿을 한꺼번에 루프로 돌리지 않아도 개별 시크릿에 대해서만 작업할 수 있어서 상당히 편리합니다. 애저 키 저장소와 이벤트 그리드, 그리고 이벤트 처리기로서 [애저 로직 앱][az logapp]과 [애저 펑션 앱][az fncapp]을 통합한 전체 아키텍처는 대략 아래와 같습니다.\n\n![전체 E2E 프로세스 아키텍처][image-01]\n\n이벤트 처리기로 [애저 로직 앱][az logapp]을 사용하는 이유는 [이전 포스트][post prev 2]에서 언급한 바와 같이 [이벤트 그리드에서 요구하는 인증][az evtgrd delivery auth]을 내부적으로 손쉽게 처리할 수 있기 때문인데요, 만약 애저 펑션에서 직접 처리하고 싶다면 [이 포스트][post prev 3]를 참조하면 좋습니다.\n\n애저 키 저장소에 이벤트 처리기로서 로직 앱을 연동 시키는 방법은 크게 두 가지가 있습니다. 하나는 애저 키 저장소에서 [이벤트그리드 커넥터][az logapp connectors evtgrd]를 이용해 직접 로직 앱 인스턴스를 생성하는 방법이고, 다른 하나는 별도로 인스턴스를 생성한 후 HTTP 웹훅을 이용해 연동시키는 방법입니다. 전자의 경우 [커넥터][az logapp connectors]라는 의존성이 하나 생기는 반면, 후자는 키 저장소와 로직 앱이 독립적으로 작동하기 때문에 개인적으로는 의존성을 없앤 후자를 선호합니다.\n\n먼저 애저 로직 앱 인스턴스를 하나 만들고 [HTTP 트리거][az logapp connectors request]를 추가합니다.\n\n![로직앱 HTTP 트리거][image-02]\n\n이렇게 만들어 놓은 로직 앱의 URL을 이용해서 키 저장소에서 이벤트 처리기를 연동시켜 보겠습니다. 먼저 키 저장소 인스턴스의 이벤트 블레이드로 이동합니다. 그리고 `+ 이벤트 구독` 버튼을 클릭합니다.\n\n![이벤트 구독 생성 버튼][image-03]\n\n그러면 이벤트 구독 관련 인스턴스를 생성하는 화면이 나오는데, 아래와 같이 `이벤트 구독 인스턴스 이름`, `이벤트 스키마`, `시스템 토픽 인스턴스 이름`, `엔드포인트 정보`, `웹훅 엔드포인트 URL`을 선택합니다.\n\n![이벤트 구독 생성 상세 정보][image-04]\n\n* 이벤트 구독 정보 섹션에서는 이벤트 스키마로 [클라우드 이벤트 스키마 v1.0][ce spec http]을 선택했는데, 이는 애저 자체 표준 대신 [CNCF][cncf]에서 제시하는 표준인 [클라우드이벤트 스펙][ce spec]을 따르는 것이 향후 이기종간 통합에 편리하기 때문입니다.\n* 항목 정보 섹션에서는 이벤트 그리드 토픽 이름을 선택합니다.\n* 이벤트 유형 섹션에서는 이벤트 형식 중에서 `Secret New Version Created` 이벤트만 선택합니다.\n* 엔드포인트 정보 섹션에서는 엔드포인트 유형으로 웹훅/웹후크를 선택하고 엔드포인트 값을 앞서 만들어 놓은 로직 앱 엔드포인트 URL로 설정합니다.\n\n이렇게 하면 애저 키 저장소 인스턴스와 애저 이벤트그리드, 애저 로직 앱 사이에 이벤트 발생시 기본적으로 처리할 수 있는 파이프라인을 만들게 되는데요, 실제로 애저 키 저장소에서 시크릿의 새 버전을 하나 만들어 보면 아래와 같은 이벤트가 발생하는 것을 알 수 있습니다. 원하는 `Microsoft.KeyVault.SecretNewVersionCreated` 형식의 이벤트를 캡쳐한 것이 보입니다.\n\n![로직 앱 이벤트 캡쳐][image-05]\n\n그리고, 실제 이벤트 메시지 JSON 개체는 아래와 같이 생겼습니다.\n\n![로직 앱 이벤트 메시지 페이로드][image-06]\n\n`data` 속성 안에 보면 `ObjectName`이라고 있는데, 바로 이것이 시크릿 이름이고, 이 값을 앞으로 구현할 애저 펑션으로 보내서 해당 시크릿 이름에 대해서만 필요한 버전만 남겨두고 나머지를 비활성화 시키도록 할 예정입니다. 이제 애저 펑션의 구현을 살펴보도록 하겠습니다.\n\n\n## 애저 펑션을 통해 특정 시크릿에 대해서만 로테이션 관리하기 ##\n\n[지난 포스트][post prev 1]의 구현 내용과 크게 다르지 않지만, 이번에는 특정 시크릿에 대해서만 처리를 하는 내용이므로 펑션의 구현 내용이 살짝 간결해집니다. 먼저 새 [HTTP 트리거][az fncapp trigger http]를 하나 생성합니다.\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=01-func-new-http-trigger.sh\n\n기본 템플릿을 이용해 HTTP 트리거를 만들었습니다. 이제 이 펑션 메소드의 `HttpTrigger` 바인딩 설정을 아래와 같이 바꿉니다. HTTP 메소드는 `POST` 하나로 한정하고, 라우팅 URL을 `secrets/{name}/disable/{count:int?}` 처럼 바꿉니다 (line #5). 라우팅 URL에 보면 `{name}`, `{count:int?}` 같은 플레이스홀더 두 개가 보이는데, 이는 바로 `string name`, `int? count` 같은 파라미터 변수로 치환시킬 수 있습니다 (line #6).\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-01.cs&highlights=5,6\n\n환경 변수를 통해 아래 두 값을 받아옵니다. 하나는 애저 키 저장소에 접근할 수 있는 URI이고, 다른 하나는 애저 키 저장소 인스턴스를 호스팅하는 테넌트의 ID값입니다.\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-02.cs\n\n다음으로는 애저 키 저장소에 접근할 수 있는 `SecretClient` 인스턴스를 생성한다. 이 때 인증 옵션을 `DefaultAzureCredentialOptions` 인스턴스를 통해 제공해야 하는데, 만약 개발하려는 로컬 컴퓨터에서 애저에 로그인한 계정이 여러 개의 테넌트 정보를 갖고 있다면, 아래와 같이 명시적으로 테넌트 ID 값을 지정해 줘야 하는데요, 그렇지 않으면 인증 에러가 발생합니다 (line #4-6).\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-03.cs&highlights=4-6\n\n시크릿 이름을 이미 알고 있기 때문에 아래와 같이 직접 이름을 호출해서 모든 시크릿 버전을 가져옵니다. 단, 활성화 된 것만 가져오면 되므로 아래와 같이 `WhereAwait` 구문으로 필터링을 하고 (line #5), 또한 `OrderByDescendingAwait` 구문을 이용해 시간의 역순으로 정렬해서 가장 최근 것이 맨 앞으로 오게끔 처리합니다 (line #6).\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-04.cs&highlights=5,6\n\n만약 해당 시크릿에는 활성화된 버전이 없다면, 더이상 처리할 것이 없으므로 `AcceptedResult` 인스턴스를 반환하는 것으로 펑션을 끝냅니다.\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-05.cs\n\n기본적으로 로테이션 관리를 하기 위해서는 버전이 최소 두 개가 필요하므로, 만약 `count` 값이 주어지지 않았다면 `2`를 기본값으로 해서 `count` 값을 초기화시킵니다.\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-06.cs\n\n현재 활성화된 시크릿 버전이 주어진 카운트 값 보다 많지 않다면 더이상 처리할 것이 없으므로 마찬가지로 `AcceptedResult` 인스턴스를 반환하고 펑션을 끝냅니다.\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-07.cs\n\n이제 남은 시크릿 버전을 대상으로 비활성화 처리를 해야 합니다. 주어진 `count` 값 만큼의 최신 버전을 건너뛰고 그 다음부터 처리합니다 (line #2). 그리고 Enabled 값을 false로 변경하고 (line #7), 업데이트합니다 (line #9).\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-08.cs&highlights=2,7,9\n\n마지막으로 처리 결과를 저장한 변수를 응답 개체에 실어 반환합니다.\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-09.cs\n\n이렇게 해서 애저 펑션 쪽의 구현은 끝났습니다. 이제 이를 애저로 배포하고 난 후 로직 앱에 연동시켜 보겠습니다.\n\n\n## 애저 로직 앱과 애저 펑션 연동 ##\n\n앞서 만들어 둔 애저 로직 앱 인스턴스에 아래와 같이 HTTP 액션과 응답 액션을 추가합니다. 애저 펑션 엔드포인트를 호출할 때 `ObjectName` 값과 `2`를 라우팅 파라미터로 추가한 것이 보일 겁니다.\n\n![로직 앱 추가 액션][image-07]\n\n이제 애저 키 저장소로부터 애저 이벤트그리드, 로직 앱, 애저 펑션을 이용한 종단간 프로세스 통합 작업은 끝났습니다. 실제로 이 워크플우를 실행시켜 볼까요?\n\n\n## 종단간 테스트 &ndash; 애저 키 저장소 시크릿 버전 추가 ##\n\n앞서 구현한 모든 통합 워크플로우를 실행시키기 위해서는 애저 키 저장소 인스턴스에 새 시크릿 버전을 추가해 보면 됩니다.\n\n![애저 키 저장소 시크릿 버전 리스트][image-08]\n\n아래와 같이 애저 키 저장소 인스턴스에 새 시크릿 버전을 추가해 보겠습니다.\n\n![애저 키 저장소 새 시크릿 버전 추가][image-09]\n\n아래와 같이 새 버전이 추가된 것이 보이나요?\n\n![애저 키 저장소 새 시크릿 버전 추가 결과][image-10]\n\n그리고 새 버전이 추가됐을 때 이벤트 그리드를 통해 로직 앱으로 받은 이벤트 데이터는 아래와 같습니다. `ObjectName` 값과, 새로 생성된 시크릿 버전 값이 위와 같은 것을 확인하셨나요?\n\n![로직 앱 실행 결과][image-11]\n\n이 로직 앱을 통해 애저 펑션을 호출하고 해당 시크릿의 로테이션 처리 결과가 적용된 애저 키 저장소를 살펴 보면 최신 두 버전을 제외하고 나머지는 모두 비활성화 상태로 바뀐 것이 보입니다.\n\n![애저 키 저장소 시크릿 버전 비활성화][image-12]\n\n<br/>\n\n---\n\n지금까지 [애저 키 저장소][az kv] 인스턴스에 새 [시크릿][az kv secrets] 버전이 추가되는 이벤트를 캡쳐해서, 해당 시크릿만 대상으로 [버전 로테이션 관리][az kv secrets rotation]를 하는 방법을 [애저 이벤트그리드][az evtgrd], [애저 로직 앱][az logapp], [애저 펑션][az fncapp]을 이용해서 구현해 보았습니다. 여러분의 실무에서도 이와 비슷한 방식으로 이벤트를 캡쳐해서 처리하게 하는 방식을 도입해 본다면 꽤 유용할 것입니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-02-ko.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-03-ko.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-04-ko.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-05-ko.png\n[image-06]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-06-ko.png\n[image-07]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-07-ko.png\n[image-08]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-08-ko.png\n[image-09]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-09-ko.png\n[image-10]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-10-ko.png\n[image-11]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-11-ko.png\n[image-12]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-12-ko.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[post prev 1]: /developerkorea/posts/2021/02/23/keyvault-secrets-rotation-management-in-bulk/\n[post prev 2]: /developerkorea/posts/2021/02/02/websub-to-eventgrid-via-cloudevents-and-beyond/\n[post prev 3]: /developerkorea/posts/2021/01/19/cloudevents-for-azure-eventgrid-via-azure-functions/\n\n[gh sample]: https://github.com/devkimchi/KeyVault-Reference-Sample/tree/2021-02-24\n\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az logapp connectors]: https://docs.microsoft.com/ko-kr/connectors/connectors?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az logapp connectors request]: https://docs.microsoft.com/ko-kr/azure/connectors/connectors-native-reqres?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az logapp connectors evtgrd]: https://docs.microsoft.com/ko-kr/connectors/azureeventgrid/?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az fncapp trigger http]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp&WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n\n[az kv]: https://docs.microsoft.com/ko-kr/azure/key-vault/general/overview?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az kv secrets]: https://docs.microsoft.com/ko-kr/azure/key-vault/secrets/about-secrets?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az kv secrets rotation]: https://docs.microsoft.com/ko-kr/azure/app-service/app-service-key-vault-references?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813#rotation\n[az kv evtgrd]: https://docs.microsoft.com/ko-kr/azure/key-vault/general/event-grid-overview?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az kv evtgrd type]: https://docs.microsoft.com/ko-kr/azure/event-grid/event-schema-key-vault?tabs=cloud-event-schema&WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n\n[az evtgrd]: https://docs.microsoft.com/ko-kr/azure/event-grid/overview?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az evtgrd delivery auth]: https://docs.microsoft.com/ko-kr/azure/event-grid/security-authentication?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n\n[cncf]: https://cncf.io/\n\n[ce]: https://cloudevents.io/\n[ce spec]: https://github.com/cloudevents/spec/tree/v1.0\n[ce spec http]: https://github.com/cloudevents/spec/blob/v1.0/http-protocol-binding.md\n"},"title":"이벤트 기반 애저 키 저장소 시크릿 로테이션 관리","content":"\n\n[지난 포스트][post prev 1]에서는 [애저 키 저장소][az kv]의 모든 [시크릿][az kv secrets] 값의 모든 버전을 한꺼번에 돌려보고 비활성화 시키는 방법에 대해 알아 보았습니다. 이 방법이 매우 간편하긴 하지만, 처음 한 번이나 두 번 정도 벌크로 진행할 때를 제외하고는 매번 모든 시크릿 값을 대상으로 진행하는 것은 어찌 보면 과하지 않을까 하는 느낌도 있습니다. 그렇다면, 특정 시크릿에 새 버전이 만들어졌을 때 그 시크릿만 체크해서 필요한 만큼 변경할 수 있는 방법은 없을까요? 물론 있습니다! 애저 키 저장소 인스턴스는 기본적으로 [애저 이벤트그리드][az evtgrd]를 통해 이벤트를 발생시키므로, 이를 활용하면 이벤트 기반으로 특정 시크릿에 대해서만 [버전 로테이션을 관리][az kv secrets rotation]할 수 있습니다.\n\n* [애저 키 저장소 시크릿 로테이션 관리][post prev 1]\n* ***이벤트 기반 애저 키 저장소 시크릿 로테이션 관리***\n\n이 포스트에서는 [애저 이벤트그리드][az evtgrd], [애저 로직 앱][az logapp], [애저 펑션][az fncapp]을 이용해서 특정 시크릿에 새 버전이 추가될 경우, 이를 자동으로 감지해서 로테이션 버전을 관리하는 방법에 대해 알아보기로 하겠습니다.\n\n> 실제 작동하는 코드를 보고 싶으신가요? 이 [깃헙 리포지토리][gh sample]에서 다운로드 받아 로컬에서 돌려보세요!\n\n\n## 애저 키 저장소 이벤트 ##\n\n애저 키 저장소는 [이벤트 그리드][az kv evtgrd]와 통합하여 시크릿에 새로 버전이 하나 추가될 때 마다 [이벤트를 발생시킵니다][az kv evtgrd type]. 따라서 이 이벤트를 받아서 처리하게 되면, 굳이 모든 시크릿을 한꺼번에 루프로 돌리지 않아도 개별 시크릿에 대해서만 작업할 수 있어서 상당히 편리합니다. 애저 키 저장소와 이벤트 그리드, 그리고 이벤트 처리기로서 [애저 로직 앱][az logapp]과 [애저 펑션 앱][az fncapp]을 통합한 전체 아키텍처는 대략 아래와 같습니다.\n\n![전체 E2E 프로세스 아키텍처][image-01]\n\n이벤트 처리기로 [애저 로직 앱][az logapp]을 사용하는 이유는 [이전 포스트][post prev 2]에서 언급한 바와 같이 [이벤트 그리드에서 요구하는 인증][az evtgrd delivery auth]을 내부적으로 손쉽게 처리할 수 있기 때문인데요, 만약 애저 펑션에서 직접 처리하고 싶다면 [이 포스트][post prev 3]를 참조하면 좋습니다.\n\n애저 키 저장소에 이벤트 처리기로서 로직 앱을 연동 시키는 방법은 크게 두 가지가 있습니다. 하나는 애저 키 저장소에서 [이벤트그리드 커넥터][az logapp connectors evtgrd]를 이용해 직접 로직 앱 인스턴스를 생성하는 방법이고, 다른 하나는 별도로 인스턴스를 생성한 후 HTTP 웹훅을 이용해 연동시키는 방법입니다. 전자의 경우 [커넥터][az logapp connectors]라는 의존성이 하나 생기는 반면, 후자는 키 저장소와 로직 앱이 독립적으로 작동하기 때문에 개인적으로는 의존성을 없앤 후자를 선호합니다.\n\n먼저 애저 로직 앱 인스턴스를 하나 만들고 [HTTP 트리거][az logapp connectors request]를 추가합니다.\n\n![로직앱 HTTP 트리거][image-02]\n\n이렇게 만들어 놓은 로직 앱의 URL을 이용해서 키 저장소에서 이벤트 처리기를 연동시켜 보겠습니다. 먼저 키 저장소 인스턴스의 이벤트 블레이드로 이동합니다. 그리고 `+ 이벤트 구독` 버튼을 클릭합니다.\n\n![이벤트 구독 생성 버튼][image-03]\n\n그러면 이벤트 구독 관련 인스턴스를 생성하는 화면이 나오는데, 아래와 같이 `이벤트 구독 인스턴스 이름`, `이벤트 스키마`, `시스템 토픽 인스턴스 이름`, `엔드포인트 정보`, `웹훅 엔드포인트 URL`을 선택합니다.\n\n![이벤트 구독 생성 상세 정보][image-04]\n\n* 이벤트 구독 정보 섹션에서는 이벤트 스키마로 [클라우드 이벤트 스키마 v1.0][ce spec http]을 선택했는데, 이는 애저 자체 표준 대신 [CNCF][cncf]에서 제시하는 표준인 [클라우드이벤트 스펙][ce spec]을 따르는 것이 향후 이기종간 통합에 편리하기 때문입니다.\n* 항목 정보 섹션에서는 이벤트 그리드 토픽 이름을 선택합니다.\n* 이벤트 유형 섹션에서는 이벤트 형식 중에서 `Secret New Version Created` 이벤트만 선택합니다.\n* 엔드포인트 정보 섹션에서는 엔드포인트 유형으로 웹훅/웹후크를 선택하고 엔드포인트 값을 앞서 만들어 놓은 로직 앱 엔드포인트 URL로 설정합니다.\n\n이렇게 하면 애저 키 저장소 인스턴스와 애저 이벤트그리드, 애저 로직 앱 사이에 이벤트 발생시 기본적으로 처리할 수 있는 파이프라인을 만들게 되는데요, 실제로 애저 키 저장소에서 시크릿의 새 버전을 하나 만들어 보면 아래와 같은 이벤트가 발생하는 것을 알 수 있습니다. 원하는 `Microsoft.KeyVault.SecretNewVersionCreated` 형식의 이벤트를 캡쳐한 것이 보입니다.\n\n![로직 앱 이벤트 캡쳐][image-05]\n\n그리고, 실제 이벤트 메시지 JSON 개체는 아래와 같이 생겼습니다.\n\n![로직 앱 이벤트 메시지 페이로드][image-06]\n\n`data` 속성 안에 보면 `ObjectName`이라고 있는데, 바로 이것이 시크릿 이름이고, 이 값을 앞으로 구현할 애저 펑션으로 보내서 해당 시크릿 이름에 대해서만 필요한 버전만 남겨두고 나머지를 비활성화 시키도록 할 예정입니다. 이제 애저 펑션의 구현을 살펴보도록 하겠습니다.\n\n\n## 애저 펑션을 통해 특정 시크릿에 대해서만 로테이션 관리하기 ##\n\n[지난 포스트][post prev 1]의 구현 내용과 크게 다르지 않지만, 이번에는 특정 시크릿에 대해서만 처리를 하는 내용이므로 펑션의 구현 내용이 살짝 간결해집니다. 먼저 새 [HTTP 트리거][az fncapp trigger http]를 하나 생성합니다.\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=01-func-new-http-trigger.sh\n\n기본 템플릿을 이용해 HTTP 트리거를 만들었습니다. 이제 이 펑션 메소드의 `HttpTrigger` 바인딩 설정을 아래와 같이 바꿉니다. HTTP 메소드는 `POST` 하나로 한정하고, 라우팅 URL을 `secrets/{name}/disable/{count:int?}` 처럼 바꿉니다 (line #5). 라우팅 URL에 보면 `{name}`, `{count:int?}` 같은 플레이스홀더 두 개가 보이는데, 이는 바로 `string name`, `int? count` 같은 파라미터 변수로 치환시킬 수 있습니다 (line #6).\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-01.cs&highlights=5,6\n\n환경 변수를 통해 아래 두 값을 받아옵니다. 하나는 애저 키 저장소에 접근할 수 있는 URI이고, 다른 하나는 애저 키 저장소 인스턴스를 호스팅하는 테넌트의 ID값입니다.\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-02.cs\n\n다음으로는 애저 키 저장소에 접근할 수 있는 `SecretClient` 인스턴스를 생성한다. 이 때 인증 옵션을 `DefaultAzureCredentialOptions` 인스턴스를 통해 제공해야 하는데, 만약 개발하려는 로컬 컴퓨터에서 애저에 로그인한 계정이 여러 개의 테넌트 정보를 갖고 있다면, 아래와 같이 명시적으로 테넌트 ID 값을 지정해 줘야 하는데요, 그렇지 않으면 인증 에러가 발생합니다 (line #4-6).\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-03.cs&highlights=4-6\n\n시크릿 이름을 이미 알고 있기 때문에 아래와 같이 직접 이름을 호출해서 모든 시크릿 버전을 가져옵니다. 단, 활성화 된 것만 가져오면 되므로 아래와 같이 `WhereAwait` 구문으로 필터링을 하고 (line #5), 또한 `OrderByDescendingAwait` 구문을 이용해 시간의 역순으로 정렬해서 가장 최근 것이 맨 앞으로 오게끔 처리합니다 (line #6).\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-04.cs&highlights=5,6\n\n만약 해당 시크릿에는 활성화된 버전이 없다면, 더이상 처리할 것이 없으므로 `AcceptedResult` 인스턴스를 반환하는 것으로 펑션을 끝냅니다.\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-05.cs\n\n기본적으로 로테이션 관리를 하기 위해서는 버전이 최소 두 개가 필요하므로, 만약 `count` 값이 주어지지 않았다면 `2`를 기본값으로 해서 `count` 값을 초기화시킵니다.\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-06.cs\n\n현재 활성화된 시크릿 버전이 주어진 카운트 값 보다 많지 않다면 더이상 처리할 것이 없으므로 마찬가지로 `AcceptedResult` 인스턴스를 반환하고 펑션을 끝냅니다.\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-07.cs\n\n이제 남은 시크릿 버전을 대상으로 비활성화 처리를 해야 합니다. 주어진 `count` 값 만큼의 최신 버전을 건너뛰고 그 다음부터 처리합니다 (line #2). 그리고 Enabled 값을 false로 변경하고 (line #7), 업데이트합니다 (line #9).\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-08.cs&highlights=2,7,9\n\n마지막으로 처리 결과를 저장한 변수를 응답 개체에 실어 반환합니다.\n\nhttps://gist.github.com/justinyoo/948385359cc739a48ad5afdf07db932e?file=02-disable-secret-http-trigger-09.cs\n\n이렇게 해서 애저 펑션 쪽의 구현은 끝났습니다. 이제 이를 애저로 배포하고 난 후 로직 앱에 연동시켜 보겠습니다.\n\n\n## 애저 로직 앱과 애저 펑션 연동 ##\n\n앞서 만들어 둔 애저 로직 앱 인스턴스에 아래와 같이 HTTP 액션과 응답 액션을 추가합니다. 애저 펑션 엔드포인트를 호출할 때 `ObjectName` 값과 `2`를 라우팅 파라미터로 추가한 것이 보일 겁니다.\n\n![로직 앱 추가 액션][image-07]\n\n이제 애저 키 저장소로부터 애저 이벤트그리드, 로직 앱, 애저 펑션을 이용한 종단간 프로세스 통합 작업은 끝났습니다. 실제로 이 워크플우를 실행시켜 볼까요?\n\n\n## 종단간 테스트 &ndash; 애저 키 저장소 시크릿 버전 추가 ##\n\n앞서 구현한 모든 통합 워크플로우를 실행시키기 위해서는 애저 키 저장소 인스턴스에 새 시크릿 버전을 추가해 보면 됩니다.\n\n![애저 키 저장소 시크릿 버전 리스트][image-08]\n\n아래와 같이 애저 키 저장소 인스턴스에 새 시크릿 버전을 추가해 보겠습니다.\n\n![애저 키 저장소 새 시크릿 버전 추가][image-09]\n\n아래와 같이 새 버전이 추가된 것이 보이나요?\n\n![애저 키 저장소 새 시크릿 버전 추가 결과][image-10]\n\n그리고 새 버전이 추가됐을 때 이벤트 그리드를 통해 로직 앱으로 받은 이벤트 데이터는 아래와 같습니다. `ObjectName` 값과, 새로 생성된 시크릿 버전 값이 위와 같은 것을 확인하셨나요?\n\n![로직 앱 실행 결과][image-11]\n\n이 로직 앱을 통해 애저 펑션을 호출하고 해당 시크릿의 로테이션 처리 결과가 적용된 애저 키 저장소를 살펴 보면 최신 두 버전을 제외하고 나머지는 모두 비활성화 상태로 바뀐 것이 보입니다.\n\n![애저 키 저장소 시크릿 버전 비활성화][image-12]\n\n<br/>\n\n---\n\n지금까지 [애저 키 저장소][az kv] 인스턴스에 새 [시크릿][az kv secrets] 버전이 추가되는 이벤트를 캡쳐해서, 해당 시크릿만 대상으로 [버전 로테이션 관리][az kv secrets rotation]를 하는 방법을 [애저 이벤트그리드][az evtgrd], [애저 로직 앱][az logapp], [애저 펑션][az fncapp]을 이용해서 구현해 보았습니다. 여러분의 실무에서도 이와 비슷한 방식으로 이벤트를 캡쳐해서 처리하게 하는 방식을 도입해 본다면 꽤 유용할 것입니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-02-ko.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-03-ko.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-04-ko.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-05-ko.png\n[image-06]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-06-ko.png\n[image-07]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-07-ko.png\n[image-08]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-08-ko.png\n[image-09]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-09-ko.png\n[image-10]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-10-ko.png\n[image-11]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-11-ko.png\n[image-12]: https://sa0blogs.blob.core.windows.net/aliencube/2021/02/event-driven-keyvault-secrets-rotation-management-12-ko.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[post prev 1]: /developerkorea/posts/2021/02/23/keyvault-secrets-rotation-management-in-bulk/\n[post prev 2]: /developerkorea/posts/2021/02/02/websub-to-eventgrid-via-cloudevents-and-beyond/\n[post prev 3]: /developerkorea/posts/2021/01/19/cloudevents-for-azure-eventgrid-via-azure-functions/\n\n[gh sample]: https://github.com/devkimchi/KeyVault-Reference-Sample/tree/2021-02-24\n\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az logapp connectors]: https://docs.microsoft.com/ko-kr/connectors/connectors?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az logapp connectors request]: https://docs.microsoft.com/ko-kr/azure/connectors/connectors-native-reqres?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az logapp connectors evtgrd]: https://docs.microsoft.com/ko-kr/connectors/azureeventgrid/?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az fncapp trigger http]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp&WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n\n[az kv]: https://docs.microsoft.com/ko-kr/azure/key-vault/general/overview?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az kv secrets]: https://docs.microsoft.com/ko-kr/azure/key-vault/secrets/about-secrets?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az kv secrets rotation]: https://docs.microsoft.com/ko-kr/azure/app-service/app-service-key-vault-references?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813#rotation\n[az kv evtgrd]: https://docs.microsoft.com/ko-kr/azure/key-vault/general/event-grid-overview?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az kv evtgrd type]: https://docs.microsoft.com/ko-kr/azure/event-grid/event-schema-key-vault?tabs=cloud-event-schema&WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n\n[az evtgrd]: https://docs.microsoft.com/ko-kr/azure/event-grid/overview?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n[az evtgrd delivery auth]: https://docs.microsoft.com/ko-kr/azure/event-grid/security-authentication?WT.mc_id=dotnet-17246-juyoo&ocid=AID3027813\n\n[cncf]: https://cncf.io/\n\n[ce]: https://cloudevents.io/\n[ce spec]: https://github.com/cloudevents/spec/tree/v1.0\n[ce spec http]: https://github.com/cloudevents/spec/blob/v1.0/http-protocol-binding.md\n"},"d864d9d2-5001-4d65-a0d5-78127b45c424":{"id":"d864d9d2-5001-4d65-a0d5-78127b45c424","index":"Blog","path":"/posts/2021/02/23/keyvault-secrets-rotation-management-in-bulk/","node":{"title":"애저 키 저장소 시크릿 로테이션 관리하기","category":"Azure","description":"이 포스트에서는 애저 키 저장소의 시크릿 값을 로테이션할 때 애저 펑션을 이용해 일정 기간 이상 오래된 시크릿 값을 한 번에 비활성화 시키는 방법에 대해 알아봅니다.","content":"\n\n얼마전 [애저 키 저장소][az kv] 시크릿 값을 [애저 앱 서비스][az appsvc] 혹은 [애저 펑션][az fncapp]에서 참조할 때, 더이상 버전을 명시하지 않아도 된다는 [공지][az kv announcement]가 있었습니다. 따라서, [지난 포스트][post prev]에서 언급했던 [애저 키 저장소의 시크릿 값][az kv secrets]을 참조하는 방법들 중 두번째 방법이 이전에는 덜 효율적이었다면 이제는 가장 효율적인 접근 방식이 되었습니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=01-keyvault-reference.txt\n\n위와 같이 설정하면 애저 앱 서비스와 애저 펑션 앱에서 가장 최신 버전의 시크릿 값을 자동으로 가져와서 보여줍니다. 만약 최신 버전의 시크릿 값이 생성된지 아직 만 하루가 지나지 않았다면, 애저 앱 서비스 혹은 애저 펑션 내부적으로 작동하는 캐싱 메카니즘이 완전히 값을 받아오지 않았을 수도 있기 때문에, 이전 버전과 함께 [로테이션][az kv secrets rotation]을 시켜줘야 합니다. 이 때 로테이션을 위해서는 가급적이면 두 가지 버전 정도로만 활성화 상태로 유지하고 나머지는 비활성화 시켜주는 것이 보안상의 관점에서도 좋습니다.\n\n* ***애저 키 저장소 시크릿 로테이션 관리***\n* [이벤트 기반 애저 키 저장소 시크릿 로테이션 관리][post next]\n\n[애저 키 저장소][az kv]에 저장할 수 있는 시크릿의 갯수는 딱히 제한된 것이 없습니다. 따라서 현업에서 사용하다 보면 굉장히 많은 수의 시크릿을 저장하게 되는데, 이럴 경우 로테이션에 더이상 쓰이지 않는 시크릿 버전을 일일이 찾아 비활성화 시켜주기에는 너무 많을 수 있습니다. 그렇다면, 이를 자동화할 수 있는 방법에는 무엇이 있을까요? 이 포스트에서는 오래되었지만 여전히 활성화 상태로 남아있는 시크릿 버전들을 일괄적으로 비활성화시키는 방법을 애저 펑션으로 구현해 보기로 합니다.\n\n> 실제 작동하는 코드를 보고 싶으신가요? 이 [깃헙 리포지토리][gh sample]에서 다운로드 받아 로컬에서 돌려보세요!\n\n\n## 애저 키 저장소 SDK ##\n\n애저 키 저장소를 다루는 SDK는 현재 두 가지 버전이 있습니다.\n\n* [Microsoft.Azure.KeyVault][nuget sdk kv old]\n* [Azure.Security.KeyVault.Secrets][nuget sdk kv new]\n\n이 중 전자는 이제 deprecated 된 버전이라서, 후자를 사용하면 됩니다. 이와 더불어 [Azure.Identity][nuget sdk identity] SDK도 함께 다운로드 받아 사용하도록 하겠습니다. 애저 펑션 프로젝트를 생성한 후 아래와 같이 두 NuGet 패키지를 설치합니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=02-add-nuget-packages.sh\n\n또한, 키 저장소 SDK 패키지는 `IAsyncEnumerable` 인터페이스를 사용하므로 [System.Linq.Async][nuget linq async] 패키지도 함께 다운로드 받습니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=03-add-nuget-packages.sh\n\n> **NOTE**: 애저 펑션은 아직 .NET 5를 지원하지 않으므로 `System.Linq.Async` 5.0.0 버전의 패키지를 설치하지 않도록 조심합니다.\n\n이제 필요한 라이브러리 설치는 다 끝났고, 실제로 펑션 코드를 구현해 볼까요?\n\n\n## 오래된 시크릿 버전 비활성화를 위한 애저 펑션 구현 ##\n\n아래 명령어를 통해 애저 펑션 [HTTP 트리거][az fncapp trigger http]를 하나 만들겠습니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=04-add-new-httptrigger.sh\n\n기본 HTTP 트리거 템플릿으로 펑션이 하나 만들어 졌습니다. 이제 이 펑션 메소드의 `HttpTrigger` 바인딩을 아래와 같이 바꿔보겠습니다. HTTP 메소드는 `POST` 하나로 한정하고, 라우팅 URL을 `secrets/all/disable`로 두었습니다 (line #5).\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-01.cs&highlights=5\n\n환경 변수를 통해 아래 두 값을 받아옵니다. 하나는 애저 키 저장소에 접근할 수 있는 URI이고, 다른 하나는 애저 키 저장소 인스턴스를 호스팅하는 테넌트의 ID값입니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-02.cs\n\n다음으로는 애저 키 저장소에 접근할 수 있는 `SecretClient` 인스턴스를 생성합니다. 이 때 인증 옵션을 `DefaultAzureCredentialOptions` 인스턴스를 통해 제공해야 하는데요, 만약 개발하려는 로컬 컴퓨터에서 애저에 로그인한 계정이 여러 개의 테넌트 정보를 갖고 있다면, 아래와 같이 명시적으로 테넌트 ID 값을 지정해 줘야 합니다. 그렇지 않으면 [인증 에러][nuget sdk identity error]가 발생합니다 (line #4-6).\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-03.cs&highlights=4-6\n\n이제 모든 시크릿을 가져와서 하나씩 처리를 해야 합니다. 가장 먼저 할 일은 모든 시크릿을 가져오는 것입니다 (line #2-4).\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-04.cs&highlights=2-4\n\n이제 각각의 시크릿을 하나씩 돌면서 모든 버전을 가져옵니다. 단, 활성화 된 것만 가져오면 되므로 아래와 같이 `WhereAwait` 구문으로 필터링을 합니다 (line #7). 또한 `OrderByDescendingAwait` 구문을 이용해 시간의 역순으로 정렬해서 가장 최근 것이 맨 앞으로 오게끔 합니다 (line #8).\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-05.cs&highlights=7,8\n\n만약 해당 시크릿에는 활성화된 버전이 없다면, 더이상 처리할 것이 없으므로 넘어갑니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-06.cs\n\n만약 해당 시크릿에는 활성화된 버전이 하나뿐이라면, 더이상 처리할 것이 없으므로 넘어갑니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-07.cs\n\n만약 해당 시크릿의 최신 버전이 생성된지 만 하루가 안 됐다면, 아직 로테이션이 필요하므로 넘어갑니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-08.cs\n\n이제 남은 시크릿 버전을 대상으로 비활성화 처리를 해야 합니다. 가장 최신의 버전은 건너뛰고 그 다음부터 처리합니다 (line #2). 그리고 `Enabled` 값을 `false`로 변경하고 (line #6), 업데이트합니다 (line #8).\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-09.cs&highlights=2,6,8\n\n마지막으로 처리 결과를 저장한 변수를 응답 개체에 실어 반환합니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-10.cs\n\n이렇게 한 후 실제로 애저 펑션을 실행시켜 보면 가장 최신의 시크릿 버전을 제외한 모든 오래된 버전이 비활성화 된 것을 확인할 수 있는데요, 이 펑션앱에서 [HTTP 트리거][az fncapp trigger http] 대신 [타이머 트리거][az fncapp trigger timer]를 붙인다든가, 아니면 [애저 로직 앱][az logapp]을 연동시켜 스케줄링을 걸어 놓는다면 더이상 활성화 되어 있지만 더이상 사용하지 않는 애저 키 저장소의 시크릿 버전들에 대한 걱정을 덜 수 있을 것입니다.\n\n---\n\n지금까지 [애저 키 저장소][az kv]의 시크릿 값을 [애저 앱 서비스][az appsvc] 혹은 [애저 펑션][az fncapp]에서 참조할 때 더이상 사용하지 않는 시크릿 버전을 자동으로 비활성화 시키는 방법에 대해 알아 보았습니다. 이렇게 자동화를 시켜놓으면 추가적인 관리 부담을 줄일 수 있으니 한 번 시도해 보면 좋겠습니다. [다음 포스트][post next]에서는 시크릿에 새 버전이 추가될 경우 발생하는 이벤트를 통해 특정 시크릿만을 대상으로 로테이션 관리를 하는 방법에 대해 알아보겠습니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[post prev]: https://blog.aliencube.org/ko/2020/04/30/3-ways-referencing-azure-key-vault-from-azure-functions/\n[post next]: /developerkorea/posts/2021/03/02/event-driven-keyvault-secrets-rotation-management/\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[gh sample]: https://github.com/devkimchi/KeyVault-Reference-Sample/tree/2021-02-17\n\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n\n[az appsvc]: https://docs.microsoft.com/ko-kr/azure/app-service/?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[az fncapp trigger http]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp&WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[az fncapp trigger timer]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-timer?tabs=csharp&WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n\n[az kv]: https://docs.microsoft.com/ko-kr/azure/key-vault/general/overview?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[az kv announcement]: https://azure.microsoft.com/ko-kr/updates/versions-no-longer-required-for-key-vault-references-in-app-service-and-azure-functions/?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[az kv secrets]: https://docs.microsoft.com/ko-kr/azure/key-vault/secrets/about-secrets?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[az kv secrets rotation]: https://docs.microsoft.com/ko-kr/azure/app-service/app-service-key-vault-references?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813#rotation\n\n[nuget sdk kv old]: https://www.nuget.org/packages/Microsoft.Azure.KeyVault/\n[nuget sdk kv new]: https://www.nuget.org/packages/Azure.Security.KeyVault.Secrets/\n[nuget linq async]: https://www.nuget.org/packages/System.Linq.Async/\n[nuget sdk identity]: https://www.nuget.org/packages/Azure.Identity/\n[nuget sdk identity error]: https://github.com/Azure/azure-sdk-for-net/issues/11559#issuecomment-620233531\n"},"title":"애저 키 저장소 시크릿 로테이션 관리하기","content":"\n\n얼마전 [애저 키 저장소][az kv] 시크릿 값을 [애저 앱 서비스][az appsvc] 혹은 [애저 펑션][az fncapp]에서 참조할 때, 더이상 버전을 명시하지 않아도 된다는 [공지][az kv announcement]가 있었습니다. 따라서, [지난 포스트][post prev]에서 언급했던 [애저 키 저장소의 시크릿 값][az kv secrets]을 참조하는 방법들 중 두번째 방법이 이전에는 덜 효율적이었다면 이제는 가장 효율적인 접근 방식이 되었습니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=01-keyvault-reference.txt\n\n위와 같이 설정하면 애저 앱 서비스와 애저 펑션 앱에서 가장 최신 버전의 시크릿 값을 자동으로 가져와서 보여줍니다. 만약 최신 버전의 시크릿 값이 생성된지 아직 만 하루가 지나지 않았다면, 애저 앱 서비스 혹은 애저 펑션 내부적으로 작동하는 캐싱 메카니즘이 완전히 값을 받아오지 않았을 수도 있기 때문에, 이전 버전과 함께 [로테이션][az kv secrets rotation]을 시켜줘야 합니다. 이 때 로테이션을 위해서는 가급적이면 두 가지 버전 정도로만 활성화 상태로 유지하고 나머지는 비활성화 시켜주는 것이 보안상의 관점에서도 좋습니다.\n\n* ***애저 키 저장소 시크릿 로테이션 관리***\n* [이벤트 기반 애저 키 저장소 시크릿 로테이션 관리][post next]\n\n[애저 키 저장소][az kv]에 저장할 수 있는 시크릿의 갯수는 딱히 제한된 것이 없습니다. 따라서 현업에서 사용하다 보면 굉장히 많은 수의 시크릿을 저장하게 되는데, 이럴 경우 로테이션에 더이상 쓰이지 않는 시크릿 버전을 일일이 찾아 비활성화 시켜주기에는 너무 많을 수 있습니다. 그렇다면, 이를 자동화할 수 있는 방법에는 무엇이 있을까요? 이 포스트에서는 오래되었지만 여전히 활성화 상태로 남아있는 시크릿 버전들을 일괄적으로 비활성화시키는 방법을 애저 펑션으로 구현해 보기로 합니다.\n\n> 실제 작동하는 코드를 보고 싶으신가요? 이 [깃헙 리포지토리][gh sample]에서 다운로드 받아 로컬에서 돌려보세요!\n\n\n## 애저 키 저장소 SDK ##\n\n애저 키 저장소를 다루는 SDK는 현재 두 가지 버전이 있습니다.\n\n* [Microsoft.Azure.KeyVault][nuget sdk kv old]\n* [Azure.Security.KeyVault.Secrets][nuget sdk kv new]\n\n이 중 전자는 이제 deprecated 된 버전이라서, 후자를 사용하면 됩니다. 이와 더불어 [Azure.Identity][nuget sdk identity] SDK도 함께 다운로드 받아 사용하도록 하겠습니다. 애저 펑션 프로젝트를 생성한 후 아래와 같이 두 NuGet 패키지를 설치합니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=02-add-nuget-packages.sh\n\n또한, 키 저장소 SDK 패키지는 `IAsyncEnumerable` 인터페이스를 사용하므로 [System.Linq.Async][nuget linq async] 패키지도 함께 다운로드 받습니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=03-add-nuget-packages.sh\n\n> **NOTE**: 애저 펑션은 아직 .NET 5를 지원하지 않으므로 `System.Linq.Async` 5.0.0 버전의 패키지를 설치하지 않도록 조심합니다.\n\n이제 필요한 라이브러리 설치는 다 끝났고, 실제로 펑션 코드를 구현해 볼까요?\n\n\n## 오래된 시크릿 버전 비활성화를 위한 애저 펑션 구현 ##\n\n아래 명령어를 통해 애저 펑션 [HTTP 트리거][az fncapp trigger http]를 하나 만들겠습니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=04-add-new-httptrigger.sh\n\n기본 HTTP 트리거 템플릿으로 펑션이 하나 만들어 졌습니다. 이제 이 펑션 메소드의 `HttpTrigger` 바인딩을 아래와 같이 바꿔보겠습니다. HTTP 메소드는 `POST` 하나로 한정하고, 라우팅 URL을 `secrets/all/disable`로 두었습니다 (line #5).\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-01.cs&highlights=5\n\n환경 변수를 통해 아래 두 값을 받아옵니다. 하나는 애저 키 저장소에 접근할 수 있는 URI이고, 다른 하나는 애저 키 저장소 인스턴스를 호스팅하는 테넌트의 ID값입니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-02.cs\n\n다음으로는 애저 키 저장소에 접근할 수 있는 `SecretClient` 인스턴스를 생성합니다. 이 때 인증 옵션을 `DefaultAzureCredentialOptions` 인스턴스를 통해 제공해야 하는데요, 만약 개발하려는 로컬 컴퓨터에서 애저에 로그인한 계정이 여러 개의 테넌트 정보를 갖고 있다면, 아래와 같이 명시적으로 테넌트 ID 값을 지정해 줘야 합니다. 그렇지 않으면 [인증 에러][nuget sdk identity error]가 발생합니다 (line #4-6).\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-03.cs&highlights=4-6\n\n이제 모든 시크릿을 가져와서 하나씩 처리를 해야 합니다. 가장 먼저 할 일은 모든 시크릿을 가져오는 것입니다 (line #2-4).\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-04.cs&highlights=2-4\n\n이제 각각의 시크릿을 하나씩 돌면서 모든 버전을 가져옵니다. 단, 활성화 된 것만 가져오면 되므로 아래와 같이 `WhereAwait` 구문으로 필터링을 합니다 (line #7). 또한 `OrderByDescendingAwait` 구문을 이용해 시간의 역순으로 정렬해서 가장 최근 것이 맨 앞으로 오게끔 합니다 (line #8).\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-05.cs&highlights=7,8\n\n만약 해당 시크릿에는 활성화된 버전이 없다면, 더이상 처리할 것이 없으므로 넘어갑니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-06.cs\n\n만약 해당 시크릿에는 활성화된 버전이 하나뿐이라면, 더이상 처리할 것이 없으므로 넘어갑니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-07.cs\n\n만약 해당 시크릿의 최신 버전이 생성된지 만 하루가 안 됐다면, 아직 로테이션이 필요하므로 넘어갑니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-08.cs\n\n이제 남은 시크릿 버전을 대상으로 비활성화 처리를 해야 합니다. 가장 최신의 버전은 건너뛰고 그 다음부터 처리합니다 (line #2). 그리고 `Enabled` 값을 `false`로 변경하고 (line #6), 업데이트합니다 (line #8).\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-09.cs&highlights=2,6,8\n\n마지막으로 처리 결과를 저장한 변수를 응답 개체에 실어 반환합니다.\n\nhttps://gist.github.com/justinyoo/75c16e773d9e1c8b8a1d5d5efa37f9c9?file=05-secrets-httptrigger-10.cs\n\n이렇게 한 후 실제로 애저 펑션을 실행시켜 보면 가장 최신의 시크릿 버전을 제외한 모든 오래된 버전이 비활성화 된 것을 확인할 수 있는데요, 이 펑션앱에서 [HTTP 트리거][az fncapp trigger http] 대신 [타이머 트리거][az fncapp trigger timer]를 붙인다든가, 아니면 [애저 로직 앱][az logapp]을 연동시켜 스케줄링을 걸어 놓는다면 더이상 활성화 되어 있지만 더이상 사용하지 않는 애저 키 저장소의 시크릿 버전들에 대한 걱정을 덜 수 있을 것입니다.\n\n---\n\n지금까지 [애저 키 저장소][az kv]의 시크릿 값을 [애저 앱 서비스][az appsvc] 혹은 [애저 펑션][az fncapp]에서 참조할 때 더이상 사용하지 않는 시크릿 버전을 자동으로 비활성화 시키는 방법에 대해 알아 보았습니다. 이렇게 자동화를 시켜놓으면 추가적인 관리 부담을 줄일 수 있으니 한 번 시도해 보면 좋겠습니다. [다음 포스트][post next]에서는 시크릿에 새 버전이 추가될 경우 발생하는 이벤트를 통해 특정 시크릿만을 대상으로 로테이션 관리를 하는 방법에 대해 알아보겠습니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[post prev]: https://blog.aliencube.org/ko/2020/04/30/3-ways-referencing-azure-key-vault-from-azure-functions/\n[post next]: /developerkorea/posts/2021/03/02/event-driven-keyvault-secrets-rotation-management/\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[gh sample]: https://github.com/devkimchi/KeyVault-Reference-Sample/tree/2021-02-17\n\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n\n[az appsvc]: https://docs.microsoft.com/ko-kr/azure/app-service/?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[az fncapp trigger http]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp&WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[az fncapp trigger timer]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-timer?tabs=csharp&WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n\n[az kv]: https://docs.microsoft.com/ko-kr/azure/key-vault/general/overview?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[az kv announcement]: https://azure.microsoft.com/ko-kr/updates/versions-no-longer-required-for-key-vault-references-in-app-service-and-azure-functions/?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[az kv secrets]: https://docs.microsoft.com/ko-kr/azure/key-vault/secrets/about-secrets?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813\n[az kv secrets rotation]: https://docs.microsoft.com/ko-kr/azure/app-service/app-service-key-vault-references?WT.mc_id=dotnet-16807-juyoo&ocid=AID3027813#rotation\n\n[nuget sdk kv old]: https://www.nuget.org/packages/Microsoft.Azure.KeyVault/\n[nuget sdk kv new]: https://www.nuget.org/packages/Azure.Security.KeyVault.Secrets/\n[nuget linq async]: https://www.nuget.org/packages/System.Linq.Async/\n[nuget sdk identity]: https://www.nuget.org/packages/Azure.Identity/\n[nuget sdk identity error]: https://github.com/Azure/azure-sdk-for-net/issues/11559#issuecomment-620233531\n"},"82d566ad-fa1e-4a41-b3aa-d156b35665a0":{"id":"82d566ad-fa1e-4a41-b3aa-d156b35665a0","index":"Blog","path":"/posts/2021/03/09/enabling-openapi-on-azure-functions/","node":{"title":"애저 펑션에 Open API 활성화 시키기","category":"Azure","description":"이 포스트에서는 애저 펑션에서 Open API 기능을 활성화 시키는 방법에 대해 알아 봅니다.","content":"\n[애저 펑션][az fncapp]에서는 현재 [v1 런타임에 대해서만 프리뷰 형태로 Open API 지원][az fncapp v1 openapi]을 하고 있습니다. 하지만, 애저 펑션의 현재 런타임 버전은 v3인데, 아직까지 v2 버전 이후로 공식적으로 Open API 기능을 지원하지 않습니다. 다행히도 [이 확장 기능][gh openapi]을 사용하면 애저 펑션에 [Open API][openapi] 기능을 활성화 시킬 수 있는데, 이 포스트에서는 이 확장 기능을 사용하는 방법에 대해 알아보기로 하겠습니다.\n\n> **NOTE**: 현재 이 [확장 기능][gh openapi]은 프리뷰 상태로, 정식 출시되기 전입니다. 미리 사용해 보시고, 피드백을 [깃헙 이슈][gh openapi issues]에 남겨주세요!\n\n\n## 애저 펑션 앱 생성하기 ##\n\n가장 먼저 애저 펑션 프로젝트를 생성합니다.\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=01-func-init.sh\n\n그 다음에 [HTTP 트리거 펑션][az fncapp trigger http]을 하나 생성합니다.\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=02-func-new.sh\n\n그러면 아래와 같이 기본 HTTP 트리거 펑션 코드가 만들어 집니다.\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=03-default-http-trigger.cs\n\n이제 아래 명령어를 통해 이 애저 펑션 앱을 한 번 실행시켜 보겠습니다.\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=04-func-start.sh\n\n예상한 바와 같이 애저 펑션의 엔드포인트는 `/api/DefaultHttpTrigger` 하나만 보입니다.\n\n![애저 펑션 엔드포인트][image-01]\n\n\n## Open API 기본 기능 추가하기 ##\n\n이제 Open API 기능을 활성화 시키기 위해 NuGet 패키지를 설치할 차례입니다. 아래 명령어를 통해 [확장 기능 패키지 라이브러리][nuget openapi]를 설치합니다.\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=05-dotnet-add-package.sh\n\n> **NOTE**: 이 포스트를 작성하는 시점에서 이 확장 기능 패키지 라이브러리의 버전은 `0.5.1-preview` 입니다.\n\n이제 다시 한 번 애저 펑션 앱을 실행시켜 보겠습니다. 그러면 추가적인 엔드포인트가 보입니다.\n\n![애저 펑션 Open API용 추가 엔드포인트][image-02]\n\n이 추가 엔드포인트를 통해 Open API 기능을 확인할 수 있습니다. 웹 브라우저를 통해 맨 아래에 있는 `http://localhost:7071/api/swagger/ui` 주소로 접속해 보겠습니다. 아래와 같이 Swagger UI 페이지를 볼 수 있습니다.\n\n![Swagger UI 페이지 - 엔드포인트 안보임][image-03]\n\n그런데, 위 페이지를 보면 분명히 이 앱에서는 `/api/DefaultHttpTrigger`라는 엔드포인트가 있는데, 이 UI에서는 없다고 나옵니다. 어떻게 된 일일까요? 아직 해당 엔드포인트에 설정을 하지 않은 상태라서 그렇습니다. 이제 아래와 같이 Open API 관련 설정을 엔드포인트에 추가해 보도록 하겠습니다 (line #3-5).\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=06-default-http-trigger.cs&highlights=3-5\n\n* `OpenApiOperation`: Open API 스펙에 따르면 모든 엔드포인트는 고유의 Operation ID 값을 갖고 있어야 합니다. 이를 정의하는 데코레이터입니다.\n* `OpenApiParameter`: 이 엔드포인트로 파라미터를 보내는 방법에 대해 정의합니다. 여기서는 쿼리스트링으로 `name`이라는 파라미터를 통해 값을 전송합니다.\n* `OpenApiResponseWithBody`: 이 엔드포인트로 HTTP 요청을 보낼 때 받을 수 있는 응답 개체의 형식을 정의합니다. 여기서는 `text/plain` 형식으로 문자열을 반환합니다.\n\n위와 같이 설정한 후 다시 펑션 앱을 실행시켜 보면 아래와 같이 UI 페이지에서 엔드포인트가 보입니다!\n\n![Swagger UI 페이지 - 엔드포인트 보임][image-04]\n\n\n## Open API 보안 기능 추가하기 ##\n\n일반적으로 API는 부정한 방법으로 접근하는 것을 방지하기 위해 보안 설정을 하죠. 그렇다면, 이 확장 기능으로는 어떻게 이 보안 설정을 정의할까요? 아래 코드를 한 번 보겠습니다 (line #7).\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=07-default-http-trigger.cs&highlights=7\n\n* `OpenApiSecurity`: 애저 펑션은 기본적으로 API Key 값을 통해 보안을 설정할 수 있습니다. 이 키 값을 쿼리스트링으로 보낼 때는 `code`라는 파라미터로, 요청 헤더를 통해 보낼 때는 `x-functions-key`를 통해 보내는데요, 여기서는 쿼리스트링으로 보내는 것으로 정의합니다.\n\n이렇게 한 후, 다시 펑션 앱을 실행시켜 보겠습니다. 아래 그림에 보면 전에 보이지 않던 `Authorize 🔓` 버튼이 보입니다.\n\n![Swagger UI 페이지 - 자물쇠 열림][image-05]\n\n이 버튼을 클릭해 보면 아래와 같은 팝업 창이 생기는데요, 여기에 애저 펑션의 API Key 값을 입력합니다. 현재는 로컬 개발 환경에서 실행시키고 있으니, 아무 값이나 넣어도 상관 없습니다. 쿼리스트링에 `code`라는 파라미터로 추가하는 것이 보이시나요?\n\n![Swagger UI 페이지 - 인증 팝업][image-06]\n\n인증을 하고 나면 아래와 같이 자물쇠 모양이 잠긴 것을 확인합니다.\n\n![Swagger UI 페이지 - 자물쇠 닫힘][image-07]\n\n그리고, UI 상에서 이 엔드포인트를 실행시켜 볼까요? `name` 필드에 아무 값이나 넣고 실행시켜 보면 아래와 같습니다. 쿼리스트링에 `code=abcde` 값이 포함된 것을 볼 수 있습니다.\n\n![Swagger UI 페이지 - API 실행][image-08]\n\n<br />\n\n---\n\n이렇게 해서 애저 펑션에 Open API 기능을 활성화 시키는 방법에 대해 알아 봤습니다. 한 가지 문제가 있다면, 이 확장 기능은 런타임 버전 v2 이상만을 지원한다는 건데요, 여러 가지 이유로 v1 런타임을 사용해야 하는 경우에는 어떻게 해야 할까요? [다음 포스트][post next]에서는 애저 펑션 런타임 v1을 지원하는 방법에 대해 알아보도록 하겠습니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-04.png\n[image-05]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-05.png\n[image-06]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-06.png\n[image-07]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-07.png\n[image-08]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-08.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-19697-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-19697-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[post next]: /developerkorea/posts/2021/03/16/openapi-extension-to-support-azure-functions-v1/\n\n[gh openapi]: https://github.com/Azure/azure-functions-openapi-extension\n[gh openapi issues]: https://github.com/Azure/azure-functions-openapi-extension/issues\n\n[nuget openapi]: https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.OpenApi/\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-19697-juyoo&ocid=AID3027813\n[az fncapp v1 openapi]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-openapi-definition?WT.mc_id=dotnet-19697-juyoo&ocid=AID3027813\n[az fncapp trigger http]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp&WT.mc_id=dotnet-19697-juyoo&ocid=AID3027813\n\n[openapi]: https://www.openapis.org/\n"},"title":"애저 펑션에 Open API 활성화 시키기","content":"\n[애저 펑션][az fncapp]에서는 현재 [v1 런타임에 대해서만 프리뷰 형태로 Open API 지원][az fncapp v1 openapi]을 하고 있습니다. 하지만, 애저 펑션의 현재 런타임 버전은 v3인데, 아직까지 v2 버전 이후로 공식적으로 Open API 기능을 지원하지 않습니다. 다행히도 [이 확장 기능][gh openapi]을 사용하면 애저 펑션에 [Open API][openapi] 기능을 활성화 시킬 수 있는데, 이 포스트에서는 이 확장 기능을 사용하는 방법에 대해 알아보기로 하겠습니다.\n\n> **NOTE**: 현재 이 [확장 기능][gh openapi]은 프리뷰 상태로, 정식 출시되기 전입니다. 미리 사용해 보시고, 피드백을 [깃헙 이슈][gh openapi issues]에 남겨주세요!\n\n\n## 애저 펑션 앱 생성하기 ##\n\n가장 먼저 애저 펑션 프로젝트를 생성합니다.\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=01-func-init.sh\n\n그 다음에 [HTTP 트리거 펑션][az fncapp trigger http]을 하나 생성합니다.\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=02-func-new.sh\n\n그러면 아래와 같이 기본 HTTP 트리거 펑션 코드가 만들어 집니다.\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=03-default-http-trigger.cs\n\n이제 아래 명령어를 통해 이 애저 펑션 앱을 한 번 실행시켜 보겠습니다.\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=04-func-start.sh\n\n예상한 바와 같이 애저 펑션의 엔드포인트는 `/api/DefaultHttpTrigger` 하나만 보입니다.\n\n![애저 펑션 엔드포인트][image-01]\n\n\n## Open API 기본 기능 추가하기 ##\n\n이제 Open API 기능을 활성화 시키기 위해 NuGet 패키지를 설치할 차례입니다. 아래 명령어를 통해 [확장 기능 패키지 라이브러리][nuget openapi]를 설치합니다.\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=05-dotnet-add-package.sh\n\n> **NOTE**: 이 포스트를 작성하는 시점에서 이 확장 기능 패키지 라이브러리의 버전은 `0.5.1-preview` 입니다.\n\n이제 다시 한 번 애저 펑션 앱을 실행시켜 보겠습니다. 그러면 추가적인 엔드포인트가 보입니다.\n\n![애저 펑션 Open API용 추가 엔드포인트][image-02]\n\n이 추가 엔드포인트를 통해 Open API 기능을 확인할 수 있습니다. 웹 브라우저를 통해 맨 아래에 있는 `http://localhost:7071/api/swagger/ui` 주소로 접속해 보겠습니다. 아래와 같이 Swagger UI 페이지를 볼 수 있습니다.\n\n![Swagger UI 페이지 - 엔드포인트 안보임][image-03]\n\n그런데, 위 페이지를 보면 분명히 이 앱에서는 `/api/DefaultHttpTrigger`라는 엔드포인트가 있는데, 이 UI에서는 없다고 나옵니다. 어떻게 된 일일까요? 아직 해당 엔드포인트에 설정을 하지 않은 상태라서 그렇습니다. 이제 아래와 같이 Open API 관련 설정을 엔드포인트에 추가해 보도록 하겠습니다 (line #3-5).\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=06-default-http-trigger.cs&highlights=3-5\n\n* `OpenApiOperation`: Open API 스펙에 따르면 모든 엔드포인트는 고유의 Operation ID 값을 갖고 있어야 합니다. 이를 정의하는 데코레이터입니다.\n* `OpenApiParameter`: 이 엔드포인트로 파라미터를 보내는 방법에 대해 정의합니다. 여기서는 쿼리스트링으로 `name`이라는 파라미터를 통해 값을 전송합니다.\n* `OpenApiResponseWithBody`: 이 엔드포인트로 HTTP 요청을 보낼 때 받을 수 있는 응답 개체의 형식을 정의합니다. 여기서는 `text/plain` 형식으로 문자열을 반환합니다.\n\n위와 같이 설정한 후 다시 펑션 앱을 실행시켜 보면 아래와 같이 UI 페이지에서 엔드포인트가 보입니다!\n\n![Swagger UI 페이지 - 엔드포인트 보임][image-04]\n\n\n## Open API 보안 기능 추가하기 ##\n\n일반적으로 API는 부정한 방법으로 접근하는 것을 방지하기 위해 보안 설정을 하죠. 그렇다면, 이 확장 기능으로는 어떻게 이 보안 설정을 정의할까요? 아래 코드를 한 번 보겠습니다 (line #7).\n\nhttps://gist.github.com/justinyoo/2516ec59b204e2bbf85181620f1d0aea?file=07-default-http-trigger.cs&highlights=7\n\n* `OpenApiSecurity`: 애저 펑션은 기본적으로 API Key 값을 통해 보안을 설정할 수 있습니다. 이 키 값을 쿼리스트링으로 보낼 때는 `code`라는 파라미터로, 요청 헤더를 통해 보낼 때는 `x-functions-key`를 통해 보내는데요, 여기서는 쿼리스트링으로 보내는 것으로 정의합니다.\n\n이렇게 한 후, 다시 펑션 앱을 실행시켜 보겠습니다. 아래 그림에 보면 전에 보이지 않던 `Authorize 🔓` 버튼이 보입니다.\n\n![Swagger UI 페이지 - 자물쇠 열림][image-05]\n\n이 버튼을 클릭해 보면 아래와 같은 팝업 창이 생기는데요, 여기에 애저 펑션의 API Key 값을 입력합니다. 현재는 로컬 개발 환경에서 실행시키고 있으니, 아무 값이나 넣어도 상관 없습니다. 쿼리스트링에 `code`라는 파라미터로 추가하는 것이 보이시나요?\n\n![Swagger UI 페이지 - 인증 팝업][image-06]\n\n인증을 하고 나면 아래와 같이 자물쇠 모양이 잠긴 것을 확인합니다.\n\n![Swagger UI 페이지 - 자물쇠 닫힘][image-07]\n\n그리고, UI 상에서 이 엔드포인트를 실행시켜 볼까요? `name` 필드에 아무 값이나 넣고 실행시켜 보면 아래와 같습니다. 쿼리스트링에 `code=abcde` 값이 포함된 것을 볼 수 있습니다.\n\n![Swagger UI 페이지 - API 실행][image-08]\n\n<br />\n\n---\n\n이렇게 해서 애저 펑션에 Open API 기능을 활성화 시키는 방법에 대해 알아 봤습니다. 한 가지 문제가 있다면, 이 확장 기능은 런타임 버전 v2 이상만을 지원한다는 건데요, 여러 가지 이유로 v1 런타임을 사용해야 하는 경우에는 어떻게 해야 할까요? [다음 포스트][post next]에서는 애저 펑션 런타임 v1을 지원하는 방법에 대해 알아보도록 하겠습니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-04.png\n[image-05]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-05.png\n[image-06]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-06.png\n[image-07]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-07.png\n[image-08]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/03/enabling-openapi-on-azure-functions-08.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-19697-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-19697-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[post next]: /developerkorea/posts/2021/03/16/openapi-extension-to-support-azure-functions-v1/\n\n[gh openapi]: https://github.com/Azure/azure-functions-openapi-extension\n[gh openapi issues]: https://github.com/Azure/azure-functions-openapi-extension/issues\n\n[nuget openapi]: https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.OpenApi/\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-19697-juyoo&ocid=AID3027813\n[az fncapp v1 openapi]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-openapi-definition?WT.mc_id=dotnet-19697-juyoo&ocid=AID3027813\n[az fncapp trigger http]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp&WT.mc_id=dotnet-19697-juyoo&ocid=AID3027813\n\n[openapi]: https://www.openapis.org/\n"},"7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b":{"id":"7a6b48e8-ffa7-49c6-a354-f0f3c9aa869b","index":"Blog","path":"/posts/2021/03/16/openapi-extension-to-support-azure-functions-v1/","node":{"title":"애저 펑션 프록시 기능을 이용한 Open API 확장 기능 하위 호환성 유지하기","category":"Azure","description":"이 포스트에서는 애저 펑션의 Open API 확장 기능이 직접 지원하지 않는 v1 런타임을 애저 펑션의 프록시 기능을 이용해서 지원할 수 있는 방법에 대해 알아봅니다.","content":"\n\n[지난 포스트][post prev]에서 [애저 펑션][az fncapp]에 데코레이터를 추가해서 Open API 문서를 자동으로 생성하는 Open API 확장 기능과 관련한 [오픈 소스][gh openapi] 프로젝트와 [NuGet 라이브러리][nuget openapi]를 소개했습니다. 이 라이브러리는 현재 애저 펑션 런타임 버전 v2 부터 지원합니다. 하지만, 실제 현업에서는 여전히 여러 이유로 v1 런타임을 사용하는 곳도 많습니다. 그렇다면 이런 경우에는 이 확장 기능을 사용할 수 없는 걸까요? 그럴 수도 있고 아닐 수도 있습니다. Open API 확장 기능을 직접 v1 런타임에 적용시킬 수는 없지만, [애저 펑션 프록시 기능][az fncapp proxy]을 이용하면 가능한데요, 이 포스트에서는 이 트릭에 대해 알아보기로 하겠습니다.\n\n\n## 레거시 애저 펑션 ##\n\n레거시 엔터프라이즈 애플리케이션의 경우에는 참조 라이브러리 의존성 때문에 v1 런타임으로만 애저 펑션을 구성해야 하는 경우가 왕왕 있습니다. 여기 레거시 애저 펑션 엔드포인트가 아래와 같은 형태로 구성되어 있다고 가정하겠습니다.\n\nhttps://gist.github.com/justinyoo/2b0b286bbe3e727e17423047cd97f86e?file=01-v1-legacy.cs\n\n애저 펑션 런타임 v1의 경우, [Newtonsoft.Json][nuget jsonnet] 버전 9.0.1에 고정되어 있고, 이를 변경하기가 굉장히 어렵습니다. 그런데, 예를 들어 이 `MyReturnObject` 클라스가 Newtonsoft.Json 버전 10.0.1 이상에 대한 의존성을 갖고 있다면, 이 경우에는 이 [Open API 확장 기능 라이브러리][gh openapi]를 사용할 수 없겠지요?\n\n\n## Open API 문서 정의용 애저 펑션 만들기 ##\n\n이런 경우에는 [애저 펑션 프록시 기능][az fncapp proxy]으로 한 번 감싸주면 완벽하지는 않더라도 동일한 개발자 경험을 제공함으로써 문제를 해결할 수 있습니다. 먼저 Open API 정의용 애저 펑션을 v3 런타임으로 아래와 같이 만들어 보겠습니다. 펑션 앱 이름은 `MyV1ProxyFunctionApp`으로 두고 (line #1), 기본적으로 모든 펑션 기능은 레거시 v1 앱과 동일하게 작성합니다 (line #3-7). 하지만, 이 펑션은 그저 프록시 용도이므로 실제 펑션이 하는 일은 없으니 간단하게 OK 결과만 반환하게끔 설정합니다 (line #10).\n\nhttps://gist.github.com/justinyoo/2b0b286bbe3e727e17423047cd97f86e?file=02-v1-proxy.cs&highlights=1,3-7,10\n\n이제 Open API 확장 기능 라이브러리를 설치했다면, 데코레이터를 추가할 차례입니다. 아래와 같이 `FunctionName(...)` 데코레이터 위에 Open API 메타데이터 관련 데코레이터를 추가합니다 (line #5-9).\n\nhttps://gist.github.com/justinyoo/2b0b286bbe3e727e17423047cd97f86e?file=03-v1-proxy-openapi.cs&highlights=5-9\n\n여기까지 하고 이 프록시 애저 펑션 앱을 실행시키면 성공적으로 Swagger UI 화면을 볼 수 있습니다. 하지만, 이 앱은 Swagger UI 화면만 보여줄 뿐 실제로 동작하는 화면은 아니므로 추가로 작업을 해 줄 것이 있습니다. 바로 프록시 기능이죠.\n\n\n## 레거시 애저 펑션 프록시 추가하기 ##\n\n아래와 같이 `proxies.json` 파일을 프로젝트 루트 폴더에 만듭니다. 레거시 펑션과 프록시 펑션은 동일한 엔드포인트를 갖게끔 만들어 놨기 때문에 (line #6, 11) 사용자 입장에서는 마치 웹서버가 바뀌는 정도의 차이만 느낄 뿐 개발 경험은 동일하게 유지할 수 있습니다. 또한 쿼리스트링과 요청 헤더 역시도 동일하게 레거시 펑션 앱으로 전달합니다 (line #13-14).\n\nhttps://gist.github.com/justinyoo/2b0b286bbe3e727e17423047cd97f86e?file=04-proxies.json&highlights=6,11,13-14\n\n프록시 펑션을 배포할 때 이 `proxies.json` 파일도 함께 배포해야 하므로 아래와 같이 `.csproj` 파일을 수정해 줍니다 (line #10-12).\n\nhttps://gist.github.com/justinyoo/2b0b286bbe3e727e17423047cd97f86e?file=05-v1-proxy.csproj&highlights=10-12\n\n이렇게 한 후 이 프록시 펑션을 로컬에서 실행시켜 보거나 애저로 배포한 후 프록시 API 엔드포인트로 접속해 볼까요? 이제 원하는 Open API 문서도 생성할 수도 있고, 실제 레거시 API도 프록시를 통해 실행시킬 수도 있습니다.\n\n<br/>\n\n---\n\n지금까지 [애저 펑션 프록시][az fncapp proxy] 기능을 이용해서 v1 런타임으로만 구성 가능한 레거시 애저 펑션에 [Open API 확장 기능][gh openapi]을 구현하는 방법에 대해 알아 보았습니다. 이 방법의 단점이라면 레거시 API를 한 번 호출할 때 프록시를 거쳐가므로 비용이 두 배로 들어간다는 것인데, 이 부분은 실제 엔터프라이즈 애플리케이션 아키텍팅의 관점에서 신중히 결정해서 결정하시면 됩니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-20715-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-20715-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[post prev]: /developerkorea/posts/2021/03/09/enabling-openapi-on-azure-functions/\n\n[gh openapi]: https://github.com/Azure/azure-functions-openapi-extension\n\n[nuget openapi]: https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.OpenApi/\n[nuget jsonnet]: https://www.nuget.org/packages/Newtonsoft.Json/\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-20715-juyoo&ocid=AID3027813\n[az fncapp proxy]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-proxies?WT.mc_id=dotnet-20715-juyoo&ocid=AID3027813\n"},"title":"애저 펑션 프록시 기능을 이용한 Open API 확장 기능 하위 호환성 유지하기","content":"\n\n[지난 포스트][post prev]에서 [애저 펑션][az fncapp]에 데코레이터를 추가해서 Open API 문서를 자동으로 생성하는 Open API 확장 기능과 관련한 [오픈 소스][gh openapi] 프로젝트와 [NuGet 라이브러리][nuget openapi]를 소개했습니다. 이 라이브러리는 현재 애저 펑션 런타임 버전 v2 부터 지원합니다. 하지만, 실제 현업에서는 여전히 여러 이유로 v1 런타임을 사용하는 곳도 많습니다. 그렇다면 이런 경우에는 이 확장 기능을 사용할 수 없는 걸까요? 그럴 수도 있고 아닐 수도 있습니다. Open API 확장 기능을 직접 v1 런타임에 적용시킬 수는 없지만, [애저 펑션 프록시 기능][az fncapp proxy]을 이용하면 가능한데요, 이 포스트에서는 이 트릭에 대해 알아보기로 하겠습니다.\n\n\n## 레거시 애저 펑션 ##\n\n레거시 엔터프라이즈 애플리케이션의 경우에는 참조 라이브러리 의존성 때문에 v1 런타임으로만 애저 펑션을 구성해야 하는 경우가 왕왕 있습니다. 여기 레거시 애저 펑션 엔드포인트가 아래와 같은 형태로 구성되어 있다고 가정하겠습니다.\n\nhttps://gist.github.com/justinyoo/2b0b286bbe3e727e17423047cd97f86e?file=01-v1-legacy.cs\n\n애저 펑션 런타임 v1의 경우, [Newtonsoft.Json][nuget jsonnet] 버전 9.0.1에 고정되어 있고, 이를 변경하기가 굉장히 어렵습니다. 그런데, 예를 들어 이 `MyReturnObject` 클라스가 Newtonsoft.Json 버전 10.0.1 이상에 대한 의존성을 갖고 있다면, 이 경우에는 이 [Open API 확장 기능 라이브러리][gh openapi]를 사용할 수 없겠지요?\n\n\n## Open API 문서 정의용 애저 펑션 만들기 ##\n\n이런 경우에는 [애저 펑션 프록시 기능][az fncapp proxy]으로 한 번 감싸주면 완벽하지는 않더라도 동일한 개발자 경험을 제공함으로써 문제를 해결할 수 있습니다. 먼저 Open API 정의용 애저 펑션을 v3 런타임으로 아래와 같이 만들어 보겠습니다. 펑션 앱 이름은 `MyV1ProxyFunctionApp`으로 두고 (line #1), 기본적으로 모든 펑션 기능은 레거시 v1 앱과 동일하게 작성합니다 (line #3-7). 하지만, 이 펑션은 그저 프록시 용도이므로 실제 펑션이 하는 일은 없으니 간단하게 OK 결과만 반환하게끔 설정합니다 (line #10).\n\nhttps://gist.github.com/justinyoo/2b0b286bbe3e727e17423047cd97f86e?file=02-v1-proxy.cs&highlights=1,3-7,10\n\n이제 Open API 확장 기능 라이브러리를 설치했다면, 데코레이터를 추가할 차례입니다. 아래와 같이 `FunctionName(...)` 데코레이터 위에 Open API 메타데이터 관련 데코레이터를 추가합니다 (line #5-9).\n\nhttps://gist.github.com/justinyoo/2b0b286bbe3e727e17423047cd97f86e?file=03-v1-proxy-openapi.cs&highlights=5-9\n\n여기까지 하고 이 프록시 애저 펑션 앱을 실행시키면 성공적으로 Swagger UI 화면을 볼 수 있습니다. 하지만, 이 앱은 Swagger UI 화면만 보여줄 뿐 실제로 동작하는 화면은 아니므로 추가로 작업을 해 줄 것이 있습니다. 바로 프록시 기능이죠.\n\n\n## 레거시 애저 펑션 프록시 추가하기 ##\n\n아래와 같이 `proxies.json` 파일을 프로젝트 루트 폴더에 만듭니다. 레거시 펑션과 프록시 펑션은 동일한 엔드포인트를 갖게끔 만들어 놨기 때문에 (line #6, 11) 사용자 입장에서는 마치 웹서버가 바뀌는 정도의 차이만 느낄 뿐 개발 경험은 동일하게 유지할 수 있습니다. 또한 쿼리스트링과 요청 헤더 역시도 동일하게 레거시 펑션 앱으로 전달합니다 (line #13-14).\n\nhttps://gist.github.com/justinyoo/2b0b286bbe3e727e17423047cd97f86e?file=04-proxies.json&highlights=6,11,13-14\n\n프록시 펑션을 배포할 때 이 `proxies.json` 파일도 함께 배포해야 하므로 아래와 같이 `.csproj` 파일을 수정해 줍니다 (line #10-12).\n\nhttps://gist.github.com/justinyoo/2b0b286bbe3e727e17423047cd97f86e?file=05-v1-proxy.csproj&highlights=10-12\n\n이렇게 한 후 이 프록시 펑션을 로컬에서 실행시켜 보거나 애저로 배포한 후 프록시 API 엔드포인트로 접속해 볼까요? 이제 원하는 Open API 문서도 생성할 수도 있고, 실제 레거시 API도 프록시를 통해 실행시킬 수도 있습니다.\n\n<br/>\n\n---\n\n지금까지 [애저 펑션 프록시][az fncapp proxy] 기능을 이용해서 v1 런타임으로만 구성 가능한 레거시 애저 펑션에 [Open API 확장 기능][gh openapi]을 구현하는 방법에 대해 알아 보았습니다. 이 방법의 단점이라면 레거시 API를 한 번 호출할 때 프록시를 거쳐가므로 비용이 두 배로 들어간다는 것인데, 이 부분은 실제 엔터프라이즈 애플리케이션 아키텍팅의 관점에서 신중히 결정해서 결정하시면 됩니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-20715-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-20715-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[post prev]: /developerkorea/posts/2021/03/09/enabling-openapi-on-azure-functions/\n\n[gh openapi]: https://github.com/Azure/azure-functions-openapi-extension\n\n[nuget openapi]: https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.OpenApi/\n[nuget jsonnet]: https://www.nuget.org/packages/Newtonsoft.Json/\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-20715-juyoo&ocid=AID3027813\n[az fncapp proxy]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-proxies?WT.mc_id=dotnet-20715-juyoo&ocid=AID3027813\n"},"32ba3114-a9af-404a-b6d7-4ef5cc1f07d5":{"id":"32ba3114-a9af-404a-b6d7-4ef5cc1f07d5","index":"Blog","path":"/posts/2021/04/13/single-command-provisioning-for-power-platform-hands-on-labs-environment/","node":{"title":"명령어 한 줄로 파워 플랫폼 실습 환경 설정하기","category":"Power Platform","description":"이 포스트에서는 파워 플랫폼 핸즈온 랩을 위한 공통 환경 설정을 명령어 하나만으로 자동화하는 방법에 대해 알아봅니다.","content":"\n\n자, 당신이 강사로서 혹은 실습 진행자로서 [파워 플랫폼][pp] 핸즈온 실습을 진행해야 한다고 가정하겠습니다. 실습을 위한 컨텐츠는 준비가 됐습니다. 이제 그렇다면 실습 환경을 준비해야겠지요? 파워 플랫폼 핸즈온 실습을 위해서는 크게 세 가지 방법이 있습니다.\n\n1. 실습자 본인의 기존 파워 플랫폼 환경을 그대로 사용하는 것\n1. 실습자 각자 새롭게 환경을 구성하는 방법\n1. 진행자가 일괄적으로 환경을 구성하는 방법\n\n각각의 방법은 저마다 장단점이 있게 마련인데, 대략 아래와 같이 정리할 수 있을 것입니다.\n\n1. **첫번째 방법**은 진행자 입장에서는 가장 편리한 방법입니다. 이미 실습자의 환경이 구성되어 있기 때문이죠. 하지만, 실습자 개개인이 속한 테넌트마다 구성이 다를 수 있으므로 파워 플랫폼 실습에 적합한지 아닌지 알 수 있는 방법이 없습니다. 따라서, 실습 동안 권한 문제라든가 다양한 문제를 겪을 가능성이 농후한 편이죠.\n2. **두번째 방법**은 진행자 입장에서는 편리할 수도 있고 아닐 수도 있습니다. 우선 환경 구성 자체를 실습자에게 위임하는 과정만 놓고 보자면 진행자 관점에서는 편리할 수도 있겠지만, 그 환경 구성을 위한 가이드 문서를 꼼꼼하게 작성해서 전달해야 합니다. 또한 아무리 자세하게 가이드를 제공한다고 하더라도, 실습자 개개인의 컴퓨터 활용 능력에 따라 환경 구성이 손쉬울 수도 있고 아닐 수도 있습니다. 결국 가이드 문서대로 되었다고 가정하면 낭패를 볼 수 있습니다.\n3. **마지막 방법**은 진행자가 모두 사전에 구성을 해 놓는 방법인데요, 실습자 입장에서는 실습에 집중할 수 있으니 아주 편리한 방법이죠. 반면에 진행자 입장에서는 이를 매번 수동으로 설정한다고 생각하면 굉장히 끔찍한 일이 될 겁니다.\n\n따라서, 이 포스트에서는 핸즈온랩 실습 진행자 관점에서 최초 수동으로 해야만 하는 부분을 제외하고는 모두 스크립트 한 번 실행으로 환경 설정을 최대한 자동화하는 방법에 대해 알아보기로 하겠습니다.\n\n> 이 포스트에서 사용한 파워셸 스크립트는 [이 리포지토리][gh sample]에서 다운로드 받을 수 있습니다.\n\n\n## 명령어 하나로 환경 설정하기 ##\n\n편의상 여기서는 아래와 같은 내용으로 테넌트를 생성했다고 가정합니다.\n\n* 테넌트 이름: `powerplatformhandsonlab`\n* 테넌트 URL: `powerplatformhandsonlab.onmicrosoft.com`\n* 관리자 이메일: `admin@powerplatformhandsonlab.onmicrosoft.com`\n* 관리자 패스워드: `Pa$$W0rd!@#$`\n\n이 정보를 이용해서, 한 번에 환경 설정을 하려면 어떻게 하면 될까요? 여기 전체 [파워셸 스크립트][gh sample code]가 있으니 이걸 이용해 아래와 같이 명령어를 실행시켜 보세요.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=15-set-environment.ps1\n\n네, 그렇습니다. 이게 됩니다! 아래에서 스크립트 하나씩 뜯어볼까요?\n\n\n## Microsoft 365 테넌트 생성 ##\n\n실습 진행자가 가장 먼저 해야 할 일은 [Microsoft 365][m365] 테넌트를 생성하는 것입니다. Microsoft 365는 30일짜리 무료 평가판을 제공하는데, 관리자를 포함해 총 25개의 라이센스를 제공하므로, 실습용으로 사용하기 좋습니다. [http://aka.ms/Office365E5Trial][m365 trial e5] 링크를 클릭해서 아래와 같이 무료로 Miicrosoft 365 E5 평가판 테넌트를 생성합니다.\n\n![Microsoft 365 E5 평가판 가입 첫화면][image-01]\n\n아래 화면에서 필요한 정보를 모두 입력하면 평가판 테넌트가 만들어집니다.\n\n![Microsoft 365 E5 평가판 가입 화면][image-02]\n\n이제 테넌트가 만들어졌으니 실제로 실습 환경을 파워셸로 구성해 보겠습니다. **참고로 아래에서 진행한 모든 파워셸 명령어는 관리자 권한의 파워셸 콘솔 안에서 실행시켜야 하는 것 잊지 마세요!**\n\n\n## 프로비저닝 순서 ##\n\n환경 구성을 위한 순서가 딱히 정해져 있지는 않습니다. 하지만, 아래 순서대로 하는 것을 권장하는 편인데, 이는 파워 앱 모듈과 애저 AD 모듈 사이에 호환성이 없어지는 부분이 하나 있기 때문입니다.\n\n1. Microsoft Dataverse 데이터베이스 초기화\n1. 사용자 계정 추가\n1. Microsoft 365 권한 부여\n1. 라이센스 부여\n1. 애저 권한 부여\n\n만약에 첫번째 Microsoft Dataverse 데이터베이스 초기화를 가장 먼저 하지 않고 사용자 계정 추가 이후에 진행한다면 에러가 생깁니다. 어떤 에러가 생기는 지는 아래에서 다시 다루도록 하겠습니다.\n\n> **NOTE**: `AzureAD` 모듈을 사용하기 위해서는 Windows 환경의 파워셸 5.1 버전이 필요합니다. 파워셸 6 이상의 버전은 지원하지 않습니다. 사용 환경에 대해서는 [파워셸을 통해 Microsoft 365에 연결하기][m365 powershell connect] 페이지를 참조하세요.\n\n\n## AzureAD 파워셸 모듈 설치 ##\n\nMicrosoft 365 테넌트에 사용자 계정을 추가하기 위해서는 먼저 [`AzureAD` 모듈][psgallery azuread]을 설치해야 합니다. 이 포스트를 쓰는 현재 최신 버전은 `2.0.2.130`입니다. 아래와 같이 `Install-Module` 명령어를 사용하면 되는데요, 맨 마지막의 `-Force -AllowClobber` 옵션을 주면 동일한 버전이 이미 설치가 되어 있을 경우에도 별다른 경고 메시지 없이 재설치합니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=01-install-azuread.ps1\n\n\n## AzureAD 관리자 로그인 ##\n\n파워셸 모듈 설치가 끝났다면, 이제 테넌트 관리자로 로그인 할 차례입니다. 단순히 `Connect-AzureAD` 명령어만 실행시켜도 상관 없겠지만, 이 경우에는 웹 브라우저 기반의 로그인 창이 별도로 생기게 되므로, 자동화 스크립트의 경우에는 맞지 않습니다. 오히려 가능한 한 현재 파워셸 콘솔 창에서 벗어나지 않고 모두 해결해야 하므로 아래와 같은 방식으로 로그인을 하면 효과적입니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=02-connect-azuread.ps1\n\n\n## 사용자 추가 ##\n\n관리자 로그인이 끝났다면, 이제 본격적으로 사용자를 추가할 차례입니다. 평가판 테넌트에는 관리자를 포함해서 모두 25개의 라이센스를 사용할 수 있으므로, 추가 가능한 실습자의 수는 최대 24명이다. 이와 관련한 자세한 내용은 [파워셸로 Microsoft 365 사용자 계정 만들기][m365 powershell account create] 페이지를 참조하고, 여기서는 아래 파워셸 스크립트를 실행시킵니다.\n\n* 사용자의 패스워드는 편의상 `UserPa$$W0rd!@#$`로 통일시켰으며, 임의로 바꿀 수 없게끔 설정합니다.\n* 사용자의 지역은 테넌트가 만들어진 지역으로 설정합니다. 여기서는 `KR`이겠네요.\n* 모두 24개의 계정을 만들어야 하므로 `ForEach-Object` 루프 구문을 사용합니다.\n* 만들어진 계정은 나중에 다시 사용하기 위해 모두 `$users` 배열 개체에 저장합니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=03-new-azureaduser.ps1\n\n\n## 사용자 계정 역할 및 권한 부여 ##\n\n앞서 추가한 사용자에게 적합한 권한을 부여할 차례입니다. 파워 플랫폼 실습을 위한 환경 설정이니만큼, **파워 플랫폼 관리자 권한**을 부여하기로 하겠습니다. 하지만, 이 권한은 기본적으로 비활성화 되어 있기 때문에, 그에 앞서 아래 명령어를 통해 파워 플랫폼 관리자 권한을 활성화 시킵니다. 권한 할당과 관련한 자세한 내용은 이 [파워셸을 통해 Microsoft 365 계정에 관리자 권한 부여하기][m365 powershell role assign] 페이지를 참조하세요.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=04-get-azureaddirectoryrole.ps1\n\n위와 같이 파워 플랫폼 관리자 권한을 `$role` 개체로 받아왔으니, 이를 앞서 생성한 계정에 모두 부여할 차례입니다. 아래 명령어를 실행시켜 볼까요?\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=05-add-azureaddirectoryrolemember.ps1\n\n\n## 사용자 계정 라이센스 부여 ##\n\n이번에는 각 사용자에게 파워 플랫폼을 사용할 수 있는 라이센스를 부여할 차례입니다. 기본적으로 평가판 테넌트에는 파워 플랫폼을 사용할 수 있는 라이센스를 계정 수 만큼 제공하고 있으니 이를 사용하면 됩니다. 이와 관련해서 좀 더 자세한 내용은 [파워셸을 통해 계정에 Microsoft 365 라이센스 부여하기][m365 powershell license assign] 페이지를 참조하세요.\n\n우선 라이센스 이름을 검색해 볼까요? 평가판 테넌트를 만든 후 추가적인 작업을 하지 않았으므로 라이센스는 하나만 나올 것이고 그 이름은 `ENTERPRISEPREMIUM`일 것입니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=06-get-azureadsubscribedsku.ps1\n\n아래 명령어를 사용해서 모든 사용자 계정에 라이센스를 부여합니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=07-set-azureaduserlicense.ps1\n\n여기까지 해서 핸즈온랩 실습에 필요한 모든 사용자 계정에 역할, 권한, 라이센스까지 자동으로 할당했습니다.\n\n\n## 파워 플랫폼 기본 환경 Microsoft Dataverse 활성화 ##\n\n파워 플랫폼 핸즈온랩 실습을 위해서 또 한가지 해야 할 것이 있습니다. 바로 [Microsoft Dataverse][pp dataverse] 라는 데이터베이스를 활성화 시키는 작업이다. 다양한 Microsoft 365 제품군과 협업을 하기 위해서 반드시 활성화 시켜야 하는 부분이므로, 아래와 같은 절차를 거쳐 초기화합니다. 파워셸을 이용한 파워 플랫폼 관리자 기능에 대한 좀 더 자세한 내용은 [관리자용 파워 앱 cmdlet][pp powershell dataverse create] 페이지를 참조하세요.\n\n가장 먼저 파워 앱 관련 파워셸 모듈인 [Microsoft.PowerApps.Administration.PowerShell][psgallery pa admin]와 [Microsoft.PowerApps.PowerShell][psgallery pa]을 설치합니다. 앞서와 마찬가지로 `-Force -AllowClobber` 옵션을 이용하면 이미 설치가 되어 있을 경우 재설치합니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=08-install-powerapps.ps1\n\n위에서 설정한 `$adminUpn`, `$adminPW` 값을 이용해서 파워 앱 환경에 관리자로 로그인합니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=09-add-powerappsaccount.ps1\n\n> **NOTE**: 로그인 과정에서 아래와 같은 에러메시지를 내면서 파워 앱 환경에 로그인 할 수 없는 경우가 생길 수 있습니다.\n> \n> ![파워 앱 환경 로그인 불가능][image-03]\n> \n> 이것은 Microsoft 365 테넌트에 로그인하는 과정과 파워 앱에 로그인하는 프로세스가 내부적으로 달라 생기는 일이기 때문에, 이런 에러 메시지를 보면 당황하지 말고 새 파워셸 콘솔 창을 관리자 권한으로 열고 거기서 로그인하면 됩니다.\n\n아래와 같은 가정을 바탕으로 Microsoft Dataverse 데이터베이스를 초기화 시킵니다.\n\n* 기본 환경의 Dataverse 데이터베이스를 활성화 시킵니다.\n* 기본 환경의 통화 설정을 따라갑니다.\n* 기본 환경의 언어 설정을 따라갑니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=10-new-adminpowerappcdsdatabase.ps1\n\n\n## 애저 구독 할당 ##\n\n파워 플랫폼을 사용하다 보면 [커스텀 커넥터][pp cuscon]를 사용하기 위해 애저 리소스를 다뤄야 할 경우도 생깁니다. 이 때 애저 구독이 필요한데요, 평가판 테넌트를 생성하면 평가판 애저 구독도 함께 활성화 시킬 수 있습니다. 다만, 이는 신용카드 인증을 위해 애저 포탈에서 직접 해야 합니다. 관리자 계정으로 애저 포탈에 로그인하면 아래와 같은 화면이 나오는데요,\n\n![애저 구독 평가판 가입 안내][image-04]\n\n시작 버튼을 눌러 평가판 구독 절차를 진행합니다.\n\n![애저 구독 평가판 가입 절차][image-05]\n\n위와 같이 관리자 계정에서 평가판 구독 절차가 끝났다면 이번에는 아래 파워셸 명령어를 실행시켜 애저에 로그인합니다. `$adminCredential` 개체는 앞서 AzureAD 로그인에 사용했던 것과 동일합니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=11-connect-azaccount.ps1\n\n> **NOTE**: 파워셸로 애저 리소스를 관리하려면 관련 파워셸 모듈인 [Az][psgallery az]가 이미 설치되어 있어야 합니다. 아래 명령어를 통해 설치하면 됩니다. 마찬가지로 `-Force -AllowClobber` 옵션이 무엇을 의미하는 지는 이제 아시겠죠?\n> \n> https://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=12-install-az.ps1\n\n그런데, 체험판 구독의 경우 사용할 수 있는 애저 리소스의 종류가 제한적입니다. 실제로 커스텀 커넥터를 위한 리소스는 기본적으로 사용할 수 없게 되어 있으므로 아래 명령어를 통해 파워 플랫폼 핸즈온 실습에 필요한 리소스를 활성화 시킵니다. 여기서는 [애저 로직 앱][az logapp], [애저 저장소][az st], [애저 네트워크][az netwrk], [애저 API 매니지먼트][az apim], [애저 Cosmos DB][az cosdba] 정도의 리소스를 사용한다고 가정하겠습니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=13-register-azresourceprovider.ps1\n\n이렇게 리소스 공급자를 등록했다면, 이제 각 사용자 계정에 구독을 할당할 차례입니다. 애저 구독과 권한 부여에 관련해서는 이 [애저 파워셸로 애저 리소스에 대한 권한 부여][az powershell role assign] 페이지를 참조하세요.\n\n> **NOTE**: 구독 전체를 할당하기 보다는 각 사용자별로 리소스 그룹을 생성하고 해당 리소스 그룹에만 기여자 권한을 부여해서 할당하는 것이 보안과 관리 측면에서 용이합니다. 여기서는 지역을 `koreacentral`로 할당하겠습니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=14-new-azroleassignment.ps1\n\n각 실습자 계정별로 애저 평가판 구독과 실습에 필요한 리소스 그룹 할당이 끝났습니다! 이제 모든 환경 설정이 다 끝났네요.\n\n\n<br>\n\n---\n\n지금까지 파워 플랫폼 핸즈온 실습을 위한 모든 환경 설정을 파워셸 스크립트로 구성해 봤습니다. 이제 핸즈온 실습 일정이 잡힐 경우 이 파워셸 스크립트만 실행시키면 짧은 시간 안에 모든 구성을 끝마치고 준비할 수 있을 것입니다. 이 참에 한 번 실습 진행해 보실까요? 😉\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* Microsoft 365에 관심이 있으신가요? ➡️ [무료 체험 계정 생성하기][m365 account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-23654-juyoo&ocid=AID3027813\n[m365 account free]: https://www.microsoft.com/ko-kr/microsoft-365/try?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-23654-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-01-ko.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-02-ko.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-03-ko.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-04-ko.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-05-ko.png\n\n[gh sample]: https://github.com/devkimchi/PowerPlatform-Hands-on-Lab-Environment-Automatic-Provsioning\n[gh sample code]: https://github.com/devkimchi/PowerPlatform-Hands-on-Lab-Environment-Automatic-Provsioning/blob/main/AzureAD/Set-Environment.ps1\n\n[pp]: https://powerplatform.microsoft.com/ko-kr/?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[pp dataverse]: https://docs.microsoft.com/ko-kr/powerapps/maker/data-platform/data-platform-intro?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[pp cuscon]: https://docs.microsoft.com/ko-kr/connectors/custom-connectors/?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n\n[pp powershell dataverse create]: https://docs.microsoft.com/ko-kr/power-platform/admin/powerapps-powershell?WT.mc_id=power-23654-juyoo&ocid=AID3027813#power-apps-cmdlets-for-administrators\n\n[psgallery azuread]: https://www.powershellgallery.com/packages/AzureAD/\n[psgallery pa]: https://www.powershellgallery.com/packages/Microsoft.PowerApps.PowerShell/\n[psgallery pa admin]: https://www.powershellgallery.com/packages/Microsoft.PowerApps.Administration.PowerShell/\n[psgallery az]: https://www.powershellgallery.com/packages/Az/\n\n[m365]: https://www.microsoft.com/ko-kr/microsoft-365?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[m365 trial e5]: http://aka.ms/Office365E5Trial\n\n[m365 powershell connect]: https://docs.microsoft.com/ko-kr/microsoft-365/enterprise/connect-to-microsoft-365-powershell?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[m365 powershell account create]: https://docs.microsoft.com/ko-kr/microsoft-365/enterprise/create-user-accounts-with-microsoft-365-powershell?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[m365 powershell role assign]: https://docs.microsoft.com/ko-kr/microsoft-365/enterprise/assign-roles-to-user-accounts-with-microsoft-365-powershell?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[m365 powershell license assign]: https://docs.microsoft.com/ko-kr/microsoft-365/enterprise/assign-licenses-to-user-accounts-with-microsoft-365-powershell?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n\n[az powershell role assign]: https://docs.microsoft.com/ko-kr/azure/role-based-access-control/role-assignments-powershell?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[az st]: https://docs.microsoft.com/ko-kr/azure/storage/?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[az netwrk]: https://docs.microsoft.com/ko-kr/azure/virtual-network/virtual-networks-overview?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[az apim]: https://docs.microsoft.com/ko-kr/azure/api-management/api-management-key-concepts?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[az cosdba]: https://docs.microsoft.com/ko-kr/azure/cosmos-db/introduction?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n"},"title":"명령어 한 줄로 파워 플랫폼 실습 환경 설정하기","content":"\n\n자, 당신이 강사로서 혹은 실습 진행자로서 [파워 플랫폼][pp] 핸즈온 실습을 진행해야 한다고 가정하겠습니다. 실습을 위한 컨텐츠는 준비가 됐습니다. 이제 그렇다면 실습 환경을 준비해야겠지요? 파워 플랫폼 핸즈온 실습을 위해서는 크게 세 가지 방법이 있습니다.\n\n1. 실습자 본인의 기존 파워 플랫폼 환경을 그대로 사용하는 것\n1. 실습자 각자 새롭게 환경을 구성하는 방법\n1. 진행자가 일괄적으로 환경을 구성하는 방법\n\n각각의 방법은 저마다 장단점이 있게 마련인데, 대략 아래와 같이 정리할 수 있을 것입니다.\n\n1. **첫번째 방법**은 진행자 입장에서는 가장 편리한 방법입니다. 이미 실습자의 환경이 구성되어 있기 때문이죠. 하지만, 실습자 개개인이 속한 테넌트마다 구성이 다를 수 있으므로 파워 플랫폼 실습에 적합한지 아닌지 알 수 있는 방법이 없습니다. 따라서, 실습 동안 권한 문제라든가 다양한 문제를 겪을 가능성이 농후한 편이죠.\n2. **두번째 방법**은 진행자 입장에서는 편리할 수도 있고 아닐 수도 있습니다. 우선 환경 구성 자체를 실습자에게 위임하는 과정만 놓고 보자면 진행자 관점에서는 편리할 수도 있겠지만, 그 환경 구성을 위한 가이드 문서를 꼼꼼하게 작성해서 전달해야 합니다. 또한 아무리 자세하게 가이드를 제공한다고 하더라도, 실습자 개개인의 컴퓨터 활용 능력에 따라 환경 구성이 손쉬울 수도 있고 아닐 수도 있습니다. 결국 가이드 문서대로 되었다고 가정하면 낭패를 볼 수 있습니다.\n3. **마지막 방법**은 진행자가 모두 사전에 구성을 해 놓는 방법인데요, 실습자 입장에서는 실습에 집중할 수 있으니 아주 편리한 방법이죠. 반면에 진행자 입장에서는 이를 매번 수동으로 설정한다고 생각하면 굉장히 끔찍한 일이 될 겁니다.\n\n따라서, 이 포스트에서는 핸즈온랩 실습 진행자 관점에서 최초 수동으로 해야만 하는 부분을 제외하고는 모두 스크립트 한 번 실행으로 환경 설정을 최대한 자동화하는 방법에 대해 알아보기로 하겠습니다.\n\n> 이 포스트에서 사용한 파워셸 스크립트는 [이 리포지토리][gh sample]에서 다운로드 받을 수 있습니다.\n\n\n## 명령어 하나로 환경 설정하기 ##\n\n편의상 여기서는 아래와 같은 내용으로 테넌트를 생성했다고 가정합니다.\n\n* 테넌트 이름: `powerplatformhandsonlab`\n* 테넌트 URL: `powerplatformhandsonlab.onmicrosoft.com`\n* 관리자 이메일: `admin@powerplatformhandsonlab.onmicrosoft.com`\n* 관리자 패스워드: `Pa$$W0rd!@#$`\n\n이 정보를 이용해서, 한 번에 환경 설정을 하려면 어떻게 하면 될까요? 여기 전체 [파워셸 스크립트][gh sample code]가 있으니 이걸 이용해 아래와 같이 명령어를 실행시켜 보세요.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=15-set-environment.ps1\n\n네, 그렇습니다. 이게 됩니다! 아래에서 스크립트 하나씩 뜯어볼까요?\n\n\n## Microsoft 365 테넌트 생성 ##\n\n실습 진행자가 가장 먼저 해야 할 일은 [Microsoft 365][m365] 테넌트를 생성하는 것입니다. Microsoft 365는 30일짜리 무료 평가판을 제공하는데, 관리자를 포함해 총 25개의 라이센스를 제공하므로, 실습용으로 사용하기 좋습니다. [http://aka.ms/Office365E5Trial][m365 trial e5] 링크를 클릭해서 아래와 같이 무료로 Miicrosoft 365 E5 평가판 테넌트를 생성합니다.\n\n![Microsoft 365 E5 평가판 가입 첫화면][image-01]\n\n아래 화면에서 필요한 정보를 모두 입력하면 평가판 테넌트가 만들어집니다.\n\n![Microsoft 365 E5 평가판 가입 화면][image-02]\n\n이제 테넌트가 만들어졌으니 실제로 실습 환경을 파워셸로 구성해 보겠습니다. **참고로 아래에서 진행한 모든 파워셸 명령어는 관리자 권한의 파워셸 콘솔 안에서 실행시켜야 하는 것 잊지 마세요!**\n\n\n## 프로비저닝 순서 ##\n\n환경 구성을 위한 순서가 딱히 정해져 있지는 않습니다. 하지만, 아래 순서대로 하는 것을 권장하는 편인데, 이는 파워 앱 모듈과 애저 AD 모듈 사이에 호환성이 없어지는 부분이 하나 있기 때문입니다.\n\n1. Microsoft Dataverse 데이터베이스 초기화\n1. 사용자 계정 추가\n1. Microsoft 365 권한 부여\n1. 라이센스 부여\n1. 애저 권한 부여\n\n만약에 첫번째 Microsoft Dataverse 데이터베이스 초기화를 가장 먼저 하지 않고 사용자 계정 추가 이후에 진행한다면 에러가 생깁니다. 어떤 에러가 생기는 지는 아래에서 다시 다루도록 하겠습니다.\n\n> **NOTE**: `AzureAD` 모듈을 사용하기 위해서는 Windows 환경의 파워셸 5.1 버전이 필요합니다. 파워셸 6 이상의 버전은 지원하지 않습니다. 사용 환경에 대해서는 [파워셸을 통해 Microsoft 365에 연결하기][m365 powershell connect] 페이지를 참조하세요.\n\n\n## AzureAD 파워셸 모듈 설치 ##\n\nMicrosoft 365 테넌트에 사용자 계정을 추가하기 위해서는 먼저 [`AzureAD` 모듈][psgallery azuread]을 설치해야 합니다. 이 포스트를 쓰는 현재 최신 버전은 `2.0.2.130`입니다. 아래와 같이 `Install-Module` 명령어를 사용하면 되는데요, 맨 마지막의 `-Force -AllowClobber` 옵션을 주면 동일한 버전이 이미 설치가 되어 있을 경우에도 별다른 경고 메시지 없이 재설치합니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=01-install-azuread.ps1\n\n\n## AzureAD 관리자 로그인 ##\n\n파워셸 모듈 설치가 끝났다면, 이제 테넌트 관리자로 로그인 할 차례입니다. 단순히 `Connect-AzureAD` 명령어만 실행시켜도 상관 없겠지만, 이 경우에는 웹 브라우저 기반의 로그인 창이 별도로 생기게 되므로, 자동화 스크립트의 경우에는 맞지 않습니다. 오히려 가능한 한 현재 파워셸 콘솔 창에서 벗어나지 않고 모두 해결해야 하므로 아래와 같은 방식으로 로그인을 하면 효과적입니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=02-connect-azuread.ps1\n\n\n## 사용자 추가 ##\n\n관리자 로그인이 끝났다면, 이제 본격적으로 사용자를 추가할 차례입니다. 평가판 테넌트에는 관리자를 포함해서 모두 25개의 라이센스를 사용할 수 있으므로, 추가 가능한 실습자의 수는 최대 24명이다. 이와 관련한 자세한 내용은 [파워셸로 Microsoft 365 사용자 계정 만들기][m365 powershell account create] 페이지를 참조하고, 여기서는 아래 파워셸 스크립트를 실행시킵니다.\n\n* 사용자의 패스워드는 편의상 `UserPa$$W0rd!@#$`로 통일시켰으며, 임의로 바꿀 수 없게끔 설정합니다.\n* 사용자의 지역은 테넌트가 만들어진 지역으로 설정합니다. 여기서는 `KR`이겠네요.\n* 모두 24개의 계정을 만들어야 하므로 `ForEach-Object` 루프 구문을 사용합니다.\n* 만들어진 계정은 나중에 다시 사용하기 위해 모두 `$users` 배열 개체에 저장합니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=03-new-azureaduser.ps1\n\n\n## 사용자 계정 역할 및 권한 부여 ##\n\n앞서 추가한 사용자에게 적합한 권한을 부여할 차례입니다. 파워 플랫폼 실습을 위한 환경 설정이니만큼, **파워 플랫폼 관리자 권한**을 부여하기로 하겠습니다. 하지만, 이 권한은 기본적으로 비활성화 되어 있기 때문에, 그에 앞서 아래 명령어를 통해 파워 플랫폼 관리자 권한을 활성화 시킵니다. 권한 할당과 관련한 자세한 내용은 이 [파워셸을 통해 Microsoft 365 계정에 관리자 권한 부여하기][m365 powershell role assign] 페이지를 참조하세요.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=04-get-azureaddirectoryrole.ps1\n\n위와 같이 파워 플랫폼 관리자 권한을 `$role` 개체로 받아왔으니, 이를 앞서 생성한 계정에 모두 부여할 차례입니다. 아래 명령어를 실행시켜 볼까요?\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=05-add-azureaddirectoryrolemember.ps1\n\n\n## 사용자 계정 라이센스 부여 ##\n\n이번에는 각 사용자에게 파워 플랫폼을 사용할 수 있는 라이센스를 부여할 차례입니다. 기본적으로 평가판 테넌트에는 파워 플랫폼을 사용할 수 있는 라이센스를 계정 수 만큼 제공하고 있으니 이를 사용하면 됩니다. 이와 관련해서 좀 더 자세한 내용은 [파워셸을 통해 계정에 Microsoft 365 라이센스 부여하기][m365 powershell license assign] 페이지를 참조하세요.\n\n우선 라이센스 이름을 검색해 볼까요? 평가판 테넌트를 만든 후 추가적인 작업을 하지 않았으므로 라이센스는 하나만 나올 것이고 그 이름은 `ENTERPRISEPREMIUM`일 것입니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=06-get-azureadsubscribedsku.ps1\n\n아래 명령어를 사용해서 모든 사용자 계정에 라이센스를 부여합니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=07-set-azureaduserlicense.ps1\n\n여기까지 해서 핸즈온랩 실습에 필요한 모든 사용자 계정에 역할, 권한, 라이센스까지 자동으로 할당했습니다.\n\n\n## 파워 플랫폼 기본 환경 Microsoft Dataverse 활성화 ##\n\n파워 플랫폼 핸즈온랩 실습을 위해서 또 한가지 해야 할 것이 있습니다. 바로 [Microsoft Dataverse][pp dataverse] 라는 데이터베이스를 활성화 시키는 작업이다. 다양한 Microsoft 365 제품군과 협업을 하기 위해서 반드시 활성화 시켜야 하는 부분이므로, 아래와 같은 절차를 거쳐 초기화합니다. 파워셸을 이용한 파워 플랫폼 관리자 기능에 대한 좀 더 자세한 내용은 [관리자용 파워 앱 cmdlet][pp powershell dataverse create] 페이지를 참조하세요.\n\n가장 먼저 파워 앱 관련 파워셸 모듈인 [Microsoft.PowerApps.Administration.PowerShell][psgallery pa admin]와 [Microsoft.PowerApps.PowerShell][psgallery pa]을 설치합니다. 앞서와 마찬가지로 `-Force -AllowClobber` 옵션을 이용하면 이미 설치가 되어 있을 경우 재설치합니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=08-install-powerapps.ps1\n\n위에서 설정한 `$adminUpn`, `$adminPW` 값을 이용해서 파워 앱 환경에 관리자로 로그인합니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=09-add-powerappsaccount.ps1\n\n> **NOTE**: 로그인 과정에서 아래와 같은 에러메시지를 내면서 파워 앱 환경에 로그인 할 수 없는 경우가 생길 수 있습니다.\n> \n> ![파워 앱 환경 로그인 불가능][image-03]\n> \n> 이것은 Microsoft 365 테넌트에 로그인하는 과정과 파워 앱에 로그인하는 프로세스가 내부적으로 달라 생기는 일이기 때문에, 이런 에러 메시지를 보면 당황하지 말고 새 파워셸 콘솔 창을 관리자 권한으로 열고 거기서 로그인하면 됩니다.\n\n아래와 같은 가정을 바탕으로 Microsoft Dataverse 데이터베이스를 초기화 시킵니다.\n\n* 기본 환경의 Dataverse 데이터베이스를 활성화 시킵니다.\n* 기본 환경의 통화 설정을 따라갑니다.\n* 기본 환경의 언어 설정을 따라갑니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=10-new-adminpowerappcdsdatabase.ps1\n\n\n## 애저 구독 할당 ##\n\n파워 플랫폼을 사용하다 보면 [커스텀 커넥터][pp cuscon]를 사용하기 위해 애저 리소스를 다뤄야 할 경우도 생깁니다. 이 때 애저 구독이 필요한데요, 평가판 테넌트를 생성하면 평가판 애저 구독도 함께 활성화 시킬 수 있습니다. 다만, 이는 신용카드 인증을 위해 애저 포탈에서 직접 해야 합니다. 관리자 계정으로 애저 포탈에 로그인하면 아래와 같은 화면이 나오는데요,\n\n![애저 구독 평가판 가입 안내][image-04]\n\n시작 버튼을 눌러 평가판 구독 절차를 진행합니다.\n\n![애저 구독 평가판 가입 절차][image-05]\n\n위와 같이 관리자 계정에서 평가판 구독 절차가 끝났다면 이번에는 아래 파워셸 명령어를 실행시켜 애저에 로그인합니다. `$adminCredential` 개체는 앞서 AzureAD 로그인에 사용했던 것과 동일합니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=11-connect-azaccount.ps1\n\n> **NOTE**: 파워셸로 애저 리소스를 관리하려면 관련 파워셸 모듈인 [Az][psgallery az]가 이미 설치되어 있어야 합니다. 아래 명령어를 통해 설치하면 됩니다. 마찬가지로 `-Force -AllowClobber` 옵션이 무엇을 의미하는 지는 이제 아시겠죠?\n> \n> https://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=12-install-az.ps1\n\n그런데, 체험판 구독의 경우 사용할 수 있는 애저 리소스의 종류가 제한적입니다. 실제로 커스텀 커넥터를 위한 리소스는 기본적으로 사용할 수 없게 되어 있으므로 아래 명령어를 통해 파워 플랫폼 핸즈온 실습에 필요한 리소스를 활성화 시킵니다. 여기서는 [애저 로직 앱][az logapp], [애저 저장소][az st], [애저 네트워크][az netwrk], [애저 API 매니지먼트][az apim], [애저 Cosmos DB][az cosdba] 정도의 리소스를 사용한다고 가정하겠습니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=13-register-azresourceprovider.ps1\n\n이렇게 리소스 공급자를 등록했다면, 이제 각 사용자 계정에 구독을 할당할 차례입니다. 애저 구독과 권한 부여에 관련해서는 이 [애저 파워셸로 애저 리소스에 대한 권한 부여][az powershell role assign] 페이지를 참조하세요.\n\n> **NOTE**: 구독 전체를 할당하기 보다는 각 사용자별로 리소스 그룹을 생성하고 해당 리소스 그룹에만 기여자 권한을 부여해서 할당하는 것이 보안과 관리 측면에서 용이합니다. 여기서는 지역을 `koreacentral`로 할당하겠습니다.\n\nhttps://gist.github.com/justinyoo/4cba9e122dfdb5684cd432c072b36b3d?file=14-new-azroleassignment.ps1\n\n각 실습자 계정별로 애저 평가판 구독과 실습에 필요한 리소스 그룹 할당이 끝났습니다! 이제 모든 환경 설정이 다 끝났네요.\n\n\n<br>\n\n---\n\n지금까지 파워 플랫폼 핸즈온 실습을 위한 모든 환경 설정을 파워셸 스크립트로 구성해 봤습니다. 이제 핸즈온 실습 일정이 잡힐 경우 이 파워셸 스크립트만 실행시키면 짧은 시간 안에 모든 구성을 끝마치고 준비할 수 있을 것입니다. 이 참에 한 번 실습 진행해 보실까요? 😉\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* Microsoft 365에 관심이 있으신가요? ➡️ [무료 체험 계정 생성하기][m365 account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-23654-juyoo&ocid=AID3027813\n[m365 account free]: https://www.microsoft.com/ko-kr/microsoft-365/try?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-23654-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-01-ko.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-02-ko.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-03-ko.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-04-ko.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-05-ko.png\n\n[gh sample]: https://github.com/devkimchi/PowerPlatform-Hands-on-Lab-Environment-Automatic-Provsioning\n[gh sample code]: https://github.com/devkimchi/PowerPlatform-Hands-on-Lab-Environment-Automatic-Provsioning/blob/main/AzureAD/Set-Environment.ps1\n\n[pp]: https://powerplatform.microsoft.com/ko-kr/?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[pp dataverse]: https://docs.microsoft.com/ko-kr/powerapps/maker/data-platform/data-platform-intro?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[pp cuscon]: https://docs.microsoft.com/ko-kr/connectors/custom-connectors/?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n\n[pp powershell dataverse create]: https://docs.microsoft.com/ko-kr/power-platform/admin/powerapps-powershell?WT.mc_id=power-23654-juyoo&ocid=AID3027813#power-apps-cmdlets-for-administrators\n\n[psgallery azuread]: https://www.powershellgallery.com/packages/AzureAD/\n[psgallery pa]: https://www.powershellgallery.com/packages/Microsoft.PowerApps.PowerShell/\n[psgallery pa admin]: https://www.powershellgallery.com/packages/Microsoft.PowerApps.Administration.PowerShell/\n[psgallery az]: https://www.powershellgallery.com/packages/Az/\n\n[m365]: https://www.microsoft.com/ko-kr/microsoft-365?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[m365 trial e5]: http://aka.ms/Office365E5Trial\n\n[m365 powershell connect]: https://docs.microsoft.com/ko-kr/microsoft-365/enterprise/connect-to-microsoft-365-powershell?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[m365 powershell account create]: https://docs.microsoft.com/ko-kr/microsoft-365/enterprise/create-user-accounts-with-microsoft-365-powershell?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[m365 powershell role assign]: https://docs.microsoft.com/ko-kr/microsoft-365/enterprise/assign-roles-to-user-accounts-with-microsoft-365-powershell?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[m365 powershell license assign]: https://docs.microsoft.com/ko-kr/microsoft-365/enterprise/assign-licenses-to-user-accounts-with-microsoft-365-powershell?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n\n[az powershell role assign]: https://docs.microsoft.com/ko-kr/azure/role-based-access-control/role-assignments-powershell?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[az st]: https://docs.microsoft.com/ko-kr/azure/storage/?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[az netwrk]: https://docs.microsoft.com/ko-kr/azure/virtual-network/virtual-networks-overview?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[az apim]: https://docs.microsoft.com/ko-kr/azure/api-management/api-management-key-concepts?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n[az cosdba]: https://docs.microsoft.com/ko-kr/azure/cosmos-db/introduction?WT.mc_id=power-23654-juyoo&ocid=AID3027813\n"},"5730d419-1acc-464c-b412-25340497860b":{"id":"5730d419-1acc-464c-b412-25340497860b","index":"Blog","path":"/posts/2021/04/27/bicep-refreshed/","node":{"title":"애저 Bicep 되짚어보기","category":"Azure","description":"이 포스트에서는 애저 Bicep 프로젝트 관련 새롭게 추가된 내용에 대해 알아봅니다.","content":"\n\n예전에 개인 블로그에 [작성했던 포스트][post 1]에서는 극초기의 [Bicep 프로젝트][bicep]에 대해 소개를 했더랬습니다. 포스팅 당시에는 `0.1.x` 버전이었지만, 지금은 `0.3.x` 버전으로 실제 프로덕션에서 사용할 수 있을 만큼 안정화가 되었습니다. 더불어 다양한 기능 추가도 있었는데요, 이 포스트에서는 신규로 추가된 bicep의 기능에 대해 알아보기로 합니다.\n\n\n## 애저 CLI 통합 ##\n\nBicep CLI는 단독으로도 사용할 수 있지만, 만약 [애저 CLI][az cli]를 사용하고 있다면 [v2.20.0 버전][az cli release v2.20.0] 이후부터는 bicep CLI와 통합되었습니다. 따라서 아래와 같은 명령어가 가능합니다.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=01-bicep-build.sh\n\n> **참고**: `v0.2.x` 버전까지는 여러 bicep 파일을 한번에 컴파일할 수 있었습니다. 하지만, `v0.3.x` 버전부터는 한 번에 bicep 파일 하나만 처리할 수 있도록 바뀌었습니다. 따라서, 한 번에 여러 파일을 빌드하고 싶다면 별도의 작업을 해 주어야 하는데요, 아래는 파워셸을 예로 들어 작성해 본 스크립트입니다.\n> \n> https://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=02-bicep-build.ps1\n\n이렇게 애저 CLI와 통합된 덕에 bicep 파일을 그대로 애저 CLI를 통해 실행시킬 수도 있습니다. 따라서 아래와 같은 명령어가 가능합니다.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=03-bicep-deploy.sh\n\n\n## Bicep 디컴파일 ##\n\n`v0.1.x` 버전에서는 오로지 `.bicep` 파일을 `.json` 파일로 컴파일하는 기능만 가능했습니다. 그런데, [`v0.2.59` 버전][bicep release v0.2.59] 이후로는 기존의 ARM 템플릿을 .bicep 파일로 디컴파일 하는 것도 가능합니다. 이 기능을 이용하면 기존에 사용하던 ARM 템플릿을 유지보수하기 위해 bicep 파일로 변환시키는 데 굉장히 유용하겠죠? 아래와 같은 명령어를 사용하면 됩니다.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=04-bicep-decompile.sh\n\n> **NOTE**: 이 디컴파일 기능은 ARM 템플릿 안에 `copy` 속성이 있을 경우 아직 제대로 처리하지 못합니다. 좀 더 버전업이 되면 가능해질 것으로 예상하고 있습니다.\n\n\n## 파라미터 데코레이터 ##\n\n파라미터 작성이 `v0.1.x` 버전에 비해 훨씬 간결해졌습니다. 파라미터의 속성을 데코레이터로 지정할 수 있게끔 개선되었는데요, 아래 코드를 보겠습니다. 저장소 어카운트의 SKU 값은 정해져 있으므로, 아래와 같이 `@allowed` 데코레이터를 사용하면 훨씬 더 가독성이 높아지겠죠?\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=05-bicep-decorators.bicep\n\n\n## 조건부 리소스 선언 ##\n\n속성값을 지정할 때 삼항연산을 사용하면 조건에 따라 다른 값을 부여할 수 있습니다. 더불어, 아예 `if { ... }` 문을 사용하면, 리소스 자체를 조건부로 선언할 수도 있게끔 개선이 이루어졌습니다. 아래와 같은 형태로 구성해 볼까요? 리소스 그룹의 프로비저닝 지역이 **한국 중부 (Korea Central)**일 때에만 애저 앱 서비스 인스턴스를 프로비저닝하게끔 조건을 걸어 놓은 게 보이죠?\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=06-bicep-conditions.bicep\n\n\n## 순환문 선언 ##\n\nARM 템플릿에서는 `copy` 속성과 `copyIndex()` 함수를 이용해서 동일한 리소스를 반복해서 프로비저닝했습니다. bicep 에서는 이를 `for...in` 루프를 사용해서 선언할 수 있습니다. 아래 코드를 볼까요? 애저 앱 서비스 인스턴스를 배열 파라미터를 통해 한 번에 프로비저닝하게끔 선언한 것을 볼 수 있습니다.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=07-bicep-loops-1.bicep\n\n아래 리소스 선언과 같이 배열과 인덱스를 동시에 활용할 수도 있네요.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=08-bicep-loops-2.bicep\n\n또한 배열과 상관없이 `range()` 함수를 사용해서 루프를 돌려 리소스를 선언할 수도 있습니다.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=09-bicep-loops-3.bicep\n\n여기서 한 가지 명심해야 하는 부분이 있습니다. `for...in` 루프를 사용하면 결과적으로 리소스 배열이 생기게 되는데요, 이 `for...in` 루프의 바로 바깥에 반드시 배열 표시(`[...]`)를 해야 합니다. 그러면 나머지는 bicep이 알아서 처리합니다.\n\n\n## 모듈화 ##\n\n제 최애 파트입니다! ARM 템플릿에서는 [연결 템플릿][az arm template linked] 기능을 이용해 리소스별 모듈화를 시도했다면, bicep에서는 `module` 이라는 키워드를 이용해서 모듈화를 선언합니다. 좀 더 직관적으로 바뀐 셈이죠. 예를 한 번 들어볼까요? 아래와 같이 애저 펑션 인스턴스를 선언하기 위해서는 최소 저장소 어카운트, 컨섬션 플랜, 애저 펑션의 세 가지 리소스가 필요한데, 이를 각각 모듈로 구성해서 하나로 통합하면 됩니다. 물론 개별 모듈은 독립적으로 작동할 수 있어야 합니다.\n\n\n### 저장소 어카운트 모듈 ###\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=10-bicep-storage-account.bicep\n\n\n### 컨섬션 플랜 모듈 ###\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=11-bicep-consumption-plan.bicep\n\n\n### 애저 펑션 모듈 ###\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=12-bicep-function-app.bicep\n\n\n### 모듈 오케스트레이션 ###\n\n위와 같이 개별 리소스마다 모듈화를 해 놓았다면, 이를 하나로 통합해서 활용할 수 있는 오케스트레이션 파일을 아래와 같이 생성하면 됩니다.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=13-bicep-azuredeploy.bicep\n\n> **NOTE**: 이 글을 쓰는 시점에서는 ARM 템플릿과 반대로 아직 모듈 참조를 위해 외부 URL을 사용할 수 없습니다.\n\n---\n\n지금까지 애저 bicep의 새로운 기능에 대해 알아 보았습니다. 계속해서 추가 기능이 들어가고 있는 만큼 굉장히 빠르게 업데이트 되고 있으니, 꾸준히 사용해 보면 좋을 것 입니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-25381-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-25381-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/c/microsoftdeveloperkorea\n\n[post 1]: https://blog.aliencube.org/ko/2020/09/09/bicep-sneak-peek/\n\n[bicep]: https://github.com/Azure/bicep/\n[bicep release v0.2.59]: https://github.com/Azure/bicep/releases/tag/v0.2.59\n\n[az cli]: https://docs.microsoft.com/ko-kr/cli/azure/what-is-azure-cli?WT.mc_id=devops-25381-juyoo&ocid=AID3027813\n[az cli release v2.20.0]: https://docs.microsoft.com/ko-kr/cli/azure/release-notes-azure-cli?WT.mc_id=devops-25381-juyoo&ocid=AID3027813#march-02-2021\n\n[az arm template linked]: https://docs.microsoft.com/ko-kr/azure/azure-resource-manager/templates/linked-templates?WT.mc_id=devops-25381-juyoo&ocid=AID3027813\n"},"title":"애저 Bicep 되짚어보기","content":"\n\n예전에 개인 블로그에 [작성했던 포스트][post 1]에서는 극초기의 [Bicep 프로젝트][bicep]에 대해 소개를 했더랬습니다. 포스팅 당시에는 `0.1.x` 버전이었지만, 지금은 `0.3.x` 버전으로 실제 프로덕션에서 사용할 수 있을 만큼 안정화가 되었습니다. 더불어 다양한 기능 추가도 있었는데요, 이 포스트에서는 신규로 추가된 bicep의 기능에 대해 알아보기로 합니다.\n\n\n## 애저 CLI 통합 ##\n\nBicep CLI는 단독으로도 사용할 수 있지만, 만약 [애저 CLI][az cli]를 사용하고 있다면 [v2.20.0 버전][az cli release v2.20.0] 이후부터는 bicep CLI와 통합되었습니다. 따라서 아래와 같은 명령어가 가능합니다.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=01-bicep-build.sh\n\n> **참고**: `v0.2.x` 버전까지는 여러 bicep 파일을 한번에 컴파일할 수 있었습니다. 하지만, `v0.3.x` 버전부터는 한 번에 bicep 파일 하나만 처리할 수 있도록 바뀌었습니다. 따라서, 한 번에 여러 파일을 빌드하고 싶다면 별도의 작업을 해 주어야 하는데요, 아래는 파워셸을 예로 들어 작성해 본 스크립트입니다.\n> \n> https://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=02-bicep-build.ps1\n\n이렇게 애저 CLI와 통합된 덕에 bicep 파일을 그대로 애저 CLI를 통해 실행시킬 수도 있습니다. 따라서 아래와 같은 명령어가 가능합니다.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=03-bicep-deploy.sh\n\n\n## Bicep 디컴파일 ##\n\n`v0.1.x` 버전에서는 오로지 `.bicep` 파일을 `.json` 파일로 컴파일하는 기능만 가능했습니다. 그런데, [`v0.2.59` 버전][bicep release v0.2.59] 이후로는 기존의 ARM 템플릿을 .bicep 파일로 디컴파일 하는 것도 가능합니다. 이 기능을 이용하면 기존에 사용하던 ARM 템플릿을 유지보수하기 위해 bicep 파일로 변환시키는 데 굉장히 유용하겠죠? 아래와 같은 명령어를 사용하면 됩니다.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=04-bicep-decompile.sh\n\n> **NOTE**: 이 디컴파일 기능은 ARM 템플릿 안에 `copy` 속성이 있을 경우 아직 제대로 처리하지 못합니다. 좀 더 버전업이 되면 가능해질 것으로 예상하고 있습니다.\n\n\n## 파라미터 데코레이터 ##\n\n파라미터 작성이 `v0.1.x` 버전에 비해 훨씬 간결해졌습니다. 파라미터의 속성을 데코레이터로 지정할 수 있게끔 개선되었는데요, 아래 코드를 보겠습니다. 저장소 어카운트의 SKU 값은 정해져 있으므로, 아래와 같이 `@allowed` 데코레이터를 사용하면 훨씬 더 가독성이 높아지겠죠?\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=05-bicep-decorators.bicep\n\n\n## 조건부 리소스 선언 ##\n\n속성값을 지정할 때 삼항연산을 사용하면 조건에 따라 다른 값을 부여할 수 있습니다. 더불어, 아예 `if { ... }` 문을 사용하면, 리소스 자체를 조건부로 선언할 수도 있게끔 개선이 이루어졌습니다. 아래와 같은 형태로 구성해 볼까요? 리소스 그룹의 프로비저닝 지역이 **한국 중부 (Korea Central)**일 때에만 애저 앱 서비스 인스턴스를 프로비저닝하게끔 조건을 걸어 놓은 게 보이죠?\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=06-bicep-conditions.bicep\n\n\n## 순환문 선언 ##\n\nARM 템플릿에서는 `copy` 속성과 `copyIndex()` 함수를 이용해서 동일한 리소스를 반복해서 프로비저닝했습니다. bicep 에서는 이를 `for...in` 루프를 사용해서 선언할 수 있습니다. 아래 코드를 볼까요? 애저 앱 서비스 인스턴스를 배열 파라미터를 통해 한 번에 프로비저닝하게끔 선언한 것을 볼 수 있습니다.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=07-bicep-loops-1.bicep\n\n아래 리소스 선언과 같이 배열과 인덱스를 동시에 활용할 수도 있네요.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=08-bicep-loops-2.bicep\n\n또한 배열과 상관없이 `range()` 함수를 사용해서 루프를 돌려 리소스를 선언할 수도 있습니다.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=09-bicep-loops-3.bicep\n\n여기서 한 가지 명심해야 하는 부분이 있습니다. `for...in` 루프를 사용하면 결과적으로 리소스 배열이 생기게 되는데요, 이 `for...in` 루프의 바로 바깥에 반드시 배열 표시(`[...]`)를 해야 합니다. 그러면 나머지는 bicep이 알아서 처리합니다.\n\n\n## 모듈화 ##\n\n제 최애 파트입니다! ARM 템플릿에서는 [연결 템플릿][az arm template linked] 기능을 이용해 리소스별 모듈화를 시도했다면, bicep에서는 `module` 이라는 키워드를 이용해서 모듈화를 선언합니다. 좀 더 직관적으로 바뀐 셈이죠. 예를 한 번 들어볼까요? 아래와 같이 애저 펑션 인스턴스를 선언하기 위해서는 최소 저장소 어카운트, 컨섬션 플랜, 애저 펑션의 세 가지 리소스가 필요한데, 이를 각각 모듈로 구성해서 하나로 통합하면 됩니다. 물론 개별 모듈은 독립적으로 작동할 수 있어야 합니다.\n\n\n### 저장소 어카운트 모듈 ###\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=10-bicep-storage-account.bicep\n\n\n### 컨섬션 플랜 모듈 ###\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=11-bicep-consumption-plan.bicep\n\n\n### 애저 펑션 모듈 ###\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=12-bicep-function-app.bicep\n\n\n### 모듈 오케스트레이션 ###\n\n위와 같이 개별 리소스마다 모듈화를 해 놓았다면, 이를 하나로 통합해서 활용할 수 있는 오케스트레이션 파일을 아래와 같이 생성하면 됩니다.\n\nhttps://gist.github.com/justinyoo/e27d3ddc8d868a1c16293f8286b3ff67?file=13-bicep-azuredeploy.bicep\n\n> **NOTE**: 이 글을 쓰는 시점에서는 ARM 템플릿과 반대로 아직 모듈 참조를 위해 외부 URL을 사용할 수 없습니다.\n\n---\n\n지금까지 애저 bicep의 새로운 기능에 대해 알아 보았습니다. 계속해서 추가 기능이 들어가고 있는 만큼 굉장히 빠르게 업데이트 되고 있으니, 꾸준히 사용해 보면 좋을 것 입니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-25381-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-25381-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/c/microsoftdeveloperkorea\n\n[post 1]: https://blog.aliencube.org/ko/2020/09/09/bicep-sneak-peek/\n\n[bicep]: https://github.com/Azure/bicep/\n[bicep release v0.2.59]: https://github.com/Azure/bicep/releases/tag/v0.2.59\n\n[az cli]: https://docs.microsoft.com/ko-kr/cli/azure/what-is-azure-cli?WT.mc_id=devops-25381-juyoo&ocid=AID3027813\n[az cli release v2.20.0]: https://docs.microsoft.com/ko-kr/cli/azure/release-notes-azure-cli?WT.mc_id=devops-25381-juyoo&ocid=AID3027813#march-02-2021\n\n[az arm template linked]: https://docs.microsoft.com/ko-kr/azure/azure-resource-manager/templates/linked-templates?WT.mc_id=devops-25381-juyoo&ocid=AID3027813\n"},"9378481a-17fc-4821-8285-392425ef2f16":{"id":"9378481a-17fc-4821-8285-392425ef2f16","index":"Blog","path":"/posts/2021/05/18/power-apps-in-fusion-teams/","node":{"title":"퓨전 개발팀의 파워 앱 개발 실사례","category":"Power Platform","description":"이 포스트에서는 퓨전 개발팀의 실제 파워 앱 개발 사례를 들어 봅니다.","content":"\n\n얼마전 Microsoft에서는 퓨전 개발팀을 위한 [무료 학습 모듈을 공개][pa fusion path]했습니다. 더불어 이를 위한 [전자책도 함께 공개][pa fusion ebook]했는데요, 이를 통해 조직내 퓨전 개발팀의 작동 방식에 대한 아이디어가 실제 어떤 식으로 구현이 되는지를 살펴볼 수 있습니다.\n\n[가트너][gartner fusion]에서는 퓨전 개발팀을 \"교차 기능 조직(cross-functional team)으로서 비지니스 가치를 수행하기 위해 다양한 데이터와 기술을 사용한다\"라고 정의합니다. 동시에 이 퓨전 개발팀은 대체로 기술적인 의사결정을 IT 조직 외부에서 내리기도 하고, 이 결정의 방향은 IT 조직에서 권장하는 방향과 다르게 가는 경우도 잦습니다. 그리고 이러한 퓨전 개발팀의 리더는 IT 조직 외부에서 오는 경우가 많다고도 하네요. 즉, 기존의 IT 조직 관점에서 흔히 보이는 전문 개발자의 시각보다는 좀 더 넓은 비니지스 관점에서 가치를 충족시키는 서비스 개발이 이루어져야 하는 셈인데요, 그렇다면 실제로 이러한 퓨전 개발팀에서 어떤 제품 혹은 서비스를 개발하고 배포할까요?\n\n이 포스트에서는 Lamna 헬스 케어라는 가상의 회사가 한국에서 VIP 회원들을 위해 운영하는 피트니스 센터에서 회원들이 운동 일지 작성에 사용할 모바일 앱을 [파워 앱][pa]으로 개발하는 일련의 과정에 대해 시리즈로 다루도록 합니다.\n\n* ***퓨전 개발팀의 파워 앱 개발 실사례***\n* [파워 앱의 종단간 데이터 흐름 실시간 추적][post 2]\n* 파워 앱에 DevOps 적용하기\n\n> 이 포스트에 사용한 백엔드 API 샘플 코드는 이곳 [GitHub 리포지토리][gh sample]에서 다운로드 받을 수 있습니다.\n\n\n## 시나리오 ##\n\nLamna 피트니스 센터의 퍼스널 트레이너인 안지민쌤은 자신이 관리하는 회원들에게 운동일지를 항상 수기로 작성해서 줬습니다. 하지만, 굳이 쌤이 관리하는 일지 내용을 다시 수기로 작성해서 건네주는 것이 비효율적이라는 생각에 센터에서 도입한 파워 앱을 이용해서 회원과 공유해보고자 하는 계획을 세웠는데요, 이미 회원의 운동 일지를 저장하는 전산 시스템은 구축이 되어 있는 상태입니다. 그렇다면, 이를 파워 앱에서 사용할 수 있게끔 [사용자 지정 커넥터][pa cuscon]를 만들어 파워 앱에서 사용하기만 하면 될 것이라고 생각하고 있습니다. 파워 앱을 통해 회원의 운동 일지 데이터를 입력 받아 데이터베이스에 저장하는 일련의 과정은 대략 아래와 같은 구조입니다.\n\n![GymLog Architecture][image-01]\n\n* 백엔드에서 사용하는 [애저 펑션][az fncapp]에 [OpenAPI 확장 기능][az fncapp extension openapi]을 설치해서 검색용이성(discoverability)을 높입니다.\n* OpenAPI 문서를 이용해 사용자 지정 커넥터를 만들구요,\n* 사용자 지정 커넥터를 통해 파워 앱에서 운동 데이터를 백엔드로 보냅니다.\n* 백엔드는 비동기식으로 데이터를 다루는 [Pub/Sub 패턴][eip pubsub]을 구현합니다.\n* 백엔드 API에서 받아온 데이터는 퍼블리셔 쪽에 계속 쌓이다가 운동이 다 끝나는 시점에 모두 합산(Aggregate)한 데이터를 [애저 서비스 버스][az svcbus]로 보내게 됩니다.\n* 서비스 버스로 보낸 데이터는 섭스크라이버 쪽의 애저 펑션에서 받아 최종적으로 [애저 코스모스 DB][az cosdba]로 저장합니다.\n\n\n## 백엔드 API 개선 ##\n\n안지민쌤은 퍼스널 트레이너 팀장이기도 해서 피트니스 센터의 여러 가지 업무에 대한 자동화 아이디어를 퓨전 개발팀에 제공하고 있습니다. 파워 앱을 개발하기 위해 같은 퓨전 개발팀 내 전문 개발자인 권수빈쌤에게 API 검색이 가능하게끔 해달라는 요청을 했고, 이를 받아들여 권수빈쌤은 애저 펑션에 OpenAPI 기능을 추가했습니다. 이를 위해 가장 먼저 [NuGet 패키지 라이브러리][nuget openapi]를 애저 펑션 프로젝트에 추가했습니다.\n\n```bash\ndotnet add package Microsoft.Azure.WebJobs.Extensions.OpenApi --prerelease\n```\n\n그리고 기존의 API에 몇 가지 데코레이터만 추가해서 API 엔드포인트를 OpenAPI 문서에 포함시키는 작업 정도만 수행했습니다. 아래 코드는 맨 처음 운동 루틴을 시작할 때 사용하는 API에 대한 내용인데요, OpenAPI와 상관없는 부분은 제외시켰으므로, 만약 해당 API의 전체 코드를 보고 싶다면 [이 링크][gh sample api routine]를 클릭하면 됩니다.\n\nhttps://gist.github.com/justinyoo/1cb47ec0dad64609d26f1fa69a75b60d?file=01-create-routine.cs&highlights=1-7\n\n위와 같이 OpenAPI 설정을 추가하고 난 후 배포해 보면 아래와 같이 Swagger UI 화면이 나타납니다.\n\n![Publisher Swagger UI][image-02]\n\n위에 추가한 확장 기능 라이브러리는 OpenAPI 스펙 V2 (Swagger)와 V3를 모두 지원하므로, `https://<function_app_name>.azurewebsites.net/api/swagger.json` 으로 접속하면 설정에 따라 V2 문서 혹은 V3 문서를 렌더링할 수 있습니다. 위 그림은 V3 문서를 렌더링하는 것으로 되어 있죠?\n\n\n## 사용자 지정 커넥터 생성 ##\n\n앞서의 작업을 통해 애저 펑션으로 만들어진 API는 OpenAPI 확장 기능에서 제공하는 실시간 OpenAPI 문서 생성 기능을 통해 검색용이성을 높였으니, 이를 통해 파워 앱 쪽에서 사용자 지정 커넥터를 이용해 API에 접근할 수 있게 해야 합니다. 파워 앱은 로우코드 플랫폼이므로 퓨전 팀 안에서 굳이 전문 개발자인 권수빈쌤이 이 사용자 지정 커넥터를 만들어 주지 않더라도 시민 개발자인 안지민쌤도 충분히 작업이 가능한데요, 아래와 같이 파워 앱 스튜디오의 좌측 `사용자 지정 커넥터` 링크를 클릭한 후 우측 상단의 `➕ 새 사용자 지정 커넥터` 버튼을 눌러 `URL에서 OpenAPI 가져오기` 메뉴를 선택하면 됩니다.\n\n![Import OpenAPI from URL][image-03]\n\n아래와 같이 `공개 API의 URL에 붙여넣기` 필드에 애저 펑션에서 자동 생성해 주는 OpenAPI 문서 URL을 붙여넣습니다. 참고로 사용자 지정 커넥터는 현재 OpenAPI v2 스펙으로 작성된 문서만 인식합니다. 따라서, `https://<function_app_name>.azurewebsites.net/api/openapi/v2.json`과 같은 형태의 URL을 호출하면 곧바로 V2 형식의 OpenAPI 문서를 생성해 주니, 이를 그대로 활용하면 되겠네요.\n\n![Import OpenAPI from URL Pop-up][image-04]\n\n그런데, 만약 아래와 같은 에러가 발생하면서 사용자 지정 커넥터 생성에 실패할 수도 있는데, 이는 파워 앱 스튜디오와 애저 펑션 API 인스턴스 사이에 CORS 설정이 빠져 있기 때문입니다.\n\n![Import OpenAPI from URL CORS Error][image-05]\n\n따라서, 애저 펑션 인스턴스 쪽에서 `https://flow.microsoft.com` 사이트에 대한 CORS 설정을 아래와 같이 해 주면 됩니다.\n\n![Azure Functions App CORS][image-06]\n\nCORS 설정이 끝난 후 파워 앱 스튜디오로 돌아와서 다시 사용자 지정 커넥터를 생성하면 이번에는 오류 없이 바로 생성 가능합니다. 이 이후 과정은 [일반적인 사용자 지정 커넥터 생성 과정과 동일][pa cuscon create]하므로 여기서는 생략하겠습니다. 마침내 아래와 같이 사용자 지정 커넥터가 만들어졌네요!\n\n![Custom Connector Created][image-07]\n\n\n## 인증을 통한 커넥션 생성 ##\n\n안지민쌤이 이 사용자 지정 커넥터를 활용할 수 있으려면, 먼저 인증 절차를 통해서 커넥션을 만들어 놓아야 합니다. 애저 펑션 API 엔드포인트는 API 키로 보호받고 있으므로 이를 이용해 인증하고 커넥션을 만들면 됩니다. 아래와 같이 `➕` 버튼을 클릭합니다.\n\n![New Connection][image-08]\n\n애저 펑션에서 제공하는 API 인증 키 값을 입력한 후 `만들기` 버튼을 클릭합니다.\n\n![API Key Auth][image-09]\n\n그러면, 아래와 같이 커넥션이 만들어졌고, 이제 파워 앱 안에서 이 사용자 지정 커넥터를 자유자재로 사용할 수 있게 됐습니다!\n\n![Connection Created][image-10]\n\n\n## 파워 앱에서 사용자 지정 커넥터 사용 ##\n\n이제 안지민쌤은 본인이 관리하는 회원들의 운동 일지를 수기로 작업하는 대신 파워 앱을 이용해 작성하면 되는데요, 아래와 같이 파워 앱 캔버스 화면에서 사용자 지정 커넥터를 추가합니다.\n\n![Custom Connector in Power Apps][image-11]\n\n그리고 앱을 개발했습니다! 이제 회원들의 운동일지를 앱으로 관리할 수 있게 됐네요. 아래는 파워 앱을 모바일에서 사용할 때의 스크린샷입니다.\n\n![Power Apps in Action #1][image-12]\n![Power Apps in Action #2][image-13]\n\n마지막으로 이렇게 기록한 운동 일지는 [애저 코스모스 DB][az cosdba]에 비동기식으로 저장됩니다.\n\n![Gym Logs in Cosmos DB][image-14]\n\n안지민쌤의 회원들은 이제 좀 더 손쉽게 스스로 운동 일지를 작성할 수 있도록 앱을 제공 받았습니다.\n\n> 만약 이 GymLogs 앱을 사용해 보고 싶다면 [이 링크][gh sample app]에서 다운로드 받아 자신의 파워 앱 환경에 업로드해서 사용하면 됩니다.\n\n---\n\n지금까지 퓨전 개발팀에서\n\n* 현장 전문가는 시민 개발자로서 [파워 앱][pa]을 개발하고,\n* 전문 개발자는 이 파워 앱의 기능을 풍부하게 해 주는 커스텀 커넥터를 위한 백엔드 API를 OpenAPI 형식으로 공개하는 형태로\n\n협업을 하는 과정에 대해 알아 보았습니다. 이를 통해 결국 Lamna 피트니스 센터의\n\n* 고객들은 좀 더 체계적인 운동 일지를 작성할 수 있게 되었고,\n* 이 데이터를 바탕으로 트레이너들은 좀 더 회원별로 개인화된 운동 루틴을 작성할 수 있게 되었습니다.\n\n이렇게 함으로써 회원과 피트니스 센터 모두에게 좀 더 나은 서비스를 제공할 수 있는 기반이 다져진 셈이죠. [다음 포스트][post 2]에서는 [애저 모니터][az monitor] 서비스를 이용해 파워 앱에서 데이터 저장소까지 데이터가 이동하면서 거쳐가는 경로들을 추적하는 과정에 대해 알아보기로 하겠습니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/c/microsoftdeveloperkorea\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-03-ko.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-04-ko.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-05-ko.png\n[image-06]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-06-ko.png\n[image-07]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-07-ko.png\n[image-08]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-08-ko.png\n[image-09]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-09-ko.png\n[image-10]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-10-ko.png\n[image-11]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-11.png\n[image-12]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-12.png\n[image-13]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-13.png\n[image-14]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-14.png\n\n[post 1]: /developerkorea/posts/2021/05/18/power-apps-in-fusion-teams/\n[post 2]: /developerkorea/posts/2021/05/25/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db/\n\n[gh sample]: https://github.com/aliencube/GymLog\n[gh sample api routine]: https://github.com/aliencube/GymLog/blob/main/src/GymLog.FunctionApp/Triggers/RoutineHttpTrigges.cs\n[gh sample app]: https://github.com/aliencube/GymLog/blob/main/packages/GymLogs.zip\n\n[pa fusion path]: https://docs.microsoft.com/ko-kr/learn/paths/transform-business-applications-with-fusion-development/?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[pa fusion ebook]: https://docs.microsoft.com/ko-kr/powerapps/guidance/fusion-dev-ebook/?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n\n[gartner fusion]: https://blogs.gartner.com/hank-barnes/2021/03/30/fusion-teams-a-critical-area-for-vendors-to-develop-understanding/\n\n[eip pubsub]: https://www.enterpriseintegrationpatterns.com/patterns/messaging/PublishSubscribeChannel.html\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[az fncapp extension openapi]: https://github.com/Azure/azure-functions-openapi-extension\n\n[az svcbus]: https://docs.microsoft.com/ko-kr/azure/service-bus-messaging/service-bus-messaging-overview?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[az cosdba]: https://docs.microsoft.com/ko-kr/azure/cosmos-db/introduction?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n\n[az monitor]: https://docs.microsoft.com/ko-kr/azure/azure-monitor/overview?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n\n[pa]: https://powerapps.microsoft.com/ko-kr/?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[pa cuscon]: https://docs.microsoft.com/ko-kr/connectors/custom-connectors/?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[pa cuscon create]: https://docs.microsoft.com/ko-kr/connectors/custom-connectors/define-openapi-definition?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n\n[nuget openapi]: https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.OpenApi/\n"},"title":"퓨전 개발팀의 파워 앱 개발 실사례","content":"\n\n얼마전 Microsoft에서는 퓨전 개발팀을 위한 [무료 학습 모듈을 공개][pa fusion path]했습니다. 더불어 이를 위한 [전자책도 함께 공개][pa fusion ebook]했는데요, 이를 통해 조직내 퓨전 개발팀의 작동 방식에 대한 아이디어가 실제 어떤 식으로 구현이 되는지를 살펴볼 수 있습니다.\n\n[가트너][gartner fusion]에서는 퓨전 개발팀을 \"교차 기능 조직(cross-functional team)으로서 비지니스 가치를 수행하기 위해 다양한 데이터와 기술을 사용한다\"라고 정의합니다. 동시에 이 퓨전 개발팀은 대체로 기술적인 의사결정을 IT 조직 외부에서 내리기도 하고, 이 결정의 방향은 IT 조직에서 권장하는 방향과 다르게 가는 경우도 잦습니다. 그리고 이러한 퓨전 개발팀의 리더는 IT 조직 외부에서 오는 경우가 많다고도 하네요. 즉, 기존의 IT 조직 관점에서 흔히 보이는 전문 개발자의 시각보다는 좀 더 넓은 비니지스 관점에서 가치를 충족시키는 서비스 개발이 이루어져야 하는 셈인데요, 그렇다면 실제로 이러한 퓨전 개발팀에서 어떤 제품 혹은 서비스를 개발하고 배포할까요?\n\n이 포스트에서는 Lamna 헬스 케어라는 가상의 회사가 한국에서 VIP 회원들을 위해 운영하는 피트니스 센터에서 회원들이 운동 일지 작성에 사용할 모바일 앱을 [파워 앱][pa]으로 개발하는 일련의 과정에 대해 시리즈로 다루도록 합니다.\n\n* ***퓨전 개발팀의 파워 앱 개발 실사례***\n* [파워 앱의 종단간 데이터 흐름 실시간 추적][post 2]\n* 파워 앱에 DevOps 적용하기\n\n> 이 포스트에 사용한 백엔드 API 샘플 코드는 이곳 [GitHub 리포지토리][gh sample]에서 다운로드 받을 수 있습니다.\n\n\n## 시나리오 ##\n\nLamna 피트니스 센터의 퍼스널 트레이너인 안지민쌤은 자신이 관리하는 회원들에게 운동일지를 항상 수기로 작성해서 줬습니다. 하지만, 굳이 쌤이 관리하는 일지 내용을 다시 수기로 작성해서 건네주는 것이 비효율적이라는 생각에 센터에서 도입한 파워 앱을 이용해서 회원과 공유해보고자 하는 계획을 세웠는데요, 이미 회원의 운동 일지를 저장하는 전산 시스템은 구축이 되어 있는 상태입니다. 그렇다면, 이를 파워 앱에서 사용할 수 있게끔 [사용자 지정 커넥터][pa cuscon]를 만들어 파워 앱에서 사용하기만 하면 될 것이라고 생각하고 있습니다. 파워 앱을 통해 회원의 운동 일지 데이터를 입력 받아 데이터베이스에 저장하는 일련의 과정은 대략 아래와 같은 구조입니다.\n\n![GymLog Architecture][image-01]\n\n* 백엔드에서 사용하는 [애저 펑션][az fncapp]에 [OpenAPI 확장 기능][az fncapp extension openapi]을 설치해서 검색용이성(discoverability)을 높입니다.\n* OpenAPI 문서를 이용해 사용자 지정 커넥터를 만들구요,\n* 사용자 지정 커넥터를 통해 파워 앱에서 운동 데이터를 백엔드로 보냅니다.\n* 백엔드는 비동기식으로 데이터를 다루는 [Pub/Sub 패턴][eip pubsub]을 구현합니다.\n* 백엔드 API에서 받아온 데이터는 퍼블리셔 쪽에 계속 쌓이다가 운동이 다 끝나는 시점에 모두 합산(Aggregate)한 데이터를 [애저 서비스 버스][az svcbus]로 보내게 됩니다.\n* 서비스 버스로 보낸 데이터는 섭스크라이버 쪽의 애저 펑션에서 받아 최종적으로 [애저 코스모스 DB][az cosdba]로 저장합니다.\n\n\n## 백엔드 API 개선 ##\n\n안지민쌤은 퍼스널 트레이너 팀장이기도 해서 피트니스 센터의 여러 가지 업무에 대한 자동화 아이디어를 퓨전 개발팀에 제공하고 있습니다. 파워 앱을 개발하기 위해 같은 퓨전 개발팀 내 전문 개발자인 권수빈쌤에게 API 검색이 가능하게끔 해달라는 요청을 했고, 이를 받아들여 권수빈쌤은 애저 펑션에 OpenAPI 기능을 추가했습니다. 이를 위해 가장 먼저 [NuGet 패키지 라이브러리][nuget openapi]를 애저 펑션 프로젝트에 추가했습니다.\n\n```bash\ndotnet add package Microsoft.Azure.WebJobs.Extensions.OpenApi --prerelease\n```\n\n그리고 기존의 API에 몇 가지 데코레이터만 추가해서 API 엔드포인트를 OpenAPI 문서에 포함시키는 작업 정도만 수행했습니다. 아래 코드는 맨 처음 운동 루틴을 시작할 때 사용하는 API에 대한 내용인데요, OpenAPI와 상관없는 부분은 제외시켰으므로, 만약 해당 API의 전체 코드를 보고 싶다면 [이 링크][gh sample api routine]를 클릭하면 됩니다.\n\nhttps://gist.github.com/justinyoo/1cb47ec0dad64609d26f1fa69a75b60d?file=01-create-routine.cs&highlights=1-7\n\n위와 같이 OpenAPI 설정을 추가하고 난 후 배포해 보면 아래와 같이 Swagger UI 화면이 나타납니다.\n\n![Publisher Swagger UI][image-02]\n\n위에 추가한 확장 기능 라이브러리는 OpenAPI 스펙 V2 (Swagger)와 V3를 모두 지원하므로, `https://<function_app_name>.azurewebsites.net/api/swagger.json` 으로 접속하면 설정에 따라 V2 문서 혹은 V3 문서를 렌더링할 수 있습니다. 위 그림은 V3 문서를 렌더링하는 것으로 되어 있죠?\n\n\n## 사용자 지정 커넥터 생성 ##\n\n앞서의 작업을 통해 애저 펑션으로 만들어진 API는 OpenAPI 확장 기능에서 제공하는 실시간 OpenAPI 문서 생성 기능을 통해 검색용이성을 높였으니, 이를 통해 파워 앱 쪽에서 사용자 지정 커넥터를 이용해 API에 접근할 수 있게 해야 합니다. 파워 앱은 로우코드 플랫폼이므로 퓨전 팀 안에서 굳이 전문 개발자인 권수빈쌤이 이 사용자 지정 커넥터를 만들어 주지 않더라도 시민 개발자인 안지민쌤도 충분히 작업이 가능한데요, 아래와 같이 파워 앱 스튜디오의 좌측 `사용자 지정 커넥터` 링크를 클릭한 후 우측 상단의 `➕ 새 사용자 지정 커넥터` 버튼을 눌러 `URL에서 OpenAPI 가져오기` 메뉴를 선택하면 됩니다.\n\n![Import OpenAPI from URL][image-03]\n\n아래와 같이 `공개 API의 URL에 붙여넣기` 필드에 애저 펑션에서 자동 생성해 주는 OpenAPI 문서 URL을 붙여넣습니다. 참고로 사용자 지정 커넥터는 현재 OpenAPI v2 스펙으로 작성된 문서만 인식합니다. 따라서, `https://<function_app_name>.azurewebsites.net/api/openapi/v2.json`과 같은 형태의 URL을 호출하면 곧바로 V2 형식의 OpenAPI 문서를 생성해 주니, 이를 그대로 활용하면 되겠네요.\n\n![Import OpenAPI from URL Pop-up][image-04]\n\n그런데, 만약 아래와 같은 에러가 발생하면서 사용자 지정 커넥터 생성에 실패할 수도 있는데, 이는 파워 앱 스튜디오와 애저 펑션 API 인스턴스 사이에 CORS 설정이 빠져 있기 때문입니다.\n\n![Import OpenAPI from URL CORS Error][image-05]\n\n따라서, 애저 펑션 인스턴스 쪽에서 `https://flow.microsoft.com` 사이트에 대한 CORS 설정을 아래와 같이 해 주면 됩니다.\n\n![Azure Functions App CORS][image-06]\n\nCORS 설정이 끝난 후 파워 앱 스튜디오로 돌아와서 다시 사용자 지정 커넥터를 생성하면 이번에는 오류 없이 바로 생성 가능합니다. 이 이후 과정은 [일반적인 사용자 지정 커넥터 생성 과정과 동일][pa cuscon create]하므로 여기서는 생략하겠습니다. 마침내 아래와 같이 사용자 지정 커넥터가 만들어졌네요!\n\n![Custom Connector Created][image-07]\n\n\n## 인증을 통한 커넥션 생성 ##\n\n안지민쌤이 이 사용자 지정 커넥터를 활용할 수 있으려면, 먼저 인증 절차를 통해서 커넥션을 만들어 놓아야 합니다. 애저 펑션 API 엔드포인트는 API 키로 보호받고 있으므로 이를 이용해 인증하고 커넥션을 만들면 됩니다. 아래와 같이 `➕` 버튼을 클릭합니다.\n\n![New Connection][image-08]\n\n애저 펑션에서 제공하는 API 인증 키 값을 입력한 후 `만들기` 버튼을 클릭합니다.\n\n![API Key Auth][image-09]\n\n그러면, 아래와 같이 커넥션이 만들어졌고, 이제 파워 앱 안에서 이 사용자 지정 커넥터를 자유자재로 사용할 수 있게 됐습니다!\n\n![Connection Created][image-10]\n\n\n## 파워 앱에서 사용자 지정 커넥터 사용 ##\n\n이제 안지민쌤은 본인이 관리하는 회원들의 운동 일지를 수기로 작업하는 대신 파워 앱을 이용해 작성하면 되는데요, 아래와 같이 파워 앱 캔버스 화면에서 사용자 지정 커넥터를 추가합니다.\n\n![Custom Connector in Power Apps][image-11]\n\n그리고 앱을 개발했습니다! 이제 회원들의 운동일지를 앱으로 관리할 수 있게 됐네요. 아래는 파워 앱을 모바일에서 사용할 때의 스크린샷입니다.\n\n![Power Apps in Action #1][image-12]\n![Power Apps in Action #2][image-13]\n\n마지막으로 이렇게 기록한 운동 일지는 [애저 코스모스 DB][az cosdba]에 비동기식으로 저장됩니다.\n\n![Gym Logs in Cosmos DB][image-14]\n\n안지민쌤의 회원들은 이제 좀 더 손쉽게 스스로 운동 일지를 작성할 수 있도록 앱을 제공 받았습니다.\n\n> 만약 이 GymLogs 앱을 사용해 보고 싶다면 [이 링크][gh sample app]에서 다운로드 받아 자신의 파워 앱 환경에 업로드해서 사용하면 됩니다.\n\n---\n\n지금까지 퓨전 개발팀에서\n\n* 현장 전문가는 시민 개발자로서 [파워 앱][pa]을 개발하고,\n* 전문 개발자는 이 파워 앱의 기능을 풍부하게 해 주는 커스텀 커넥터를 위한 백엔드 API를 OpenAPI 형식으로 공개하는 형태로\n\n협업을 하는 과정에 대해 알아 보았습니다. 이를 통해 결국 Lamna 피트니스 센터의\n\n* 고객들은 좀 더 체계적인 운동 일지를 작성할 수 있게 되었고,\n* 이 데이터를 바탕으로 트레이너들은 좀 더 회원별로 개인화된 운동 루틴을 작성할 수 있게 되었습니다.\n\n이렇게 함으로써 회원과 피트니스 센터 모두에게 좀 더 나은 서비스를 제공할 수 있는 기반이 다져진 셈이죠. [다음 포스트][post 2]에서는 [애저 모니터][az monitor] 서비스를 이용해 파워 앱에서 데이터 저장소까지 데이터가 이동하면서 거쳐가는 경로들을 추적하는 과정에 대해 알아보기로 하겠습니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/c/microsoftdeveloperkorea\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-03-ko.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-04-ko.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-05-ko.png\n[image-06]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-06-ko.png\n[image-07]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-07-ko.png\n[image-08]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-08-ko.png\n[image-09]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-09-ko.png\n[image-10]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-10-ko.png\n[image-11]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-11.png\n[image-12]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-12.png\n[image-13]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-13.png\n[image-14]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/power-apps-in-fusion-teams-14.png\n\n[post 1]: /developerkorea/posts/2021/05/18/power-apps-in-fusion-teams/\n[post 2]: /developerkorea/posts/2021/05/25/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db/\n\n[gh sample]: https://github.com/aliencube/GymLog\n[gh sample api routine]: https://github.com/aliencube/GymLog/blob/main/src/GymLog.FunctionApp/Triggers/RoutineHttpTrigges.cs\n[gh sample app]: https://github.com/aliencube/GymLog/blob/main/packages/GymLogs.zip\n\n[pa fusion path]: https://docs.microsoft.com/ko-kr/learn/paths/transform-business-applications-with-fusion-development/?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[pa fusion ebook]: https://docs.microsoft.com/ko-kr/powerapps/guidance/fusion-dev-ebook/?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n\n[gartner fusion]: https://blogs.gartner.com/hank-barnes/2021/03/30/fusion-teams-a-critical-area-for-vendors-to-develop-understanding/\n\n[eip pubsub]: https://www.enterpriseintegrationpatterns.com/patterns/messaging/PublishSubscribeChannel.html\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[az fncapp extension openapi]: https://github.com/Azure/azure-functions-openapi-extension\n\n[az svcbus]: https://docs.microsoft.com/ko-kr/azure/service-bus-messaging/service-bus-messaging-overview?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[az cosdba]: https://docs.microsoft.com/ko-kr/azure/cosmos-db/introduction?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n\n[az monitor]: https://docs.microsoft.com/ko-kr/azure/azure-monitor/overview?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n\n[pa]: https://powerapps.microsoft.com/ko-kr/?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[pa cuscon]: https://docs.microsoft.com/ko-kr/connectors/custom-connectors/?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n[pa cuscon create]: https://docs.microsoft.com/ko-kr/connectors/custom-connectors/define-openapi-definition?WT.mc_id=power-27849-juyoo&ocid=AID3027813\n\n[nuget openapi]: https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.OpenApi/\n"},"d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed":{"id":"d5fa1a63-1bd2-403d-a3e6-a68ae41c25ed","index":"Blog","path":"/posts/2021/05/25/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db/","node":{"title":"파워 앱의 종단간 데이터 흐름 실시간 추적","category":"Power Platform","description":"이 포스트에서는 퓨전 개발팀에서 개발한 파워 앱에서 코스모스 DB까지 종단간 데이터 흐름을 오픈 텔레메트리 기법을 이용해 실시간으로 추적하는 방법에 대해 알아봅니다.","content":"\n클라우드 기반의 애플리케이션 아키텍처를 보고 있노라면, 굳이 마이크로서비스 아키텍처가 아니라고 하더라도 수많은 시스템들이 복잡하게 연결되어 서로 데이터 혹은 메시지를 주고 받는 경우가 대부분입니다. 이런 경우에 서로 다른 시스템으로 메시지가 오가다 보면 어느 순간 메시지를 잃어버린다든가, 처리가 되지 않은 채로 계속 남아있다든가 하는 경우가 종종 생기곤 하지요.\n\n클라우드 환경에서는 시스템을 구성하는 수많은 컴포넌트들이 저마다의 리듬으로 작동하기 때문에 어느 특정한 시점에서 특정 서비스가 다운될 수 있다는 것을 항상 전제 조건으로 하고 아키텍처를 설계해야 합니다. 따라서, 메시지가 처음부터 끝까지 무슨 경로를 통해 어떻게 흘러가는지를 지속적으로 확인할 수 있게끔 설계하는 것이 좋은데요, 이런 기능을 가리켜 관측 용이성(Observability)과 추적 용이성(Traceability)이라고 합니다.\n\n[지난 포스트][post 1]에서는 퓨전 개발팀 안에서 시민 개발자가 OpenAPI 기능을 추가한 [애저 펑션][az fncapp] 기반의 API를 이용해 [파워 앱][pa]을 개발하는 과정에 대해 알아보았습니다. 이번에는 이 파워 앱에서 데이터베이스까지 데이터가 이동하는 과정을 [애저 모니터][az monitor] 서비스와 [애플리케이션 인사이트][az appins] 서비스를 이용해 추적하는 방법에 대해 알아보고, 이를 [오픈 텔레메트리][cncf opentelemetry]에서 제공하는 개념과 연결지어 논의해 보기로 합니다.\n\n* [퓨전 개발팀의 파워 앱 개발 실사례][post 1]\n* ***파워 앱의 종단간 데이터 흐름 실시간 추적***\n* 파워 앱에 DevOps 적용하기\n\n> 이 포스트에 사용한 백엔드 API 샘플 코드는 이곳 [GitHub 리포지토리][gh sample]에서 다운로드 받을 수 있습니다.\n\n\n## 시나리오 ##\n\nLamna 피트니스 센터에서는 회원들을 위해 [파워 앱][pa]으로 만든 모바일 앱으로 운동 일지를 작성하는 서비스를 제공하고 있습니다. 그런데, 종종 데이터 입력시 오류가 난다는 회원들의 피드백을 받곤 하는데요, 퓨전 개발팀에서 퍼스널 트레이너 팀을 대표하는 안지민쌤은 이 문제를 같은 팀의 전문 개발자인 권수빈쌤과 공유했습니다. 따라서, 수빈쌤은 어떻게 데이터가 파워 앱에서 애저 코스모스 DB로 흘러가는지 추적할 수 있는 로직을 추가하기로 방향을 잡고 애플리케이션을 수정하기로 했습니다. 데이터 추적 프로세스를 그림으로 나타내면 아래와 같습니다.\n\n![GymLog Telemetry Architecture][image-01]\n\n위의 프로세스를 [오픈 텔레메트리][cncf opentelemetry]에서 정의한 스펙에 맞춰 분석해 볼까요?\n\n* [파워 앱][pa]에서 [코스모스 DB][az cosdba]까지 데이터가 흘러가는 전체 흐름을 [트레이스(trace)][cncf opentelemetry trace]라고 합니다.\n* 이 전체 흐름은 [애저 서비스 버스][az svcbus]를 경계로 삼아 서비스 버스에 메시지를 보내기 전과 후로 나눌 수 있는데, 서비스 버스 전과 후는 완전히 다른 독립적인 애플리케이션(퍼블리셔와 섭스크라이버)이기 때문입니다. 이렇게 나뉘어진 각각을 가리켜 [스팬(span)][cncf opentelemetry span]이라고 합니다. 즉, 스팬은 데이터 혹은 메시지를 처리하는 하나의 작업 단위라고 할 수 있죠.\n  * 파워 앱에서 보낸 데이터는 [애저 테이블 저장소][az st table]에 저장되고 마지막 `publish` 액션을 통해 합산(aggregate)된 데이터가 [애저 서비스 버스][az svcbus]로 전송됩니다.\n\n  > 위 그림에서는 이 부분이 `routine`, `exercise`, `publish`의 세 가지 액션으로 구성되어 있습니다. 따라서, 이 부분을 세 개의 스팬으로 잘게 쪼갤 수도 있습니다만, 여기서는 하나의 스팬으로 처리하기로 하겠습니다.\n\n  * [애저 서비스 버스][az svcbus]에서 받은 메시지를 처리해서 [코스모스 DB][az cosdba]에 저장합니다.\n* 한 스팬에서 다른 스팬으로 데이터가 이동할 때 데이터 추적에 필요한 메타 데이터가 함께 이동해야 합니다. 이를 [스팬 컨텍스트(span context)][cncf opentelemetry spancontext]라고 합니다.\n\n\n## 파워 앱 개선 ##\n\n앞서 언급한 바와 같이 트레이스는 파워 앱에서부터 시작하기 때문에, 파워 앱에서 트레이스를 위해 작업해 줘야 할 것이 있습니다. 아래 그림과 같이 **Start** 버튼을 누를 때 `correlationId` 값과 `spanId` 값을 파워 앱에서 준비해서 첫번째 `routine` 액션을 수행할 때 API로 보내는 것이 되겠네요.\n\n![Power Apps Canvas - Correlation ID and Span ID][image-02]\n\n이렇게 함으로써, 파워 앱에서부터 추적을 시작한다는 것을 전체 모니터링 과정에서 알 수 있고, 첫번째 스팬도 파워 앱에서부터 시작한다는 것 역시도 알 수 있습니다. 여기서 생성한 `correlationId` 값과 `spanId` 값은 `publish` 액션을 수행할 때 까지 계속해서 따라다닙니다. 더우기 `correlationId` 값은 애저 서비스 버스를 통해 다른 스팬으로 넘어갈 때에도 스팬 컨텍스트를 통해 계속해서 다른 스팬으로 전달됩니다.\n\n\n## 백엔드 개선 ##\n\n애저 펑션은 [애플리케이션 인사이트][az appins] 서비스의 계측 키(instrumentation key)만 연결해 놓으면 자동으로 모든 추적 데이터를 수집합니다. [오픈 텔레메트리][cncf opentelemetry]의 구현체 중 하나인 [OpenTelemetry.NET][cncf opentelemetry dotnet]을 보면 현재 추적 관련 구현은 [1.0 버전으로 안정화 되었고][cncf opentelemetry dotnet ga], 메트릭이라든가 세부 로그 작성 관련해서는 곧 GA를 목표로 활발하게 작업중입니다. 하지만 안타깝게도 이 구현체가 [애저 펑션에서는 제대로 작동하지 않습니다][cncf opentelemetry dotnet issue]. 따라서, 여기서는 오픈 텔레메트리의 추적 과정을 로그 저장 수준에서만 구현해서 애플리케이션 인사이트와 통합해 보기로 하겠습니다.\n\n\n### 퍼블리셔 &ndash; HTTP 트리거 ###\n\n그렇다면 로그는 어느 시점에 저장하는 것이 좋을까요?\n\n백엔드 API는 `routine`, `exercise`, `publish` 액션으로 구성되어 있고, 각 액션은 [애저 테이블 저장소][az st table]에 이벤트 소싱 형태로 데이터를 일시 저장합니다. 따라서, 테이블에 데이터를 저장하는 시점에 추적을 위한 일종의 체크포인트로서 로그를 하나 남기는 것이 좋습니다. 또한, 마지막 `publish` 액션에서는 이렇게 저장된 데이터를 합산(aggregate)해서 [애저 서비스 버스][az svcbus]로 메시지를 보내는데, 메시지를 보낸 후에도 체크포인트 로그를 남겨 놓습니다.\n\n애저 펑션의 로깅 기능은 `ILogger` 인터페이스를 통해 사용할 수 있는데, 애플리케이션 인사이트와 연동시켜 놓으면 사용자 지정 텔레메트리 속성을 손쉽게 저장합니다. 그렇다면 사용자 지정 텔레메트리 속성으로 어떤 것들을 지정하면 좋을까요?\n\n* **이벤트 종류**: 액션과 액션의 수행 여부 &ndash; `RoutineReceived`, `ExerciseCreated`, `MessageNotPublished` 등\n* **이벤트 상태**: 성공 혹은 실패 &ndash; `Succeeded`, `Failed` 등\n* **이벤트 ID**: 애저 펑션의 Invocation ID로 실행될 때 마다 새롭게 GUID가 할당됨\n* **스팬 종류**: 스팬의 종류 &ndash; `Publisher` 또는 `Subscriber`\n* **스팬 상태**: 스팬의 상태 &ndash; `PublisherInitiated`, `SubscriberInProgress`, `PublisherCompleted` 등\n* **스팬 ID**: 매번 스팬이 실행될 때 마다 새롭게 할당되는 GUID\n* **인터페이스 종류**: 사용자 인터페이스의 종류 &ndash; `Test Harness` 또는 `Power Apps App`\n* **코릴레이션 ID**: 트레이스 전체에서 메시지 추적을 위한 고유 ID\n\n이 정도를 [애플리케이션 인사이트][az appins]를 통해 저장해 두면, 어떤 트레이스에서(코릴레이션 ID) 무슨 인터페이스를 통해(테스트 혹은 파워 앱), 어떤 스팬을 거쳐서, 데이터 처리(이벤트 종류)에 성공했는지 여부(이벤트 상태)를 한 눈에 알 수 있겠죠?\n\n이를 위해 `ILogger` [확장 메서드를 하나 구현][gh sample logger]해서 애저 펑션 안에서 아래와 같이 사용합니다. 코드에서 보이다시피 코릴레이션 ID 값과 스팬 ID 값은 파워 앱에서 보내온 것을 사용합니다 (line #9-10). 그리고, 이벤트 ID 값은 애저 펑션의 `invocationId` 값을 그대로 사용하면 되겠네요 (line #12). 마지막으로 이벤트 종류, 이벤트 상태, 스팬 종류, 스팬 상태, 인터페이스 종류, 코릴레이션 ID 값을 로그로 보냅니다 (line #14-17). 아래의 코드는 파워 앱으로부터 `routine` 액션을 수행할 때, 요청 데이터를 문제 없이 받았음을 기록하는 부분입니다.\n\nhttps://gist.github.com/justinyoo/9679433b6d886897cc09d8bcf1c8b6de?file=01-create-routine-01.cs&highlights=9-10,12,14-17\n\n위와 같이 우선 파워 앱으로부터 요청 데이터를 잘 받았음을 체크포인트 로그로 남겨뒀으니, 이제 아래 코드를 볼까요? 우선 요청 데이터를 애저 테이블 저장소에 저장합니다 (line #14). 이 때 성공적으로 저장했다면 거기에 맞춰 로그를 기록합니다 (line #18-23). 만약 이 과정에서 에러가 발생했다면 예외 처리를 하면서 에러 로그를 작성하면 되겠네요 (line #29-34).\n\nhttps://gist.github.com/justinyoo/9679433b6d886897cc09d8bcf1c8b6de?file=02-create-routine-02.cs&highlights=14,18-23,29-34\n\n이와 비슷한 방식으로 다른 `exercise`, `publish` 액션에도 체크포인트 로그 처리를 합니다.\n\n\n### 퍼블리셔 &ndash; 스팬 컨텍스트 ###\n\n`publish` 액션에서는 체크포인트 로그 기능을 구현할 뿐만 아니라, 스팬 컨텍스트 처리도 함께 해야 합니다. 스팬 컨텍스트는 스팬을 넘나들면서 데이터 추적과 관련한 메타 데이터를 함께 보내야 하는 부분인데, 이게 HTTP 요청/응답을 사용할 경우에는 요청 헤더에, 애저 서비스 버스를 사용할 경우에는 메시지 봉투에 넣어주는 형태로 구현하면 됩니다. 여기서는 애저 서비스 버스를 사용하므로 메시지 봉투에 구현된 `ApplicationProperties` 딕셔너리를 이용하겠습니다.\n\n아래 `publish` 액션에 대한 애저 펑션 코드를 볼까요? 서비스 버스 메시지의 본문은 운동 기록에 대한 것이지만 (line #23-24), 나머지 데이터는 메시지 개체의 `CorrelationId`, `MessageId` 속성에 (line #26-27), 나머지는 `ApplicationProperties` 딕셔너리를 통해 섭스크라이버 쪽에서 활용할 수 있게끔 지정해 줍니다 (line #30-33). 마지막으로 애저 서비스 버스에 메시지를 보내고 나면 체크포인트 로그를 생성합니다 (line #37-42).\n\nhttps://gist.github.com/justinyoo/9679433b6d886897cc09d8bcf1c8b6de?file=03-publish-routine.cs&highlights=23-24,26-27,30-33,37-42\n\n\n### 섭스크라이버 &ndash; 서비스 버스 트리거 ###\n\n위에서 정의한 바와 같이 퍼블리셔 쪽에서 애저 서비스 버스의 메시지 봉투를 이용해서 스팬 컨텍스트를 전달했으니, 섭스크라이버 쪽에서는 이를 받아서 사용합니다.\n\n아래 코드는 메시지 봉투를 해석하는 과정을 표현한 것인데요, 스팬 컨텍스트를 통해 코릴레이션 ID 값을 복원하고 (line #10), 메시지 ID 값을 복원한다 (line #13). 그리고 메시지를 성공적으로 복원한 결과를 체크포인트 로그에 남겨둔다 (line #16-19).\n\nhttps://gist.github.com/justinyoo/9679433b6d886897cc09d8bcf1c8b6de?file=04-ingest-01.cs&highlights=10,13,16-19\n\n마지막으로 애저 코스모스 DB에 레코드를 저장하고 (line #12), 체크포인트 로그를 남겨둡니다 (line #16-21). 혹시 이 과정에서 에러가 발생할 경우 예외 처리를 한 후 마찬가지로 체크포인트 로그를 저장합니다 (line #25-30).\n\nhttps://gist.github.com/justinyoo/9679433b6d886897cc09d8bcf1c8b6de?file=05-ingest-02.cs&highlights=12,16-21,25-30\n\n여기까지 해서 데이터가 지나가는 길목마다 체크포인트를 두고, 해당 체크포인트마다 적절한 로그를 애플리케이션 인사이트로 저장하게끔 구현했습니다. 그렇다면, 이제 실제로 이를 [애저 모니터 서비스][az monitor]를 이용해서 어떻게 추적할 수 있는지 살펴 볼까요?\n\n\n## 애저 모니터링 KUSTO 쿼리 ##\n\n안지민쌤은 다시 회원으로부터 파워 앱에서 운동 일지를 저장하는 과정에서 에러가 생겼다는 피드백을 받았습니다. 마침 이번에는 스크린샷도 함께 받았는데, 대략 아래와 같군요.\n\n![Power Apps Workout Screen][image-03]\n![Power Apps Error Screen][image-04]\n\n지민쌤은 이 스크린샷을 수빈쌤과 공유했고, 이를 바탕으로 수빈쌤은 아래와 같은 [Kusto 쿼리][az monitor kusto]를 애플리케이션 인사이트 쿼리 화면에서 실행시켰습니다. 우선 이 에러를 추적하기 위해 `correlationId` 값을 변수로 지정했습니다 (line #1). 그리고 앞서 저장했던 사용자 지정 텔레메트리 속성값을 이용해서 쿼리를 작성했습니다. 모든 사용자 지정 텔레메트리 속성 값은 `customDimensions.prop__`으로 시작하므로 `where` 구문에서 해당 코릴레이션 ID 값으로 필터링을 했고 (line #4), `project` 구문에서는 전체 필드가 아닌 내가 원하는 필드만 지정했습니다 (line #5-18).\n\nhttps://gist.github.com/justinyoo/9679433b6d886897cc09d8bcf1c8b6de?file=06-kusto-query.kql&highlights=1,4,5-18\n\n그리고 이렇게 해서 쿼리를 실행 시킨 결과는 아래와 같습니다. 운동 메시지를 받는 데 까지는 성공했지만, 이를 처리해서 애저 테이블 저장소에 저장하는 과정에서 에러가 생긴 것을 알 수 있네요.\n\n![Application Insights Kusto Query Result - Failed][image-05]\n\n수빈쌤이 어느 부분에서 오류가 발생했는지 알아냈으니, 이 부분을 수정해서 다시 애저 펑션 API를 배포했고, 이제는 더이상 오류가 발생하지 않았습니다. 아래는 성공한 기록 중 하나를 임의로 조회한 결과입니다. 퍼블리셔 쪽에서 보낸 메시지를 섭스크라이버 쪽에서 제대로 받아 처리하고 애플리케이션 로직에 따라 이 메시지 ID 값이 그대로 코스모드 DB의 레코드 ID 값이 된 것이 보이나요?\n\n![Application Insights Kusto Query Result - Succeeded][image-06]\n\n이렇게 해서 데이터 추적 로직이 [애플리케이션 인사이트][az appins]를 통해 [오픈 텔레메트리][cncf opentelemetry]의 형식을 빌어 구현한 것을 확인했습니다. 이제 지민쌤과 트레이너들, 그리고 모든 회원들이 앱을 사용하다가 에러가 생기면 코릴레이션 ID 값만 불러주면 손쉽게 어디에서 문제가 생겼는지 추적할 수 있겠군요!\n\n---\n\n지금까지 퓨전 개발팀에서 개발한 앱을 두고, 처음부터 끝까지 하나의 ID 값을 이용해 데이터가 이동하는 과정을 추적하는 것을 [오픈 텔레메트리][cncf opentelemetry]와 [애플리케이션 인사이트][az appins]를 이용해 구현했습니다.\n\n아쉽게도 오픈 텔레메트리 닷넷 구현체가 아직 애저 펑션에서 완벽하게 작동하지 않긴 하지만, 여전히 애플리케이션 인사이트를 이용해 오픈 텔레메트리의 사상을 구현해 낼 수 있으므로 당분간 큰 문제는 없을 것으로 생각합니다. 곧 애플리케이션 인사이트와 오픈 텔레메트리간 통합이 애저 펑션에서도 이루어지길 기대합니다.\n\n다음 포스트에서는 파워 앱을 DevOps 기법을 이용해 배포 자동화 하는 방법을 살펴보기로 하겠습니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/c/microsoftdeveloperkorea\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db-04.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db-05.png\n[image-06]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db-06.png\n\n\n[post 1]: /developerkorea/posts/2021/05/18/power-apps-in-fusion-teams/\n[post 2]: /developerkorea/posts/2021/05/25/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db/\n\n[gh sample]: https://github.com/aliencube/GymLog\n[gh sample logger]: https://github.com/aliencube/GymLog/blob/main/src/GymLog.FunctionApp/Extensions/LoggerExtensions.cs\n\n[cncf]: https://cncf.io/\n[cncf opentelemetry]: https://opentelemetry.io/\n[cncf opentelemetry dotnet]: https://opentelemetry.io/docs/net/\n[cncf opentelemetry dotnet ga]: https://devblogs.microsoft.com/dotnet/opentelemetry-net-reaches-v1-0/?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n[cncf opentelemetry dotnet issue]: https://github.com/open-telemetry/opentelemetry-dotnet/issues/1602\n[cncf opentelemetry trace]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#traces\n[cncf opentelemetry span]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#spans\n[cncf opentelemetry spancontext]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#spancontext\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n\n[az svcbus]: https://docs.microsoft.com/ko-kr/azure/service-bus-messaging/service-bus-messaging-overview?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n[az cosdba]: https://docs.microsoft.com/ko-kr/azure/cosmos-db/introduction?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n\n[az st table]: https://docs.microsoft.com/ko-kr/azure/storage/tables/table-storage-overview?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n\n[az appins]: https://docs.microsoft.com/ko-kr/azure/azure-monitor/app/app-insights-overview?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n[az monitor]: https://docs.microsoft.com/ko-kr/azure/azure-monitor/overview?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n[az monitor kusto]: https://docs.microsoft.com/ko-kr/azure/azure-monitor/logs/log-query-overview?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n\n[pa]: https://powerapps.microsoft.com/ko-kr/?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n"},"title":"파워 앱의 종단간 데이터 흐름 실시간 추적","content":"\n클라우드 기반의 애플리케이션 아키텍처를 보고 있노라면, 굳이 마이크로서비스 아키텍처가 아니라고 하더라도 수많은 시스템들이 복잡하게 연결되어 서로 데이터 혹은 메시지를 주고 받는 경우가 대부분입니다. 이런 경우에 서로 다른 시스템으로 메시지가 오가다 보면 어느 순간 메시지를 잃어버린다든가, 처리가 되지 않은 채로 계속 남아있다든가 하는 경우가 종종 생기곤 하지요.\n\n클라우드 환경에서는 시스템을 구성하는 수많은 컴포넌트들이 저마다의 리듬으로 작동하기 때문에 어느 특정한 시점에서 특정 서비스가 다운될 수 있다는 것을 항상 전제 조건으로 하고 아키텍처를 설계해야 합니다. 따라서, 메시지가 처음부터 끝까지 무슨 경로를 통해 어떻게 흘러가는지를 지속적으로 확인할 수 있게끔 설계하는 것이 좋은데요, 이런 기능을 가리켜 관측 용이성(Observability)과 추적 용이성(Traceability)이라고 합니다.\n\n[지난 포스트][post 1]에서는 퓨전 개발팀 안에서 시민 개발자가 OpenAPI 기능을 추가한 [애저 펑션][az fncapp] 기반의 API를 이용해 [파워 앱][pa]을 개발하는 과정에 대해 알아보았습니다. 이번에는 이 파워 앱에서 데이터베이스까지 데이터가 이동하는 과정을 [애저 모니터][az monitor] 서비스와 [애플리케이션 인사이트][az appins] 서비스를 이용해 추적하는 방법에 대해 알아보고, 이를 [오픈 텔레메트리][cncf opentelemetry]에서 제공하는 개념과 연결지어 논의해 보기로 합니다.\n\n* [퓨전 개발팀의 파워 앱 개발 실사례][post 1]\n* ***파워 앱의 종단간 데이터 흐름 실시간 추적***\n* 파워 앱에 DevOps 적용하기\n\n> 이 포스트에 사용한 백엔드 API 샘플 코드는 이곳 [GitHub 리포지토리][gh sample]에서 다운로드 받을 수 있습니다.\n\n\n## 시나리오 ##\n\nLamna 피트니스 센터에서는 회원들을 위해 [파워 앱][pa]으로 만든 모바일 앱으로 운동 일지를 작성하는 서비스를 제공하고 있습니다. 그런데, 종종 데이터 입력시 오류가 난다는 회원들의 피드백을 받곤 하는데요, 퓨전 개발팀에서 퍼스널 트레이너 팀을 대표하는 안지민쌤은 이 문제를 같은 팀의 전문 개발자인 권수빈쌤과 공유했습니다. 따라서, 수빈쌤은 어떻게 데이터가 파워 앱에서 애저 코스모스 DB로 흘러가는지 추적할 수 있는 로직을 추가하기로 방향을 잡고 애플리케이션을 수정하기로 했습니다. 데이터 추적 프로세스를 그림으로 나타내면 아래와 같습니다.\n\n![GymLog Telemetry Architecture][image-01]\n\n위의 프로세스를 [오픈 텔레메트리][cncf opentelemetry]에서 정의한 스펙에 맞춰 분석해 볼까요?\n\n* [파워 앱][pa]에서 [코스모스 DB][az cosdba]까지 데이터가 흘러가는 전체 흐름을 [트레이스(trace)][cncf opentelemetry trace]라고 합니다.\n* 이 전체 흐름은 [애저 서비스 버스][az svcbus]를 경계로 삼아 서비스 버스에 메시지를 보내기 전과 후로 나눌 수 있는데, 서비스 버스 전과 후는 완전히 다른 독립적인 애플리케이션(퍼블리셔와 섭스크라이버)이기 때문입니다. 이렇게 나뉘어진 각각을 가리켜 [스팬(span)][cncf opentelemetry span]이라고 합니다. 즉, 스팬은 데이터 혹은 메시지를 처리하는 하나의 작업 단위라고 할 수 있죠.\n  * 파워 앱에서 보낸 데이터는 [애저 테이블 저장소][az st table]에 저장되고 마지막 `publish` 액션을 통해 합산(aggregate)된 데이터가 [애저 서비스 버스][az svcbus]로 전송됩니다.\n\n  > 위 그림에서는 이 부분이 `routine`, `exercise`, `publish`의 세 가지 액션으로 구성되어 있습니다. 따라서, 이 부분을 세 개의 스팬으로 잘게 쪼갤 수도 있습니다만, 여기서는 하나의 스팬으로 처리하기로 하겠습니다.\n\n  * [애저 서비스 버스][az svcbus]에서 받은 메시지를 처리해서 [코스모스 DB][az cosdba]에 저장합니다.\n* 한 스팬에서 다른 스팬으로 데이터가 이동할 때 데이터 추적에 필요한 메타 데이터가 함께 이동해야 합니다. 이를 [스팬 컨텍스트(span context)][cncf opentelemetry spancontext]라고 합니다.\n\n\n## 파워 앱 개선 ##\n\n앞서 언급한 바와 같이 트레이스는 파워 앱에서부터 시작하기 때문에, 파워 앱에서 트레이스를 위해 작업해 줘야 할 것이 있습니다. 아래 그림과 같이 **Start** 버튼을 누를 때 `correlationId` 값과 `spanId` 값을 파워 앱에서 준비해서 첫번째 `routine` 액션을 수행할 때 API로 보내는 것이 되겠네요.\n\n![Power Apps Canvas - Correlation ID and Span ID][image-02]\n\n이렇게 함으로써, 파워 앱에서부터 추적을 시작한다는 것을 전체 모니터링 과정에서 알 수 있고, 첫번째 스팬도 파워 앱에서부터 시작한다는 것 역시도 알 수 있습니다. 여기서 생성한 `correlationId` 값과 `spanId` 값은 `publish` 액션을 수행할 때 까지 계속해서 따라다닙니다. 더우기 `correlationId` 값은 애저 서비스 버스를 통해 다른 스팬으로 넘어갈 때에도 스팬 컨텍스트를 통해 계속해서 다른 스팬으로 전달됩니다.\n\n\n## 백엔드 개선 ##\n\n애저 펑션은 [애플리케이션 인사이트][az appins] 서비스의 계측 키(instrumentation key)만 연결해 놓으면 자동으로 모든 추적 데이터를 수집합니다. [오픈 텔레메트리][cncf opentelemetry]의 구현체 중 하나인 [OpenTelemetry.NET][cncf opentelemetry dotnet]을 보면 현재 추적 관련 구현은 [1.0 버전으로 안정화 되었고][cncf opentelemetry dotnet ga], 메트릭이라든가 세부 로그 작성 관련해서는 곧 GA를 목표로 활발하게 작업중입니다. 하지만 안타깝게도 이 구현체가 [애저 펑션에서는 제대로 작동하지 않습니다][cncf opentelemetry dotnet issue]. 따라서, 여기서는 오픈 텔레메트리의 추적 과정을 로그 저장 수준에서만 구현해서 애플리케이션 인사이트와 통합해 보기로 하겠습니다.\n\n\n### 퍼블리셔 &ndash; HTTP 트리거 ###\n\n그렇다면 로그는 어느 시점에 저장하는 것이 좋을까요?\n\n백엔드 API는 `routine`, `exercise`, `publish` 액션으로 구성되어 있고, 각 액션은 [애저 테이블 저장소][az st table]에 이벤트 소싱 형태로 데이터를 일시 저장합니다. 따라서, 테이블에 데이터를 저장하는 시점에 추적을 위한 일종의 체크포인트로서 로그를 하나 남기는 것이 좋습니다. 또한, 마지막 `publish` 액션에서는 이렇게 저장된 데이터를 합산(aggregate)해서 [애저 서비스 버스][az svcbus]로 메시지를 보내는데, 메시지를 보낸 후에도 체크포인트 로그를 남겨 놓습니다.\n\n애저 펑션의 로깅 기능은 `ILogger` 인터페이스를 통해 사용할 수 있는데, 애플리케이션 인사이트와 연동시켜 놓으면 사용자 지정 텔레메트리 속성을 손쉽게 저장합니다. 그렇다면 사용자 지정 텔레메트리 속성으로 어떤 것들을 지정하면 좋을까요?\n\n* **이벤트 종류**: 액션과 액션의 수행 여부 &ndash; `RoutineReceived`, `ExerciseCreated`, `MessageNotPublished` 등\n* **이벤트 상태**: 성공 혹은 실패 &ndash; `Succeeded`, `Failed` 등\n* **이벤트 ID**: 애저 펑션의 Invocation ID로 실행될 때 마다 새롭게 GUID가 할당됨\n* **스팬 종류**: 스팬의 종류 &ndash; `Publisher` 또는 `Subscriber`\n* **스팬 상태**: 스팬의 상태 &ndash; `PublisherInitiated`, `SubscriberInProgress`, `PublisherCompleted` 등\n* **스팬 ID**: 매번 스팬이 실행될 때 마다 새롭게 할당되는 GUID\n* **인터페이스 종류**: 사용자 인터페이스의 종류 &ndash; `Test Harness` 또는 `Power Apps App`\n* **코릴레이션 ID**: 트레이스 전체에서 메시지 추적을 위한 고유 ID\n\n이 정도를 [애플리케이션 인사이트][az appins]를 통해 저장해 두면, 어떤 트레이스에서(코릴레이션 ID) 무슨 인터페이스를 통해(테스트 혹은 파워 앱), 어떤 스팬을 거쳐서, 데이터 처리(이벤트 종류)에 성공했는지 여부(이벤트 상태)를 한 눈에 알 수 있겠죠?\n\n이를 위해 `ILogger` [확장 메서드를 하나 구현][gh sample logger]해서 애저 펑션 안에서 아래와 같이 사용합니다. 코드에서 보이다시피 코릴레이션 ID 값과 스팬 ID 값은 파워 앱에서 보내온 것을 사용합니다 (line #9-10). 그리고, 이벤트 ID 값은 애저 펑션의 `invocationId` 값을 그대로 사용하면 되겠네요 (line #12). 마지막으로 이벤트 종류, 이벤트 상태, 스팬 종류, 스팬 상태, 인터페이스 종류, 코릴레이션 ID 값을 로그로 보냅니다 (line #14-17). 아래의 코드는 파워 앱으로부터 `routine` 액션을 수행할 때, 요청 데이터를 문제 없이 받았음을 기록하는 부분입니다.\n\nhttps://gist.github.com/justinyoo/9679433b6d886897cc09d8bcf1c8b6de?file=01-create-routine-01.cs&highlights=9-10,12,14-17\n\n위와 같이 우선 파워 앱으로부터 요청 데이터를 잘 받았음을 체크포인트 로그로 남겨뒀으니, 이제 아래 코드를 볼까요? 우선 요청 데이터를 애저 테이블 저장소에 저장합니다 (line #14). 이 때 성공적으로 저장했다면 거기에 맞춰 로그를 기록합니다 (line #18-23). 만약 이 과정에서 에러가 발생했다면 예외 처리를 하면서 에러 로그를 작성하면 되겠네요 (line #29-34).\n\nhttps://gist.github.com/justinyoo/9679433b6d886897cc09d8bcf1c8b6de?file=02-create-routine-02.cs&highlights=14,18-23,29-34\n\n이와 비슷한 방식으로 다른 `exercise`, `publish` 액션에도 체크포인트 로그 처리를 합니다.\n\n\n### 퍼블리셔 &ndash; 스팬 컨텍스트 ###\n\n`publish` 액션에서는 체크포인트 로그 기능을 구현할 뿐만 아니라, 스팬 컨텍스트 처리도 함께 해야 합니다. 스팬 컨텍스트는 스팬을 넘나들면서 데이터 추적과 관련한 메타 데이터를 함께 보내야 하는 부분인데, 이게 HTTP 요청/응답을 사용할 경우에는 요청 헤더에, 애저 서비스 버스를 사용할 경우에는 메시지 봉투에 넣어주는 형태로 구현하면 됩니다. 여기서는 애저 서비스 버스를 사용하므로 메시지 봉투에 구현된 `ApplicationProperties` 딕셔너리를 이용하겠습니다.\n\n아래 `publish` 액션에 대한 애저 펑션 코드를 볼까요? 서비스 버스 메시지의 본문은 운동 기록에 대한 것이지만 (line #23-24), 나머지 데이터는 메시지 개체의 `CorrelationId`, `MessageId` 속성에 (line #26-27), 나머지는 `ApplicationProperties` 딕셔너리를 통해 섭스크라이버 쪽에서 활용할 수 있게끔 지정해 줍니다 (line #30-33). 마지막으로 애저 서비스 버스에 메시지를 보내고 나면 체크포인트 로그를 생성합니다 (line #37-42).\n\nhttps://gist.github.com/justinyoo/9679433b6d886897cc09d8bcf1c8b6de?file=03-publish-routine.cs&highlights=23-24,26-27,30-33,37-42\n\n\n### 섭스크라이버 &ndash; 서비스 버스 트리거 ###\n\n위에서 정의한 바와 같이 퍼블리셔 쪽에서 애저 서비스 버스의 메시지 봉투를 이용해서 스팬 컨텍스트를 전달했으니, 섭스크라이버 쪽에서는 이를 받아서 사용합니다.\n\n아래 코드는 메시지 봉투를 해석하는 과정을 표현한 것인데요, 스팬 컨텍스트를 통해 코릴레이션 ID 값을 복원하고 (line #10), 메시지 ID 값을 복원한다 (line #13). 그리고 메시지를 성공적으로 복원한 결과를 체크포인트 로그에 남겨둔다 (line #16-19).\n\nhttps://gist.github.com/justinyoo/9679433b6d886897cc09d8bcf1c8b6de?file=04-ingest-01.cs&highlights=10,13,16-19\n\n마지막으로 애저 코스모스 DB에 레코드를 저장하고 (line #12), 체크포인트 로그를 남겨둡니다 (line #16-21). 혹시 이 과정에서 에러가 발생할 경우 예외 처리를 한 후 마찬가지로 체크포인트 로그를 저장합니다 (line #25-30).\n\nhttps://gist.github.com/justinyoo/9679433b6d886897cc09d8bcf1c8b6de?file=05-ingest-02.cs&highlights=12,16-21,25-30\n\n여기까지 해서 데이터가 지나가는 길목마다 체크포인트를 두고, 해당 체크포인트마다 적절한 로그를 애플리케이션 인사이트로 저장하게끔 구현했습니다. 그렇다면, 이제 실제로 이를 [애저 모니터 서비스][az monitor]를 이용해서 어떻게 추적할 수 있는지 살펴 볼까요?\n\n\n## 애저 모니터링 KUSTO 쿼리 ##\n\n안지민쌤은 다시 회원으로부터 파워 앱에서 운동 일지를 저장하는 과정에서 에러가 생겼다는 피드백을 받았습니다. 마침 이번에는 스크린샷도 함께 받았는데, 대략 아래와 같군요.\n\n![Power Apps Workout Screen][image-03]\n![Power Apps Error Screen][image-04]\n\n지민쌤은 이 스크린샷을 수빈쌤과 공유했고, 이를 바탕으로 수빈쌤은 아래와 같은 [Kusto 쿼리][az monitor kusto]를 애플리케이션 인사이트 쿼리 화면에서 실행시켰습니다. 우선 이 에러를 추적하기 위해 `correlationId` 값을 변수로 지정했습니다 (line #1). 그리고 앞서 저장했던 사용자 지정 텔레메트리 속성값을 이용해서 쿼리를 작성했습니다. 모든 사용자 지정 텔레메트리 속성 값은 `customDimensions.prop__`으로 시작하므로 `where` 구문에서 해당 코릴레이션 ID 값으로 필터링을 했고 (line #4), `project` 구문에서는 전체 필드가 아닌 내가 원하는 필드만 지정했습니다 (line #5-18).\n\nhttps://gist.github.com/justinyoo/9679433b6d886897cc09d8bcf1c8b6de?file=06-kusto-query.kql&highlights=1,4,5-18\n\n그리고 이렇게 해서 쿼리를 실행 시킨 결과는 아래와 같습니다. 운동 메시지를 받는 데 까지는 성공했지만, 이를 처리해서 애저 테이블 저장소에 저장하는 과정에서 에러가 생긴 것을 알 수 있네요.\n\n![Application Insights Kusto Query Result - Failed][image-05]\n\n수빈쌤이 어느 부분에서 오류가 발생했는지 알아냈으니, 이 부분을 수정해서 다시 애저 펑션 API를 배포했고, 이제는 더이상 오류가 발생하지 않았습니다. 아래는 성공한 기록 중 하나를 임의로 조회한 결과입니다. 퍼블리셔 쪽에서 보낸 메시지를 섭스크라이버 쪽에서 제대로 받아 처리하고 애플리케이션 로직에 따라 이 메시지 ID 값이 그대로 코스모드 DB의 레코드 ID 값이 된 것이 보이나요?\n\n![Application Insights Kusto Query Result - Succeeded][image-06]\n\n이렇게 해서 데이터 추적 로직이 [애플리케이션 인사이트][az appins]를 통해 [오픈 텔레메트리][cncf opentelemetry]의 형식을 빌어 구현한 것을 확인했습니다. 이제 지민쌤과 트레이너들, 그리고 모든 회원들이 앱을 사용하다가 에러가 생기면 코릴레이션 ID 값만 불러주면 손쉽게 어디에서 문제가 생겼는지 추적할 수 있겠군요!\n\n---\n\n지금까지 퓨전 개발팀에서 개발한 앱을 두고, 처음부터 끝까지 하나의 ID 값을 이용해 데이터가 이동하는 과정을 추적하는 것을 [오픈 텔레메트리][cncf opentelemetry]와 [애플리케이션 인사이트][az appins]를 이용해 구현했습니다.\n\n아쉽게도 오픈 텔레메트리 닷넷 구현체가 아직 애저 펑션에서 완벽하게 작동하지 않긴 하지만, 여전히 애플리케이션 인사이트를 이용해 오픈 텔레메트리의 사상을 구현해 낼 수 있으므로 당분간 큰 문제는 없을 것으로 생각합니다. 곧 애플리케이션 인사이트와 오픈 텔레메트리간 통합이 애저 펑션에서도 이루어지길 기대합니다.\n\n다음 포스트에서는 파워 앱을 DevOps 기법을 이용해 배포 자동화 하는 방법을 살펴보기로 하겠습니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n[yt msdevkr]: https://www.youtube.com/c/microsoftdeveloperkorea\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db-01.png\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db-04.png\n[image-05]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db-05.png\n[image-06]: https://sa0blogs.blob.core.windows.net/aliencube/2021/05/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db-06.png\n\n\n[post 1]: /developerkorea/posts/2021/05/18/power-apps-in-fusion-teams/\n[post 2]: /developerkorea/posts/2021/05/25/tracing-end-to-end-data-from-power-apps-to-azure-cosmos-db/\n\n[gh sample]: https://github.com/aliencube/GymLog\n[gh sample logger]: https://github.com/aliencube/GymLog/blob/main/src/GymLog.FunctionApp/Extensions/LoggerExtensions.cs\n\n[cncf]: https://cncf.io/\n[cncf opentelemetry]: https://opentelemetry.io/\n[cncf opentelemetry dotnet]: https://opentelemetry.io/docs/net/\n[cncf opentelemetry dotnet ga]: https://devblogs.microsoft.com/dotnet/opentelemetry-net-reaches-v1-0/?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n[cncf opentelemetry dotnet issue]: https://github.com/open-telemetry/opentelemetry-dotnet/issues/1602\n[cncf opentelemetry trace]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#traces\n[cncf opentelemetry span]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#spans\n[cncf opentelemetry spancontext]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#spancontext\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n\n[az svcbus]: https://docs.microsoft.com/ko-kr/azure/service-bus-messaging/service-bus-messaging-overview?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n[az cosdba]: https://docs.microsoft.com/ko-kr/azure/cosmos-db/introduction?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n\n[az st table]: https://docs.microsoft.com/ko-kr/azure/storage/tables/table-storage-overview?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n\n[az appins]: https://docs.microsoft.com/ko-kr/azure/azure-monitor/app/app-insights-overview?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n[az monitor]: https://docs.microsoft.com/ko-kr/azure/azure-monitor/overview?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n[az monitor kusto]: https://docs.microsoft.com/ko-kr/azure/azure-monitor/logs/log-query-overview?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n\n[pa]: https://powerapps.microsoft.com/ko-kr/?WT.mc_id=dotnet-28936-juyoo&ocid=AID3027813\n"}}]